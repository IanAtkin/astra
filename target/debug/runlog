--- Starting script execution from fact.ast ---
[2025-10-08T07:00:17Z DEBUG astra] Parsed fn factorial(["n"]) [[
        if (n == 0) [
            return 1
        ]
        return n * factorial(n - 1)
    ]]
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("input")
[2025-10-08T07:00:17Z DEBUG astra] Parsed print statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T07:00:17Z DEBUG astra] Parsed statements: [Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]"), Expr(Infix(Var("input"), '=', Num("100"))), Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])]

Executing Statement 1
[2025-10-08T07:00:17Z DEBUG astra] Running statement: Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]")

Executing Statement 2
[2025-10-08T07:00:17Z DEBUG astra] Running statement: Expr(Infix(Var("input"), '=', Num("100")))
Result: 100

Executing Statement 3
[2025-10-08T07:00:17Z DEBUG astra] Running statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Var("input")]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:00:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:00:17Z DEBUG astra] Parsing return statement
[2025-10-08T07:00:17Z DEBUG astra] Parsed return statement: Return(Some(Num("1")))
[2025-10-08T07:00:17Z DEBUG astra] Running statement in function: Return(Some(Num("1")))
Output: Factorial of 100 = 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
Result: Factorial of 100 = 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
