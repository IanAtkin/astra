--- Starting script execution from test2.ast ---
[2025-10-08T07:32:23Z DEBUG astra] Parsing argument, current token: Ident("i")
Parsing Error: Expected ',' or ')' in function call arguments, found Keyword("print")
--- Starting script execution from test_looping.ast ---
[2025-10-08T07:35:13Z DEBUG astra] Parsed fn loop_fn(["i"]) [[
        if (i < 10) [
            print("i is now {}", i)
            i = i + 1
            loop_fn(i)
        ]
    ]]
[2025-10-08T07:35:13Z DEBUG astra] Parsing argument, current token: Ident("i")
[2025-10-08T07:35:13Z DEBUG astra] Parsed print statement: Print(Some("After the loop, i is {}"), [Var("i")])
[2025-10-08T07:35:13Z DEBUG astra] Parsed statements: [Def("loop_fn", ["i"], "[\n    if (i < 10) [\n        print(\"i is now {}\", i)\n        i = i + 1\n        loop_fn(i)\n    ]\n]"), Expr(Infix(Var("i"), '=', Num("0"))), Expr(Call("loop_fn", [Var("i")])), Print(Some("After the loop, i is {}"), [Var("i")])]

Executing Statement 1
[2025-10-08T07:35:13Z DEBUG astra] Running statement: Def("loop_fn", ["i"], "[\n    if (i < 10) [\n        print(\"i is now {}\", i)\n        i = i + 1\n        loop_fn(i)\n    ]\n]")

Executing Statement 2
[2025-10-08T07:35:13Z DEBUG astra] Running statement: Expr(Infix(Var("i"), '=', Num("0")))
Result: 0

Executing Statement 3
[2025-10-08T07:35:13Z DEBUG astra] Running statement: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:35:13Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
Runtime Error (Statement 3): Function 'loop_fn' Execution Error: Unclosed block body. Expected matching ']'
--- Starting script execution from test.ast ---
[2025-10-08T07:36:42Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-08T07:36:42Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-08T07:36:42Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-08T07:36:42Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-08T07:36:42Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T07:36:42Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T07:36:42Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T07:36:42Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T07:36:42Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T07:36:42Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T07:36:42Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T07:36:42Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T07:36:42Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T07:36:42Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T07:36:42Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-08T07:36:42Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-08T07:36:42Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z: That's right, y does not strictly equal z.")
    ], and else body None
[2025-10-08T07:36:42Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-08T07:36:42Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T07:36:42Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T07:36:42Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T07:36:42Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:42Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T07:36:42Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T07:36:42Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T07:36:42Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T07:36:42Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T07:36:42Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T07:36:42Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T07:36:42Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T07:36:42Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T07:36:42Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T07:36:42Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T07:36:42Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T07:36:42Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:42Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T07:36:42Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T07:36:42Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T07:36:42Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-08T07:36:42Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T07:36:42Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-08T07:36:42Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T07:36:42Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None)
[2025-10-08T07:36:42Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T07:36:42Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-08T07:36:42Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T07:36:42Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test_operators.ast ---
[2025-10-08T07:36:47Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T07:36:47Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T07:36:47Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T07:36:47Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T07:36:47Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T07:36:47Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T07:36:47Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
[2025-10-08T07:36:47Z DEBUG astra] Parsed print statement: Print(Some("x += 5 -> x = {}"), [Var("x")])
[2025-10-08T07:36:47Z DEBUG astra] Parsed print statement: Print(Some("x -= 2 -> x = {}"), [Var("x")])
[2025-10-08T07:36:47Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Num("2")))
[2025-10-08T07:36:47Z DEBUG astra] Running statement in function: Expr(Infix(Var("y"), '=', Num("3")))
[2025-10-08T07:36:47Z DEBUG astra] Running statement in function: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
Block Output (Stmt 3): 2 ^ 3 = 8
[2025-10-08T07:36:47Z DEBUG astra] Running statement in function: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Block Output (Stmt 4): 10 % 3 = 1
[2025-10-08T07:36:47Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Infix(Var("x"), '+', Num("5"))))
[2025-10-08T07:36:47Z DEBUG astra] Running statement in function: Print(Some("x += 5 -> x = {}"), [Var("x")])
Block Output (Stmt 6): x += 5 -> x = 7
[2025-10-08T07:36:47Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Infix(Var("x"), '-', Num("2"))))
[2025-10-08T07:36:47Z DEBUG astra] Running statement in function: Print(Some("x -= 2 -> x = {}"), [Var("x")])
Block Output (Stmt 8): x -= 2 -> x = 5
Result: 5
--- Starting script execution from fact.ast ---
[2025-10-08T07:36:52Z DEBUG astra] Parsed fn factorial(["n"]) [[
        if (n == 0) [
            return 1
        ]
        return n * factorial(n - 1)
    ]]
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("input")
[2025-10-08T07:36:52Z DEBUG astra] Parsed print statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T07:36:52Z DEBUG astra] Parsed statements: [Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]"), Expr(Infix(Var("input"), '=', Num("100"))), Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])]

Executing Statement 1
[2025-10-08T07:36:52Z DEBUG astra] Running statement: Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]")

Executing Statement 2
[2025-10-08T07:36:52Z DEBUG astra] Running statement: Expr(Infix(Var("input"), '=', Num("100")))
Result: 100

Executing Statement 3
[2025-10-08T07:36:52Z DEBUG astra] Running statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Var("input")]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:36:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T07:36:52Z DEBUG astra] Parsing return statement
[2025-10-08T07:36:52Z DEBUG astra] Parsed return statement: Return(Some(Num("1")))
[2025-10-08T07:36:52Z DEBUG astra] Running statement in function: Return(Some(Num("1")))
Output: Factorial of 100 = 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
Result: Factorial of 100 = 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
--- Starting script execution from test_looping.ast ---
[2025-10-08T07:36:57Z DEBUG astra] Parsed fn loop_fn(["i"]) [[
        if (i < 10) [
            print("i is now {}", i)
            i = i + 1
            loop_fn(i)
        ]
    ]]
[2025-10-08T07:36:57Z DEBUG astra] Parsing argument, current token: Ident("i")
[2025-10-08T07:36:57Z DEBUG astra] Parsed print statement: Print(Some("After the loop, i is {}"), [Var("i")])
[2025-10-08T07:36:57Z DEBUG astra] Parsed statements: [Def("loop_fn", ["i"], "[\n    if (i < 10) [\n        print(\"i is now {}\", i)\n        i = i + 1\n        loop_fn(i)\n    ]\n]"), Expr(Infix(Var("i"), '=', Num("0"))), Expr(Call("loop_fn", [Var("i")])), Print(Some("After the loop, i is {}"), [Var("i")])]

Executing Statement 1
[2025-10-08T07:36:57Z DEBUG astra] Running statement: Def("loop_fn", ["i"], "[\n    if (i < 10) [\n        print(\"i is now {}\", i)\n        i = i + 1\n        loop_fn(i)\n    ]\n]")

Executing Statement 2
[2025-10-08T07:36:57Z DEBUG astra] Running statement: Expr(Infix(Var("i"), '=', Num("0")))
Result: 0

Executing Statement 3
[2025-10-08T07:36:57Z DEBUG astra] Running statement: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:36:57Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
Runtime Error (Statement 3): Function 'loop_fn' Execution Error: Unclosed block body. Expected matching ']'
--- Starting script execution from test_looping.ast ---
[2025-10-08T07:42:04Z DEBUG astra] Parsed print statement: Print(Some("i is now {}"), [Var("i")])
[2025-10-08T07:42:04Z DEBUG astra] Parsing argument, current token: Ident("i")
[2025-10-08T07:42:04Z DEBUG astra] Parsed if statement with condition Cmp(Var("i"), "<", Num("10")), if body [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], and else body None
[2025-10-08T07:42:04Z DEBUG astra] Parsed fn loop_fn(["i"]) [[If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)]]
[2025-10-08T07:42:04Z DEBUG astra] Parsing argument, current token: Ident("i")
[2025-10-08T07:42:04Z DEBUG astra] Parsed print statement: Print(Some("After the loop, i is {}"), [Var("i")])
[2025-10-08T07:42:04Z DEBUG astra] Parsed statements: [Def("loop_fn", ["i"], [If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)]), Expr(Infix(Var("i"), '=', Num("0"))), Expr(Call("loop_fn", [Var("i")])), Print(Some("After the loop, i is {}"), [Var("i")])]

Executing Statement 1
[2025-10-08T07:42:04Z DEBUG astra] Running statement: Def("loop_fn", ["i"], [If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)])

Executing Statement 2
[2025-10-08T07:42:04Z DEBUG astra] Running statement: Expr(Infix(Var("i"), '=', Num("0")))
Result: 0

Executing Statement 3
[2025-10-08T07:42:04Z DEBUG astra] Running statement: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:04Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 0
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:04Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 1
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:04Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 2
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:04Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 3
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:04Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 4
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:04Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 5
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:04Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 6
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:04Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 7
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:04Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 8
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:04Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 9
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:04Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:04Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)

Executing Statement 4
[2025-10-08T07:42:04Z DEBUG astra] Running statement: Print(Some("After the loop, i is {}"), [Var("i")])
Output: After the loop, i is 0
Result: After the loop, i is 0
--- Starting script execution from fact.ast ---
[2025-10-08T07:42:32Z DEBUG astra] Parsing return statement
[2025-10-08T07:42:32Z DEBUG astra] Parsed return statement: Return(Some(Num("1")))
[2025-10-08T07:42:32Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [Return(Some(Num("1")))], and else body None
[2025-10-08T07:42:32Z DEBUG astra] Parsing return statement
[2025-10-08T07:42:32Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T07:42:32Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Parsed fn factorial(["n"]) [[If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None), Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))]]
[2025-10-08T07:42:32Z DEBUG astra] Parsing argument, current token: Ident("input")
[2025-10-08T07:42:32Z DEBUG astra] Parsed print statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T07:42:32Z DEBUG astra] Parsed statements: [Def("factorial", ["n"], [If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None), Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))]), Expr(Infix(Var("input"), '=', Num("100"))), Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])]

Executing Statement 1
[2025-10-08T07:42:32Z DEBUG astra] Running statement: Def("factorial", ["n"], [If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None), Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))])

Executing Statement 2
[2025-10-08T07:42:32Z DEBUG astra] Running statement: Expr(Infix(Var("input"), '=', Num("100")))
Result: 100

Executing Statement 3
[2025-10-08T07:42:32Z DEBUG astra] Running statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Var("input")]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T07:42:32Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), [Return(Some(Num("1")))], None)
[2025-10-08T07:42:32Z DEBUG astra] Running statement in function: Return(Some(Num("1")))
Output: Factorial of 100 = 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
Result: Factorial of 100 = 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
--- Starting script execution from test_operators.ast ---
[2025-10-08T07:42:36Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T07:42:36Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
[2025-10-08T07:42:36Z DEBUG astra] Parsed print statement: Print(Some("x += 5 -> x = {}"), [Var("x")])
[2025-10-08T07:42:36Z DEBUG astra] Parsed print statement: Print(Some("x -= 2 -> x = {}"), [Var("x")])
[2025-10-08T07:42:36Z DEBUG astra] Parsed fn test_operators([]) [[Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))]), Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))]), Expr(Infix(Var("x"), '=', Infix(Var("x"), '+', Num("5")))), Print(Some("x += 5 -> x = {}"), [Var("x")]), Expr(Infix(Var("x"), '=', Infix(Var("x"), '-', Num("2")))), Print(Some("x -= 2 -> x = {}"), [Var("x")])]]
[2025-10-08T07:42:36Z DEBUG astra] Parsed statements: [Def("test_operators", [], [Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))]), Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))]), Expr(Infix(Var("x"), '=', Infix(Var("x"), '+', Num("5")))), Print(Some("x += 5 -> x = {}"), [Var("x")]), Expr(Infix(Var("x"), '=', Infix(Var("x"), '-', Num("2")))), Print(Some("x -= 2 -> x = {}"), [Var("x")])]), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T07:42:36Z DEBUG astra] Running statement: Def("test_operators", [], [Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))]), Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))]), Expr(Infix(Var("x"), '=', Infix(Var("x"), '+', Num("5")))), Print(Some("x += 5 -> x = {}"), [Var("x")]), Expr(Infix(Var("x"), '=', Infix(Var("x"), '-', Num("2")))), Print(Some("x -= 2 -> x = {}"), [Var("x")])])

Executing Statement 2
[2025-10-08T07:42:36Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T07:42:36Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T07:42:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Num("2")))
[2025-10-08T07:42:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("y"), '=', Num("3")))
[2025-10-08T07:42:36Z DEBUG astra] Running statement in function: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
Block Output (Stmt 3): 2 ^ 3 = 8
[2025-10-08T07:42:36Z DEBUG astra] Running statement in function: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Block Output (Stmt 4): 10 % 3 = 1
[2025-10-08T07:42:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Infix(Var("x"), '+', Num("5"))))
[2025-10-08T07:42:36Z DEBUG astra] Running statement in function: Print(Some("x += 5 -> x = {}"), [Var("x")])
Block Output (Stmt 6): x += 5 -> x = 7
[2025-10-08T07:42:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Infix(Var("x"), '-', Num("2"))))
[2025-10-08T07:42:36Z DEBUG astra] Running statement in function: Print(Some("x -= 2 -> x = {}"), [Var("x")])
Block Output (Stmt 8): x -= 2 -> x = 5
Result: 5
--- Starting script execution from test.ast ---
[2025-10-08T07:42:40Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T07:42:40Z DEBUG astra] Parsing return statement
[2025-10-08T07:42:40Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T07:42:40Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-08T07:42:40Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T07:42:40Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-08T07:42:40Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T07:42:40Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-08T07:42:40Z DEBUG astra] Parsing return statement
[2025-10-08T07:42:40Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T07:42:40Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-08T07:42:40Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T07:42:40Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T07:42:40Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T07:42:40Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T07:42:40Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T07:42:40Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T07:42:40Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T07:42:40Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T07:42:40Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T07:42:40Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T07:42:40Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T07:42:40Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-08T07:42:40Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-08T07:42:40Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T07:42:40Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-08T07:42:40Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T07:42:40Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-08T07:42:40Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T07:42:40Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-08T07:42:40Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-08T07:42:40Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-08T07:42:40Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))]

Executing Statement 1
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T07:42:40Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T07:42:40Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T07:42:40Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T07:42:40Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T07:42:40Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T07:42:40Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T07:42:40Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T07:42:40Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T07:42:40Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T07:42:40Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T07:42:40Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T07:42:40Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T07:42:40Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T07:42:40Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T07:42:40Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T07:42:40Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-08T07:42:40Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test_looping.ast ---
[2025-10-08T07:42:44Z DEBUG astra] Parsed print statement: Print(Some("i is now {}"), [Var("i")])
[2025-10-08T07:42:44Z DEBUG astra] Parsing argument, current token: Ident("i")
[2025-10-08T07:42:44Z DEBUG astra] Parsed if statement with condition Cmp(Var("i"), "<", Num("10")), if body [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], and else body None
[2025-10-08T07:42:44Z DEBUG astra] Parsed fn loop_fn(["i"]) [[If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)]]
[2025-10-08T07:42:44Z DEBUG astra] Parsing argument, current token: Ident("i")
[2025-10-08T07:42:44Z DEBUG astra] Parsed print statement: Print(Some("After the loop, i is {}"), [Var("i")])
[2025-10-08T07:42:44Z DEBUG astra] Parsed statements: [Def("loop_fn", ["i"], [If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)]), Expr(Infix(Var("i"), '=', Num("0"))), Expr(Call("loop_fn", [Var("i")])), Print(Some("After the loop, i is {}"), [Var("i")])]

Executing Statement 1
[2025-10-08T07:42:44Z DEBUG astra] Running statement: Def("loop_fn", ["i"], [If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)])

Executing Statement 2
[2025-10-08T07:42:44Z DEBUG astra] Running statement: Expr(Infix(Var("i"), '=', Num("0")))
Result: 0

Executing Statement 3
[2025-10-08T07:42:44Z DEBUG astra] Running statement: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:44Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 0
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:44Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 1
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:44Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 2
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:44Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 3
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:44Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 4
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:44Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 5
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:44Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 6
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:44Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 7
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:44Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 8
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:44Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 9
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:42:44Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:42:44Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)

Executing Statement 4
[2025-10-08T07:42:44Z DEBUG astra] Running statement: Print(Some("After the loop, i is {}"), [Var("i")])
Output: After the loop, i is 0
Result: After the loop, i is 0
--- Starting script execution from test_looping.ast ---
[2025-10-08T07:47:24Z DEBUG astra] Parsed print statement: Print(Some("i is now {}"), [Var("i")])
[2025-10-08T07:47:24Z DEBUG astra] Parsing argument, current token: Ident("i")
[2025-10-08T07:47:24Z DEBUG astra] Parsed if statement with condition Cmp(Var("i"), "<", Num("10")), if body [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], and else body None
[2025-10-08T07:47:24Z DEBUG astra] Parsed fn loop_fn(["i"]) [[If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)]]
[2025-10-08T07:47:24Z DEBUG astra] Parsing argument, current token: Ident("i")
[2025-10-08T07:47:24Z DEBUG astra] Parsed print statement: Print(Some("After the loop, i is {}"), [Var("i")])
[2025-10-08T07:47:24Z DEBUG astra] Parsed statements: [Def("loop_fn", ["i"], [If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)]), Expr(Infix(Var("i"), '=', Num("0"))), Expr(Call("loop_fn", [Var("i")])), Print(Some("After the loop, i is {}"), [Var("i")])]

Executing Statement 1
[2025-10-08T07:47:24Z DEBUG astra] Running statement: Def("loop_fn", ["i"], [If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)])

Executing Statement 2
[2025-10-08T07:47:24Z DEBUG astra] Running statement: Expr(Infix(Var("i"), '=', Num("0")))
Result: 0

Executing Statement 3
[2025-10-08T07:47:24Z DEBUG astra] Running statement: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:47:24Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 0
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:47:24Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 1
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:47:24Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 2
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:47:24Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 3
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:47:24Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 4
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:47:24Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 5
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:47:24Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 6
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:47:24Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 7
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:47:24Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 8
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:47:24Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Print(Some("i is now {}"), [Var("i")])
Block Output: i is now 9
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1"))))
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: Expr(Call("loop_fn", [Var("i")]))
[2025-10-08T07:47:24Z DEBUG astra] Executing function 'loop_fn', args: [Var("i")]
[2025-10-08T07:47:24Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), "<", Num("10")), [Print(Some("i is now {}"), [Var("i")]), Expr(Infix(Var("i"), '=', Infix(Var("i"), '+', Num("1")))), Expr(Call("loop_fn", [Var("i")]))], None)

Executing Statement 4
[2025-10-08T07:47:24Z DEBUG astra] Running statement: Print(Some("After the loop, i is {}"), [Var("i")])
Output: After the loop, i is 0
Result: After the loop, i is 0
--- Starting script execution from test.ast ---
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T22:04:57Z DEBUG astra] Parsing return statement
[2025-10-08T22:04:57Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T22:04:57Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T22:04:57Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T22:04:57Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-08T22:04:57Z DEBUG astra] Parsing return statement
[2025-10-08T22:04:57Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T22:04:57Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-08T22:04:57Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T22:04:57Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T22:04:57Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T22:04:57Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T22:04:57Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T22:04:57Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T22:04:57Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-08T22:04:57Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-08T22:04:57Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-08T22:04:57Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-08T22:04:57Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), ">", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-08T22:04:57Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), ">", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))]

Executing Statement 1
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T22:04:57Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T22:04:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T22:04:57Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T22:04:57Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T22:04:57Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T22:04:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T22:04:57Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T22:04:57Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T22:04:57Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:04:57Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T22:04:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T22:04:57Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T22:04:57Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T22:04:57Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T22:04:57Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T22:04:57Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
[2025-10-08T22:04:57Z DEBUG astra] Running statement: If(Cmp(Str("dog"), ">", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-08T22:04:57Z DEBUG astra] Running statement: Print(Some("yes"), [])
Output: yes
--- Starting script execution from test.ast ---
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T22:05:06Z DEBUG astra] Parsing return statement
[2025-10-08T22:05:06Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T22:05:06Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T22:05:06Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T22:05:06Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-08T22:05:06Z DEBUG astra] Parsing return statement
[2025-10-08T22:05:06Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T22:05:06Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-08T22:05:06Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T22:05:06Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T22:05:06Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T22:05:06Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T22:05:06Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T22:05:06Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T22:05:06Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-08T22:05:06Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-08T22:05:06Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-08T22:05:06Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-08T22:05:06Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-08T22:05:06Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))]

Executing Statement 1
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T22:05:06Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T22:05:06Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T22:05:06Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T22:05:06Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T22:05:06Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T22:05:06Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T22:05:06Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T22:05:06Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T22:05:06Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:05:06Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T22:05:06Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T22:05:06Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T22:05:06Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T22:05:06Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T22:05:06Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T22:05:06Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
[2025-10-08T22:05:06Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-08T22:05:06Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no
--- Starting script execution from test.ast ---
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T22:06:09Z DEBUG astra] Parsing return statement
[2025-10-08T22:06:09Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T22:06:09Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T22:06:09Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T22:06:09Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-08T22:06:09Z DEBUG astra] Parsing return statement
[2025-10-08T22:06:09Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T22:06:09Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-08T22:06:09Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T22:06:09Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T22:06:09Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T22:06:09Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T22:06:09Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T22:06:09Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T22:06:09Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-08T22:06:09Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-08T22:06:09Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-08T22:06:09Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-08T22:06:09Z DEBUG astra] Parsed print statement: Print(Some("x is 2 and y is 3"), [])
[2025-10-08T22:06:09Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "==", Num("2")), "and", Cmp(Var("y"), "==", Num("3"))), if body [Print(Some("x is 2 and y is 3"), [])], and else body None
[2025-10-08T22:06:09Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), If(Logic(Cmp(Var("x"), "==", Num("2")), "and", Cmp(Var("y"), "==", Num("3"))), [Print(Some("x is 2 and y is 3"), [])], None)]

Executing Statement 1
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T22:06:09Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T22:06:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T22:06:09Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T22:06:09Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T22:06:09Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T22:06:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T22:06:09Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T22:06:09Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T22:06:09Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:06:09Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T22:06:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T22:06:09Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T22:06:09Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T22:06:09Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T22:06:09Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T22:06:09Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
[2025-10-08T22:06:09Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
[2025-10-08T22:06:09Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "==", Num("2")), "and", Cmp(Var("y"), "==", Num("3"))), [Print(Some("x is 2 and y is 3"), [])], None)
[2025-10-08T22:06:09Z DEBUG astra] Running statement: Print(Some("x is 2 and y is 3"), [])
Output: x is 2 and y is 3
--- Starting script execution from test.ast ---
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T22:06:30Z DEBUG astra] Parsing return statement
[2025-10-08T22:06:30Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T22:06:30Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T22:06:30Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T22:06:30Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-08T22:06:30Z DEBUG astra] Parsing return statement
[2025-10-08T22:06:30Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T22:06:30Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-08T22:06:30Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T22:06:30Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T22:06:30Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T22:06:30Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T22:06:30Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T22:06:30Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T22:06:30Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-08T22:06:30Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-08T22:06:30Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-08T22:06:30Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-08T22:06:30Z DEBUG astra] Parsed print statement: Print(Some("x is 2 and y is 3"), [])
[2025-10-08T22:06:30Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "==", Num("2")), "or", Cmp(Var("y"), "==", Num("2"))), if body [Print(Some("x is 2 and y is 3"), [])], and else body None
[2025-10-08T22:06:30Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), If(Logic(Cmp(Var("x"), "==", Num("2")), "or", Cmp(Var("y"), "==", Num("2"))), [Print(Some("x is 2 and y is 3"), [])], None)]

Executing Statement 1
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T22:06:30Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T22:06:30Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T22:06:30Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T22:06:30Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T22:06:30Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T22:06:30Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T22:06:30Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T22:06:30Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T22:06:30Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:06:30Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T22:06:30Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T22:06:30Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T22:06:30Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T22:06:30Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T22:06:30Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T22:06:30Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
[2025-10-08T22:06:30Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
[2025-10-08T22:06:30Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "==", Num("2")), "or", Cmp(Var("y"), "==", Num("2"))), [Print(Some("x is 2 and y is 3"), [])], None)
[2025-10-08T22:06:30Z DEBUG astra] Running statement: Print(Some("x is 2 and y is 3"), [])
Output: x is 2 and y is 3
--- Starting script execution from test.ast ---
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T22:06:38Z DEBUG astra] Parsing return statement
[2025-10-08T22:06:38Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T22:06:38Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T22:06:38Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T22:06:38Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-08T22:06:38Z DEBUG astra] Parsing return statement
[2025-10-08T22:06:38Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T22:06:38Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-08T22:06:38Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T22:06:38Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T22:06:38Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T22:06:38Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T22:06:38Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T22:06:38Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T22:06:38Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-08T22:06:38Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-08T22:06:38Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-08T22:06:38Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-08T22:06:38Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 3"), [])
[2025-10-08T22:06:38Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "==", Num("2")), "or", Cmp(Var("y"), "==", Num("2"))), if body [Print(Some("x is 2 or y is 3"), [])], and else body None
[2025-10-08T22:06:38Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), If(Logic(Cmp(Var("x"), "==", Num("2")), "or", Cmp(Var("y"), "==", Num("2"))), [Print(Some("x is 2 or y is 3"), [])], None)]

Executing Statement 1
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T22:06:38Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T22:06:38Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T22:06:38Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T22:06:38Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T22:06:38Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T22:06:38Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T22:06:38Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T22:06:38Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T22:06:38Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:06:38Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T22:06:38Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T22:06:38Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T22:06:38Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T22:06:38Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T22:06:38Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T22:06:38Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
[2025-10-08T22:06:38Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
[2025-10-08T22:06:38Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "==", Num("2")), "or", Cmp(Var("y"), "==", Num("2"))), [Print(Some("x is 2 or y is 3"), [])], None)
[2025-10-08T22:06:38Z DEBUG astra] Running statement: Print(Some("x is 2 or y is 3"), [])
Output: x is 2 or y is 3
--- Starting script execution from test.ast ---
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T22:06:44Z DEBUG astra] Parsing return statement
[2025-10-08T22:06:44Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T22:06:44Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T22:06:44Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T22:06:44Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-08T22:06:44Z DEBUG astra] Parsing return statement
[2025-10-08T22:06:44Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T22:06:44Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-08T22:06:44Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T22:06:44Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T22:06:44Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T22:06:44Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T22:06:44Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T22:06:44Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T22:06:44Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-08T22:06:44Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-08T22:06:44Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-08T22:06:44Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-08T22:06:44Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-08T22:06:44Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "==", Num("2")), "or", Cmp(Var("y"), "==", Num("2"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body None
[2025-10-08T22:06:44Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), If(Logic(Cmp(Var("x"), "==", Num("2")), "or", Cmp(Var("y"), "==", Num("2"))), [Print(Some("x is 2 or y is 2"), [])], None)]

Executing Statement 1
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T22:06:44Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T22:06:44Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T22:06:44Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T22:06:44Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T22:06:44Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T22:06:44Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T22:06:44Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T22:06:44Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T22:06:44Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:06:44Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T22:06:44Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T22:06:44Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T22:06:44Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T22:06:44Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T22:06:44Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T22:06:44Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
[2025-10-08T22:06:44Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
[2025-10-08T22:06:44Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "==", Num("2")), "or", Cmp(Var("y"), "==", Num("2"))), [Print(Some("x is 2 or y is 2"), [])], None)
[2025-10-08T22:06:44Z DEBUG astra] Running statement: Print(Some("x is 2 or y is 2"), [])
Output: x is 2 or y is 2
--- Starting script execution from test.ast ---
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T22:06:50Z DEBUG astra] Parsing return statement
[2025-10-08T22:06:50Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T22:06:50Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T22:06:50Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T22:06:50Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-08T22:06:50Z DEBUG astra] Parsing return statement
[2025-10-08T22:06:50Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T22:06:50Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-08T22:06:50Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T22:06:50Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T22:06:50Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T22:06:50Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T22:06:50Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T22:06:50Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T22:06:50Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-08T22:06:50Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-08T22:06:50Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-08T22:06:50Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-08T22:06:50Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-08T22:06:50Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "==", Num("2")), "or", Cmp(Var("y"), "!=", Num("2"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body None
[2025-10-08T22:06:50Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), If(Logic(Cmp(Var("x"), "==", Num("2")), "or", Cmp(Var("y"), "!=", Num("2"))), [Print(Some("x is 2 or y is 2"), [])], None)]

Executing Statement 1
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T22:06:50Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T22:06:50Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T22:06:50Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T22:06:50Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T22:06:50Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T22:06:50Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T22:06:50Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T22:06:50Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T22:06:50Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:06:50Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T22:06:50Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T22:06:50Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T22:06:50Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T22:06:50Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T22:06:50Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T22:06:50Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
[2025-10-08T22:06:50Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
[2025-10-08T22:06:50Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "==", Num("2")), "or", Cmp(Var("y"), "!=", Num("2"))), [Print(Some("x is 2 or y is 2"), [])], None)
[2025-10-08T22:06:50Z DEBUG astra] Running statement: Print(Some("x is 2 or y is 2"), [])
Output: x is 2 or y is 2
--- Starting script execution from test.ast ---
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T22:07:01Z DEBUG astra] Parsing return statement
[2025-10-08T22:07:01Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T22:07:01Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T22:07:01Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T22:07:01Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-08T22:07:01Z DEBUG astra] Parsing return statement
[2025-10-08T22:07:01Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T22:07:01Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-08T22:07:01Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T22:07:01Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T22:07:01Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T22:07:01Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T22:07:01Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T22:07:01Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T22:07:01Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-08T22:07:01Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-08T22:07:01Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-08T22:07:01Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-08T22:07:01Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-08T22:07:01Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("2"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body None
[2025-10-08T22:07:01Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("2"))), [Print(Some("x is 2 or y is 2"), [])], None)]

Executing Statement 1
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T22:07:01Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T22:07:01Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T22:07:01Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T22:07:01Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T22:07:01Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T22:07:01Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T22:07:01Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T22:07:01Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T22:07:01Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:07:01Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T22:07:01Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T22:07:01Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T22:07:01Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T22:07:01Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T22:07:01Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T22:07:01Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
[2025-10-08T22:07:01Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
[2025-10-08T22:07:01Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("2"))), [Print(Some("x is 2 or y is 2"), [])], None)
[2025-10-08T22:07:01Z DEBUG astra] Running statement: Print(Some("x is 2 or y is 2"), [])
Output: x is 2 or y is 2
--- Starting script execution from test.ast ---
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T22:07:07Z DEBUG astra] Parsing return statement
[2025-10-08T22:07:07Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T22:07:07Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T22:07:07Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T22:07:07Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-08T22:07:07Z DEBUG astra] Parsing return statement
[2025-10-08T22:07:07Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T22:07:07Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-08T22:07:07Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T22:07:07Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T22:07:07Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T22:07:07Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T22:07:07Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T22:07:07Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T22:07:07Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-08T22:07:07Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-08T22:07:07Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-08T22:07:07Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-08T22:07:07Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-08T22:07:07Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body None
[2025-10-08T22:07:07Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], None)]

Executing Statement 1
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T22:07:07Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T22:07:07Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T22:07:07Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T22:07:07Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T22:07:07Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T22:07:07Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T22:07:07Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T22:07:07Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T22:07:07Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:07:07Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T22:07:07Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T22:07:07Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T22:07:07Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T22:07:07Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T22:07:07Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T22:07:07Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
[2025-10-08T22:07:07Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
[2025-10-08T22:07:07Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
[2025-10-08T22:07:07Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], None)
--- Starting script execution from test.ast ---
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T22:07:53Z DEBUG astra] Parsing return statement
[2025-10-08T22:07:53Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T22:07:53Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T22:07:53Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T22:07:53Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-08T22:07:53Z DEBUG astra] Parsing return statement
[2025-10-08T22:07:53Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T22:07:53Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-08T22:07:53Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T22:07:53Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T22:07:53Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T22:07:53Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T22:07:53Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T22:07:53Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T22:07:53Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-08T22:07:53Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-08T22:07:53Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-08T22:07:53Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-08T22:07:53Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-08T22:07:53Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-08T22:07:53Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))]

Executing Statement 1
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T22:07:53Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T22:07:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T22:07:53Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T22:07:53Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T22:07:53Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T22:07:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T22:07:53Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T22:07:53Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T22:07:53Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:07:53Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T22:07:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T22:07:53Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T22:07:53Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T22:07:53Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T22:07:53Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T22:07:53Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
[2025-10-08T22:07:53Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
[2025-10-08T22:07:53Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-08T22:07:53Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3
--- Starting script execution from test.ast ---
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T22:08:14Z DEBUG astra] Parsing return statement
[2025-10-08T22:08:14Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T22:08:14Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T22:08:14Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T22:08:14Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-08T22:08:14Z DEBUG astra] Parsing return statement
[2025-10-08T22:08:14Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T22:08:14Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-08T22:08:14Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T22:08:14Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T22:08:14Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T22:08:14Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T22:08:14Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T22:08:14Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T22:08:14Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-08T22:08:14Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-08T22:08:14Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-08T22:08:14Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-08T22:08:14Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-08T22:08:14Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-08T22:08:14Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))]

Executing Statement 1
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T22:08:14Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T22:08:14Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T22:08:14Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T22:08:14Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T22:08:14Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T22:08:14Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T22:08:14Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T22:08:14Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T22:08:14Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:08:14Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T22:08:14Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T22:08:14Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T22:08:14Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T22:08:14Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T22:08:14Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T22:08:14Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
[2025-10-08T22:08:14Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 26
[2025-10-08T22:08:14Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-08T22:08:14Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3
--- Starting script execution from test.ast ---
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T22:08:24Z DEBUG astra] Parsing return statement
[2025-10-08T22:08:24Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T22:08:24Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T22:08:24Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T22:08:24Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-08T22:08:24Z DEBUG astra] Parsing return statement
[2025-10-08T22:08:24Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T22:08:24Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-08T22:08:24Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T22:08:24Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T22:08:24Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T22:08:24Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T22:08:24Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T22:08:24Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T22:08:24Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-08T22:08:24Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-08T22:08:24Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-08T22:08:24Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-08T22:08:24Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-08T22:08:24Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-08T22:08:24Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some(""), []), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))]

Executing Statement 1
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T22:08:24Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T22:08:24Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T22:08:24Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T22:08:24Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T22:08:24Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T22:08:24Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T22:08:24Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T22:08:24Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T22:08:24Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T22:08:24Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T22:08:24Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T22:08:24Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T22:08:24Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T22:08:24Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T22:08:24Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T22:08:24Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
[2025-10-08T22:08:24Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 26
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 27
[2025-10-08T22:08:24Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-08T22:08:24Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3
--- Starting script execution from arrays.ast ---
Parsing Error: Expected ',' or ']' in array literal, found Keyword("print")
--- Starting script execution from arrays.ast ---
Parsing Error: Expected '(' after 'print', found Ident("arr")
--- Starting script execution from arrays.ast ---
[2025-10-08T22:21:43Z DEBUG astra] Parsing argument, current token: Number("3")
[2025-10-08T22:21:43Z DEBUG astra] Parsed print statement: Print(None, [Call("arr", [Num("3")])])
[2025-10-08T22:21:43Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-08T22:21:43Z DEBUG astra] Parsed print statement: Print(None, [Call("arr", [Num("0")])])
[2025-10-08T22:21:43Z DEBUG astra] Parsing argument, current token: Number("4")
[2025-10-08T22:21:43Z DEBUG astra] Parsed print statement: Print(None, [Call("arr", [Num("4")])])
[2025-10-08T22:21:43Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-08T22:21:43Z DEBUG astra] Parsed print statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
[2025-10-08T22:21:43Z DEBUG astra] Parsed statements: [Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")]))), Print(None, [Call("arr", [Num("3")])]), Print(None, [Call("arr", [Num("0")])]), Print(None, [Call("arr", [Num("4")])]), Expr(Infix(Var("value"), '=', Call("pop", [Var("arr")]))), Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])]

Executing Statement 1
[2025-10-08T22:21:43Z DEBUG astra] Running statement: Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")])))
Result: [1, 2, 3, 4, 5]

Executing Statement 2
[2025-10-08T22:21:43Z DEBUG astra] Running statement: Print(None, [Call("arr", [Num("3")])])
[2025-10-08T22:21:43Z DEBUG astra] Executing function 'arr', args: [Num("3")]
Runtime Error (Statement 2): Function 'arr' is not defined
--- Starting script execution from arrays.ast ---
[2025-10-08T22:23:49Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("3"))])
[2025-10-08T22:23:49Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("0"))])
[2025-10-08T22:23:49Z DEBUG astra] Parsing argument, current token: Number("4")
[2025-10-08T22:23:49Z DEBUG astra] Parsed print statement: Print(None, [Call("arr", [Num("4")])])
[2025-10-08T22:23:49Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-08T22:23:49Z DEBUG astra] Parsed print statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
[2025-10-08T22:23:49Z DEBUG astra] Parsed statements: [Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")]))), Print(None, [Index(Var("arr"), Num("3"))]), Print(None, [Index(Var("arr"), Num("0"))]), Print(None, [Call("arr", [Num("4")])]), Expr(Infix(Var("value"), '=', Call("pop", [Var("arr")]))), Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])]

Executing Statement 1
[2025-10-08T22:23:49Z DEBUG astra] Running statement: Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")])))
Result: [1, 2, 3, 4, 5]

Executing Statement 2
[2025-10-08T22:23:49Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("3"))])
Output: 4
Result: 4

Executing Statement 3
[2025-10-08T22:23:49Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("0"))])
Output: 1
Result: 1

Executing Statement 4
[2025-10-08T22:23:49Z DEBUG astra] Running statement: Print(None, [Call("arr", [Num("4")])])
[2025-10-08T22:23:49Z DEBUG astra] Executing function 'arr', args: [Num("4")]
Runtime Error (Statement 4): Function 'arr' is not defined
--- Starting script execution from arrays.ast ---
[2025-10-08T22:25:35Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("3"))])
[2025-10-08T22:25:35Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("0"))])
[2025-10-08T22:25:35Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("4"))])
[2025-10-08T22:25:35Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-08T22:25:35Z DEBUG astra] Parsed print statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
[2025-10-08T22:25:35Z DEBUG astra] Parsed statements: [Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")]))), Print(None, [Index(Var("arr"), Num("3"))]), Print(None, [Index(Var("arr"), Num("0"))]), Print(None, [Index(Var("arr"), Num("4"))]), Expr(Infix(Var("value"), '=', Call("pop", [Var("arr")]))), Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])]

Executing Statement 1
[2025-10-08T22:25:35Z DEBUG astra] Running statement: Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")])))
Result: [1, 2, 3, 4, 5]

Executing Statement 2
[2025-10-08T22:25:35Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("3"))])
Output: 4
Result: 4

Executing Statement 3
[2025-10-08T22:25:35Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("0"))])
Output: 1
Result: 1

Executing Statement 4
[2025-10-08T22:25:35Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("4"))])
Output: 5
Result: 5

Executing Statement 5
[2025-10-08T22:25:35Z DEBUG astra] Running statement: Expr(Infix(Var("value"), '=', Call("pop", [Var("arr")])))
[2025-10-08T22:25:35Z DEBUG astra] Executing function 'pop', args: [Var("arr")]
Runtime Error (Statement 5): 'pop' is a mutable operation that requires the array variable itself to be modified, which is not supported in the current function execution model. Instead, use assignment to achieve the same result: e.g., element = arr[length(arr) - 1]; arr = slice(arr, 0, length(arr) - 1);
--- Starting script execution from arrays.ast ---
[2025-10-08T22:27:11Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("3"))])
[2025-10-08T22:27:11Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("0"))])
[2025-10-08T22:27:11Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("4"))])
[2025-10-08T22:27:11Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-08T22:27:11Z DEBUG astra] Parsed print statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
[2025-10-08T22:27:11Z DEBUG astra] Parsed statements: [Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")]))), Print(None, [Index(Var("arr"), Num("3"))]), Print(None, [Index(Var("arr"), Num("0"))]), Print(None, [Index(Var("arr"), Num("4"))]), Expr(Infix(Var("value"), '=', Index(Var("arr"), Infix(Call("length", [Var("arr")]), '-', Num("1"))))), Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])]

Executing Statement 1
[2025-10-08T22:27:11Z DEBUG astra] Running statement: Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")])))
Result: [1, 2, 3, 4, 5]

Executing Statement 2
[2025-10-08T22:27:11Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("3"))])
Output: 4
Result: 4

Executing Statement 3
[2025-10-08T22:27:11Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("0"))])
Output: 1
Result: 1

Executing Statement 4
[2025-10-08T22:27:11Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("4"))])
Output: 5
Result: 5

Executing Statement 5
[2025-10-08T22:27:11Z DEBUG astra] Running statement: Expr(Infix(Var("value"), '=', Index(Var("arr"), Infix(Call("length", [Var("arr")]), '-', Num("1")))))
[2025-10-08T22:27:11Z DEBUG astra] Executing function 'length', args: [Var("arr")]
Result: 5

Executing Statement 6
[2025-10-08T22:27:11Z DEBUG astra] Running statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
Output: changes... arr: [1, 2, 3, 4, 5], value: 5
Result: changes... arr: [1, 2, 3, 4, 5], value: 5
--- Starting script execution from arrays.ast ---
[2025-10-08T22:27:33Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("3"))])
[2025-10-08T22:27:33Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("0"))])
[2025-10-08T22:27:33Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("4"))])
[2025-10-08T22:27:33Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-08T22:27:33Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-08T22:27:33Z DEBUG astra] Parsed print statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
[2025-10-08T22:27:33Z DEBUG astra] Parsed statements: [Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")]))), Print(None, [Index(Var("arr"), Num("3"))]), Print(None, [Index(Var("arr"), Num("0"))]), Print(None, [Index(Var("arr"), Num("4"))]), Expr(Call("pop", [Var("arr")])), Expr(Infix(Var("value"), '=', Index(Var("arr"), Infix(Call("length", [Var("arr")]), '-', Num("1"))))), Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])]

Executing Statement 1
[2025-10-08T22:27:33Z DEBUG astra] Running statement: Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")])))
Result: [1, 2, 3, 4, 5]

Executing Statement 2
[2025-10-08T22:27:33Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("3"))])
Output: 4
Result: 4

Executing Statement 3
[2025-10-08T22:27:33Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("0"))])
Output: 1
Result: 1

Executing Statement 4
[2025-10-08T22:27:33Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("4"))])
Output: 5
Result: 5

Executing Statement 5
[2025-10-08T22:27:33Z DEBUG astra] Running statement: Expr(Call("pop", [Var("arr")]))
[2025-10-08T22:27:33Z DEBUG astra] Executing function 'pop', args: [Var("arr")]
Runtime Error (Statement 5): 'pop' is a mutable operation that requires the array variable itself to be modified, which is not supported in the current function execution model. Instead, use assignment to achieve the same result: e.g., element = arr[length(arr) - 1]; arr = slice(arr, 0, length(arr) - 1);
--- Starting script execution from arrays.ast ---
[2025-10-08T22:28:34Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("3"))])
[2025-10-08T22:28:34Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("0"))])
[2025-10-08T22:28:34Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("4"))])
[2025-10-08T22:28:34Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-08T22:28:34Z DEBUG astra] Parsed print statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
[2025-10-08T22:28:34Z DEBUG astra] Parsed statements: [Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")]))), Print(None, [Index(Var("arr"), Num("3"))]), Print(None, [Index(Var("arr"), Num("0"))]), Print(None, [Index(Var("arr"), Num("4"))]), Expr(Infix(Var("value"), '=', Index(Var("arr"), Infix(Call("length", [Var("arr")]), '-', Num("1"))))), Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])]

Executing Statement 1
[2025-10-08T22:28:34Z DEBUG astra] Running statement: Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")])))
Result: [1, 2, 3, 4, 5]

Executing Statement 2
[2025-10-08T22:28:34Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("3"))])
Output: 4
Result: 4

Executing Statement 3
[2025-10-08T22:28:34Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("0"))])
Output: 1
Result: 1

Executing Statement 4
[2025-10-08T22:28:34Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("4"))])
Output: 5
Result: 5

Executing Statement 5
[2025-10-08T22:28:34Z DEBUG astra] Running statement: Expr(Infix(Var("value"), '=', Index(Var("arr"), Infix(Call("length", [Var("arr")]), '-', Num("1")))))
[2025-10-08T22:28:34Z DEBUG astra] Executing function 'length', args: [Var("arr")]
Result: 5

Executing Statement 6
[2025-10-08T22:28:34Z DEBUG astra] Running statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
Output: changes... arr: [1, 2, 3, 4, 5], value: 5
Result: changes... arr: [1, 2, 3, 4, 5], value: 5
--- Starting script execution from arrays.ast ---
[2025-10-08T22:31:05Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("3"))])
[2025-10-08T22:31:05Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("0"))])
[2025-10-08T22:31:05Z DEBUG astra] Parsed print statement: Print(None, [Index(Var("arr"), Num("4"))])
[2025-10-08T22:31:05Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-08T22:31:05Z DEBUG astra] Parsed print statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
[2025-10-08T22:31:05Z DEBUG astra] Parsed statements: [Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")]))), Print(None, [Index(Var("arr"), Num("3"))]), Print(None, [Index(Var("arr"), Num("0"))]), Print(None, [Index(Var("arr"), Num("4"))]), Expr(Infix(Var("value"), '=', Index(Var("arr"), Infix(Call("length", [Var("arr")]), '-', Num("2"))))), Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])]

Executing Statement 1
[2025-10-08T22:31:05Z DEBUG astra] Running statement: Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")])))
Result: [1, 2, 3, 4, 5]

Executing Statement 2
[2025-10-08T22:31:05Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("3"))])
Output: 4
Result: 4

Executing Statement 3
[2025-10-08T22:31:05Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("0"))])
Output: 1
Result: 1

Executing Statement 4
[2025-10-08T22:31:05Z DEBUG astra] Running statement: Print(None, [Index(Var("arr"), Num("4"))])
Output: 5
Result: 5

Executing Statement 5
[2025-10-08T22:31:05Z DEBUG astra] Running statement: Expr(Infix(Var("value"), '=', Index(Var("arr"), Infix(Call("length", [Var("arr")]), '-', Num("2")))))
[2025-10-08T22:31:05Z DEBUG astra] Executing function 'length', args: [Var("arr")]
Result: 4

Executing Statement 6
[2025-10-08T22:31:05Z DEBUG astra] Running statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
Output: changes... arr: [1, 2, 3, 4, 5], value: 4
Result: changes... arr: [1, 2, 3, 4, 5], value: 4
--- Starting script execution from arrays.ast ---
[2025-10-08T22:42:11Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("3")), None)])
[2025-10-08T22:42:11Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("0")), None)])
[2025-10-08T22:42:11Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("4")), None)])
[2025-10-08T22:42:11Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-08T22:42:11Z DEBUG astra] Parsed print statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
[2025-10-08T22:42:11Z DEBUG astra] Parsed print statement: Print(Some("Elements from index 2 to 6: {}"), [Var("part")])
[2025-10-08T22:42:11Z DEBUG astra] Parsed statements: [Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")]))), Print(None, [Slice(Var("arr"), Some(Num("3")), None)]), Print(None, [Slice(Var("arr"), Some(Num("0")), None)]), Print(None, [Slice(Var("arr"), Some(Num("4")), None)]), Expr(Infix(Var("value"), '=', Slice(Var("arr"), Some(Infix(Call("length", [Var("arr")]), '-', Num("2"))), None))), Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")]), Expr(Infix(Var("my_arr"), '=', Array([Num("0"), Num("1"), Num("2"), Num("3"), Num("4"), Num("5"), Num("6"), Num("7"), Num("8"), Num("9")]))), Expr(Infix(Var("part"), '=', Slice(Var("my_arr"), Some(Num("2")), Some(Num("7"))))), Print(Some("Elements from index 2 to 6: {}"), [Var("part")])]

Executing Statement 1
-----------------------
[2025-10-08T22:42:11Z DEBUG astra] Running statement: Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")])))
Result: [1, 2, 3, 4, 5]

Executing Statement 2
-----------------------
[2025-10-08T22:42:11Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("3")), None)])
Output: 4
Result: 4

Executing Statement 3
-----------------------
[2025-10-08T22:42:11Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("0")), None)])
Output: 1
Result: 1

Executing Statement 4
-----------------------
[2025-10-08T22:42:11Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("4")), None)])
Output: 5
Result: 5

Executing Statement 5
-----------------------
[2025-10-08T22:42:11Z DEBUG astra] Running statement: Expr(Infix(Var("value"), '=', Slice(Var("arr"), Some(Infix(Call("length", [Var("arr")]), '-', Num("2"))), None)))
[2025-10-08T22:42:11Z DEBUG astra] Executing function 'length', args: [Var("arr")]
Result: 4

Executing Statement 6
-----------------------
[2025-10-08T22:42:11Z DEBUG astra] Running statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
Output: changes... arr: [1, 2, 3, 4, 5], value: 4
Result: changes... arr: [1, 2, 3, 4, 5], value: 4

Executing Statement 7
-----------------------
[2025-10-08T22:42:11Z DEBUG astra] Running statement: Expr(Infix(Var("my_arr"), '=', Array([Num("0"), Num("1"), Num("2"), Num("3"), Num("4"), Num("5"), Num("6"), Num("7"), Num("8"), Num("9")])))
Result: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Executing Statement 8
-----------------------
[2025-10-08T22:42:11Z DEBUG astra] Running statement: Expr(Infix(Var("part"), '=', Slice(Var("my_arr"), Some(Num("2")), Some(Num("7")))))
Result: [2, 3, 4, 5, 6]

Executing Statement 9
-----------------------
[2025-10-08T22:42:11Z DEBUG astra] Running statement: Print(Some("Elements from index 2 to 6: {}"), [Var("part")])
Output: Elements from index 2 to 6: [2, 3, 4, 5, 6]
Result: Elements from index 2 to 6: [2, 3, 4, 5, 6]
--- Starting script execution from arrays.ast ---
[2025-10-08T22:42:46Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("3")), None)])
[2025-10-08T22:42:46Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("0")), None)])
[2025-10-08T22:42:46Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("4")), None)])
[2025-10-08T22:42:46Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-08T22:42:46Z DEBUG astra] Parsed print statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
[2025-10-08T22:42:46Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-08T22:42:46Z DEBUG astra] Parsed print statement: Print(Some("Elements from index 2 to 6: {}"), [Var("part")])
[2025-10-08T22:42:46Z DEBUG astra] Parsed statements: [Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")]))), Print(None, [Slice(Var("arr"), Some(Num("3")), None)]), Print(None, [Slice(Var("arr"), Some(Num("0")), None)]), Print(None, [Slice(Var("arr"), Some(Num("4")), None)]), Expr(Infix(Var("value"), '=', Slice(Var("arr"), Some(Infix(Call("length", [Var("arr")]), '-', Num("2"))), None))), Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")]), Print(Some(""), []), Expr(Infix(Var("my_arr"), '=', Array([Num("0"), Num("1"), Num("2"), Num("3"), Num("4"), Num("5"), Num("6"), Num("7"), Num("8"), Num("9")]))), Expr(Infix(Var("part"), '=', Slice(Var("my_arr"), Some(Num("2")), Some(Num("7"))))), Print(Some("Elements from index 2 to 6: {}"), [Var("part")])]

Executing Statement 1
-----------------------
[2025-10-08T22:42:46Z DEBUG astra] Running statement: Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")])))
Result: [1, 2, 3, 4, 5]

Executing Statement 2
-----------------------
[2025-10-08T22:42:46Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("3")), None)])
Output: 4
Result: 4

Executing Statement 3
-----------------------
[2025-10-08T22:42:46Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("0")), None)])
Output: 1
Result: 1

Executing Statement 4
-----------------------
[2025-10-08T22:42:46Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("4")), None)])
Output: 5
Result: 5

Executing Statement 5
-----------------------
[2025-10-08T22:42:46Z DEBUG astra] Running statement: Expr(Infix(Var("value"), '=', Slice(Var("arr"), Some(Infix(Call("length", [Var("arr")]), '-', Num("2"))), None)))
[2025-10-08T22:42:46Z DEBUG astra] Executing function 'length', args: [Var("arr")]
Result: 4

Executing Statement 6
-----------------------
[2025-10-08T22:42:46Z DEBUG astra] Running statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
Output: changes... arr: [1, 2, 3, 4, 5], value: 4
Result: changes... arr: [1, 2, 3, 4, 5], value: 4

Executing Statement 7
-----------------------
[2025-10-08T22:42:46Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 8
-----------------------
[2025-10-08T22:42:46Z DEBUG astra] Running statement: Expr(Infix(Var("my_arr"), '=', Array([Num("0"), Num("1"), Num("2"), Num("3"), Num("4"), Num("5"), Num("6"), Num("7"), Num("8"), Num("9")])))
Result: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Executing Statement 9
-----------------------
[2025-10-08T22:42:46Z DEBUG astra] Running statement: Expr(Infix(Var("part"), '=', Slice(Var("my_arr"), Some(Num("2")), Some(Num("7")))))
Result: [2, 3, 4, 5, 6]

Executing Statement 10
-----------------------
[2025-10-08T22:42:46Z DEBUG astra] Running statement: Print(Some("Elements from index 2 to 6: {}"), [Var("part")])
Output: Elements from index 2 to 6: [2, 3, 4, 5, 6]
Result: Elements from index 2 to 6: [2, 3, 4, 5, 6]
--- Starting script execution from arrays.ast ---
[2025-10-08T22:43:09Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("3")), None)])
[2025-10-08T22:43:09Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("0")), None)])
[2025-10-08T22:43:09Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("4")), None)])
[2025-10-08T22:43:09Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-08T22:43:09Z DEBUG astra] Parsed print statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
[2025-10-08T22:43:09Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-08T22:43:09Z DEBUG astra] Parsed print statement: Print(Some("my_arr = {}"), [Var("my_arr")])
[2025-10-08T22:43:09Z DEBUG astra] Parsed print statement: Print(Some("Elements from index 2 to 6: {}"), [Var("part")])
[2025-10-08T22:43:09Z DEBUG astra] Parsed statements: [Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")]))), Print(None, [Slice(Var("arr"), Some(Num("3")), None)]), Print(None, [Slice(Var("arr"), Some(Num("0")), None)]), Print(None, [Slice(Var("arr"), Some(Num("4")), None)]), Expr(Infix(Var("value"), '=', Slice(Var("arr"), Some(Infix(Call("length", [Var("arr")]), '-', Num("2"))), None))), Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")]), Print(Some(""), []), Expr(Infix(Var("my_arr"), '=', Array([Num("0"), Num("1"), Num("2"), Num("3"), Num("4"), Num("5"), Num("6"), Num("7"), Num("8"), Num("9")]))), Expr(Infix(Var("part"), '=', Slice(Var("my_arr"), Some(Num("2")), Some(Num("7"))))), Print(Some("my_arr = {}"), [Var("my_arr")]), Print(Some("Elements from index 2 to 6: {}"), [Var("part")])]

Executing Statement 1
-----------------------
[2025-10-08T22:43:09Z DEBUG astra] Running statement: Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")])))
Result: [1, 2, 3, 4, 5]

Executing Statement 2
-----------------------
[2025-10-08T22:43:09Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("3")), None)])
Output: 4
Result: 4

Executing Statement 3
-----------------------
[2025-10-08T22:43:09Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("0")), None)])
Output: 1
Result: 1

Executing Statement 4
-----------------------
[2025-10-08T22:43:09Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("4")), None)])
Output: 5
Result: 5

Executing Statement 5
-----------------------
[2025-10-08T22:43:09Z DEBUG astra] Running statement: Expr(Infix(Var("value"), '=', Slice(Var("arr"), Some(Infix(Call("length", [Var("arr")]), '-', Num("2"))), None)))
[2025-10-08T22:43:09Z DEBUG astra] Executing function 'length', args: [Var("arr")]
Result: 4

Executing Statement 6
-----------------------
[2025-10-08T22:43:09Z DEBUG astra] Running statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
Output: changes... arr: [1, 2, 3, 4, 5], value: 4
Result: changes... arr: [1, 2, 3, 4, 5], value: 4

Executing Statement 7
-----------------------
[2025-10-08T22:43:09Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 8
-----------------------
[2025-10-08T22:43:09Z DEBUG astra] Running statement: Expr(Infix(Var("my_arr"), '=', Array([Num("0"), Num("1"), Num("2"), Num("3"), Num("4"), Num("5"), Num("6"), Num("7"), Num("8"), Num("9")])))
Result: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Executing Statement 9
-----------------------
[2025-10-08T22:43:09Z DEBUG astra] Running statement: Expr(Infix(Var("part"), '=', Slice(Var("my_arr"), Some(Num("2")), Some(Num("7")))))
Result: [2, 3, 4, 5, 6]

Executing Statement 10
-----------------------
[2025-10-08T22:43:09Z DEBUG astra] Running statement: Print(Some("my_arr = {}"), [Var("my_arr")])
Output: my_arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
Result: my_arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Executing Statement 11
-----------------------
[2025-10-08T22:43:09Z DEBUG astra] Running statement: Print(Some("Elements from index 2 to 6: {}"), [Var("part")])
Output: Elements from index 2 to 6: [2, 3, 4, 5, 6]
Result: Elements from index 2 to 6: [2, 3, 4, 5, 6]
--- Starting script execution from arrays.ast ---
[2025-10-08T22:43:43Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("3")), None)])
[2025-10-08T22:43:43Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("0")), None)])
[2025-10-08T22:43:43Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("4")), None)])
[2025-10-08T22:43:43Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-08T22:43:43Z DEBUG astra] Parsed print statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
[2025-10-08T22:43:43Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-08T22:43:43Z DEBUG astra] Parsed print statement: Print(Some("my_arr = {}"), [Var("my_arr")])
[2025-10-08T22:43:43Z DEBUG astra] Parsed print statement: Print(Some("Elements from index 2 to 6 [2:7] (like Python): {}"), [Var("part")])
[2025-10-08T22:43:43Z DEBUG astra] Parsed statements: [Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")]))), Print(None, [Slice(Var("arr"), Some(Num("3")), None)]), Print(None, [Slice(Var("arr"), Some(Num("0")), None)]), Print(None, [Slice(Var("arr"), Some(Num("4")), None)]), Expr(Infix(Var("value"), '=', Slice(Var("arr"), Some(Infix(Call("length", [Var("arr")]), '-', Num("2"))), None))), Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")]), Print(Some(""), []), Expr(Infix(Var("my_arr"), '=', Array([Num("0"), Num("1"), Num("2"), Num("3"), Num("4"), Num("5"), Num("6"), Num("7"), Num("8"), Num("9")]))), Expr(Infix(Var("part"), '=', Slice(Var("my_arr"), Some(Num("2")), Some(Num("7"))))), Print(Some("my_arr = {}"), [Var("my_arr")]), Print(Some("Elements from index 2 to 6 [2:7] (like Python): {}"), [Var("part")])]

Executing Statement 1
-----------------------
[2025-10-08T22:43:43Z DEBUG astra] Running statement: Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")])))
Result: [1, 2, 3, 4, 5]

Executing Statement 2
-----------------------
[2025-10-08T22:43:43Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("3")), None)])
Output: 4
Result: 4

Executing Statement 3
-----------------------
[2025-10-08T22:43:43Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("0")), None)])
Output: 1
Result: 1

Executing Statement 4
-----------------------
[2025-10-08T22:43:43Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("4")), None)])
Output: 5
Result: 5

Executing Statement 5
-----------------------
[2025-10-08T22:43:43Z DEBUG astra] Running statement: Expr(Infix(Var("value"), '=', Slice(Var("arr"), Some(Infix(Call("length", [Var("arr")]), '-', Num("2"))), None)))
[2025-10-08T22:43:43Z DEBUG astra] Executing function 'length', args: [Var("arr")]
Result: 4

Executing Statement 6
-----------------------
[2025-10-08T22:43:43Z DEBUG astra] Running statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
Output: changes... arr: [1, 2, 3, 4, 5], value: 4
Result: changes... arr: [1, 2, 3, 4, 5], value: 4

Executing Statement 7
-----------------------
[2025-10-08T22:43:43Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 8
-----------------------
[2025-10-08T22:43:43Z DEBUG astra] Running statement: Expr(Infix(Var("my_arr"), '=', Array([Num("0"), Num("1"), Num("2"), Num("3"), Num("4"), Num("5"), Num("6"), Num("7"), Num("8"), Num("9")])))
Result: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Executing Statement 9
-----------------------
[2025-10-08T22:43:43Z DEBUG astra] Running statement: Expr(Infix(Var("part"), '=', Slice(Var("my_arr"), Some(Num("2")), Some(Num("7")))))
Result: [2, 3, 4, 5, 6]

Executing Statement 10
-----------------------
[2025-10-08T22:43:43Z DEBUG astra] Running statement: Print(Some("my_arr = {}"), [Var("my_arr")])
Output: my_arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
Result: my_arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Executing Statement 11
-----------------------
[2025-10-08T22:43:43Z DEBUG astra] Running statement: Print(Some("Elements from index 2 to 6 [2:7] (like Python): {}"), [Var("part")])
Output: Elements from index 2 to 6 [2:7] (like Python): [2, 3, 4, 5, 6]
Result: Elements from index 2 to 6 [2:7] (like Python): [2, 3, 4, 5, 6]
--- Starting script execution from arrays.ast ---
[2025-10-08T22:44:29Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("3")), None)])
[2025-10-08T22:44:29Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("0")), None)])
[2025-10-08T22:44:29Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("4")), None)])
[2025-10-08T22:44:29Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-08T22:44:29Z DEBUG astra] Parsed print statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
[2025-10-08T22:44:29Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-08T22:44:29Z DEBUG astra] Parsed print statement: Print(Some("my_arr = {}"), [Var("my_arr")])
[2025-10-08T22:44:29Z DEBUG astra] Parsed print statement: Print(Some("Elements from index 2 to 6 [2:7] (like Python): {}"), [Var("part")])
[2025-10-08T22:44:29Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("my_new_arr"), Some(Num("1")), None)])
[2025-10-08T22:44:29Z DEBUG astra] Parsed statements: [Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")]))), Print(None, [Slice(Var("arr"), Some(Num("3")), None)]), Print(None, [Slice(Var("arr"), Some(Num("0")), None)]), Print(None, [Slice(Var("arr"), Some(Num("4")), None)]), Expr(Infix(Var("value"), '=', Slice(Var("arr"), Some(Infix(Call("length", [Var("arr")]), '-', Num("2"))), None))), Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")]), Print(Some(""), []), Expr(Infix(Var("my_arr"), '=', Array([Num("0"), Num("1"), Num("2"), Num("3"), Num("4"), Num("5"), Num("6"), Num("7"), Num("8"), Num("9")]))), Expr(Infix(Var("part"), '=', Slice(Var("my_arr"), Some(Num("2")), Some(Num("7"))))), Print(Some("my_arr = {}"), [Var("my_arr")]), Print(Some("Elements from index 2 to 6 [2:7] (like Python): {}"), [Var("part")]), Expr(Infix(Var("my_new_arr"), '=', Array([Str("apple"), Str("banana"), Str("cherry")]))), Print(None, [Slice(Var("my_new_arr"), Some(Num("1")), None)])]

Executing Statement 1
-----------------------
[2025-10-08T22:44:29Z DEBUG astra] Running statement: Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")])))
Result: [1, 2, 3, 4, 5]

Executing Statement 2
-----------------------
[2025-10-08T22:44:29Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("3")), None)])
Output: 4
Result: 4

Executing Statement 3
-----------------------
[2025-10-08T22:44:29Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("0")), None)])
Output: 1
Result: 1

Executing Statement 4
-----------------------
[2025-10-08T22:44:29Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("4")), None)])
Output: 5
Result: 5

Executing Statement 5
-----------------------
[2025-10-08T22:44:29Z DEBUG astra] Running statement: Expr(Infix(Var("value"), '=', Slice(Var("arr"), Some(Infix(Call("length", [Var("arr")]), '-', Num("2"))), None)))
[2025-10-08T22:44:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
Result: 4

Executing Statement 6
-----------------------
[2025-10-08T22:44:29Z DEBUG astra] Running statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
Output: changes... arr: [1, 2, 3, 4, 5], value: 4
Result: changes... arr: [1, 2, 3, 4, 5], value: 4

Executing Statement 7
-----------------------
[2025-10-08T22:44:29Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 8
-----------------------
[2025-10-08T22:44:29Z DEBUG astra] Running statement: Expr(Infix(Var("my_arr"), '=', Array([Num("0"), Num("1"), Num("2"), Num("3"), Num("4"), Num("5"), Num("6"), Num("7"), Num("8"), Num("9")])))
Result: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Executing Statement 9
-----------------------
[2025-10-08T22:44:29Z DEBUG astra] Running statement: Expr(Infix(Var("part"), '=', Slice(Var("my_arr"), Some(Num("2")), Some(Num("7")))))
Result: [2, 3, 4, 5, 6]

Executing Statement 10
-----------------------
[2025-10-08T22:44:29Z DEBUG astra] Running statement: Print(Some("my_arr = {}"), [Var("my_arr")])
Output: my_arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
Result: my_arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Executing Statement 11
-----------------------
[2025-10-08T22:44:29Z DEBUG astra] Running statement: Print(Some("Elements from index 2 to 6 [2:7] (like Python): {}"), [Var("part")])
Output: Elements from index 2 to 6 [2:7] (like Python): [2, 3, 4, 5, 6]
Result: Elements from index 2 to 6 [2:7] (like Python): [2, 3, 4, 5, 6]

Executing Statement 12
-----------------------
[2025-10-08T22:44:29Z DEBUG astra] Running statement: Expr(Infix(Var("my_new_arr"), '=', Array([Str("apple"), Str("banana"), Str("cherry")])))
Result: [apple, banana, cherry]

Executing Statement 13
-----------------------
[2025-10-08T22:44:29Z DEBUG astra] Running statement: Print(None, [Slice(Var("my_new_arr"), Some(Num("1")), None)])
Output: banana
Result: banana
--- Starting script execution from arrays.ast ---
[2025-10-08T22:45:33Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("3")), None)])
[2025-10-08T22:45:33Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("0")), None)])
[2025-10-08T22:45:33Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("4")), None)])
[2025-10-08T22:45:33Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-08T22:45:33Z DEBUG astra] Parsed print statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
[2025-10-08T22:45:33Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-08T22:45:33Z DEBUG astra] Parsed print statement: Print(Some("my_arr = {}"), [Var("my_arr")])
[2025-10-08T22:45:33Z DEBUG astra] Parsed print statement: Print(Some("Elements from index 2 to 6 [2:7] (like Python): {}"), [Var("part")])
[2025-10-08T22:45:33Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-08T22:45:33Z DEBUG astra] Parsed print statement: Print(Some("my_new_arr = {}"), [Var("my_new_arr")])
[2025-10-08T22:45:33Z DEBUG astra] Parsed print statement: Print(Some("Element 1 is: {}"), [Slice(Var("my_new_arr"), Some(Num("1")), None)])
[2025-10-08T22:45:33Z DEBUG astra] Parsed statements: [Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")]))), Print(None, [Slice(Var("arr"), Some(Num("3")), None)]), Print(None, [Slice(Var("arr"), Some(Num("0")), None)]), Print(None, [Slice(Var("arr"), Some(Num("4")), None)]), Expr(Infix(Var("value"), '=', Slice(Var("arr"), Some(Infix(Call("length", [Var("arr")]), '-', Num("2"))), None))), Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")]), Print(Some(""), []), Expr(Infix(Var("my_arr"), '=', Array([Num("0"), Num("1"), Num("2"), Num("3"), Num("4"), Num("5"), Num("6"), Num("7"), Num("8"), Num("9")]))), Expr(Infix(Var("part"), '=', Slice(Var("my_arr"), Some(Num("2")), Some(Num("7"))))), Print(Some("my_arr = {}"), [Var("my_arr")]), Print(Some("Elements from index 2 to 6 [2:7] (like Python): {}"), [Var("part")]), Print(Some(""), []), Expr(Infix(Var("my_new_arr"), '=', Array([Str("apple"), Str("banana"), Str("cherry")]))), Print(Some("my_new_arr = {}"), [Var("my_new_arr")]), Print(Some("Element 1 is: {}"), [Slice(Var("my_new_arr"), Some(Num("1")), None)])]

Executing Statement 1
-----------------------
[2025-10-08T22:45:33Z DEBUG astra] Running statement: Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")])))
Result: [1, 2, 3, 4, 5]

Executing Statement 2
-----------------------
[2025-10-08T22:45:33Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("3")), None)])
Output: 4
Result: 4

Executing Statement 3
-----------------------
[2025-10-08T22:45:33Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("0")), None)])
Output: 1
Result: 1

Executing Statement 4
-----------------------
[2025-10-08T22:45:33Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("4")), None)])
Output: 5
Result: 5

Executing Statement 5
-----------------------
[2025-10-08T22:45:33Z DEBUG astra] Running statement: Expr(Infix(Var("value"), '=', Slice(Var("arr"), Some(Infix(Call("length", [Var("arr")]), '-', Num("2"))), None)))
[2025-10-08T22:45:33Z DEBUG astra] Executing function 'length', args: [Var("arr")]
Result: 4

Executing Statement 6
-----------------------
[2025-10-08T22:45:33Z DEBUG astra] Running statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
Output: changes... arr: [1, 2, 3, 4, 5], value: 4
Result: changes... arr: [1, 2, 3, 4, 5], value: 4

Executing Statement 7
-----------------------
[2025-10-08T22:45:33Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 8
-----------------------
[2025-10-08T22:45:33Z DEBUG astra] Running statement: Expr(Infix(Var("my_arr"), '=', Array([Num("0"), Num("1"), Num("2"), Num("3"), Num("4"), Num("5"), Num("6"), Num("7"), Num("8"), Num("9")])))
Result: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Executing Statement 9
-----------------------
[2025-10-08T22:45:33Z DEBUG astra] Running statement: Expr(Infix(Var("part"), '=', Slice(Var("my_arr"), Some(Num("2")), Some(Num("7")))))
Result: [2, 3, 4, 5, 6]

Executing Statement 10
-----------------------
[2025-10-08T22:45:33Z DEBUG astra] Running statement: Print(Some("my_arr = {}"), [Var("my_arr")])
Output: my_arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
Result: my_arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Executing Statement 11
-----------------------
[2025-10-08T22:45:33Z DEBUG astra] Running statement: Print(Some("Elements from index 2 to 6 [2:7] (like Python): {}"), [Var("part")])
Output: Elements from index 2 to 6 [2:7] (like Python): [2, 3, 4, 5, 6]
Result: Elements from index 2 to 6 [2:7] (like Python): [2, 3, 4, 5, 6]

Executing Statement 12
-----------------------
[2025-10-08T22:45:33Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 13
-----------------------
[2025-10-08T22:45:33Z DEBUG astra] Running statement: Expr(Infix(Var("my_new_arr"), '=', Array([Str("apple"), Str("banana"), Str("cherry")])))
Result: [apple, banana, cherry]

Executing Statement 14
-----------------------
[2025-10-08T22:45:33Z DEBUG astra] Running statement: Print(Some("my_new_arr = {}"), [Var("my_new_arr")])
Output: my_new_arr = [apple, banana, cherry]
Result: my_new_arr = [apple, banana, cherry]

Executing Statement 15
-----------------------
[2025-10-08T22:45:33Z DEBUG astra] Running statement: Print(Some("Element 1 is: {}"), [Slice(Var("my_new_arr"), Some(Num("1")), None)])
Output: Element 1 is: banana
Result: Element 1 is: banana
--- Starting script execution from arrays.ast ---
[2025-10-08T22:45:58Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("3")), None)])
[2025-10-08T22:45:58Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("0")), None)])
[2025-10-08T22:45:58Z DEBUG astra] Parsed print statement: Print(None, [Slice(Var("arr"), Some(Num("4")), None)])
[2025-10-08T22:45:58Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-08T22:45:58Z DEBUG astra] Parsed print statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
[2025-10-08T22:45:58Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-08T22:45:58Z DEBUG astra] Parsed print statement: Print(Some("my_arr = {}"), [Var("my_arr")])
[2025-10-08T22:45:58Z DEBUG astra] Parsed print statement: Print(Some("Elements from index 2 to 6 [2:7] (like Python): {}"), [Var("part")])
[2025-10-08T22:45:58Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-08T22:45:58Z DEBUG astra] Parsed print statement: Print(Some("my_new_arr = {}"), [Var("my_new_arr")])
[2025-10-08T22:45:58Z DEBUG astra] Parsed print statement: Print(Some("Element 0 is: {}"), [Slice(Var("my_new_arr"), Some(Num("0")), None)])
[2025-10-08T22:45:58Z DEBUG astra] Parsed print statement: Print(Some("Element 1 is: {}"), [Slice(Var("my_new_arr"), Some(Num("1")), None)])
[2025-10-08T22:45:58Z DEBUG astra] Parsed print statement: Print(Some("Element 2 is: {}"), [Slice(Var("my_new_arr"), Some(Num("2")), None)])
[2025-10-08T22:45:58Z DEBUG astra] Parsed statements: [Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")]))), Print(None, [Slice(Var("arr"), Some(Num("3")), None)]), Print(None, [Slice(Var("arr"), Some(Num("0")), None)]), Print(None, [Slice(Var("arr"), Some(Num("4")), None)]), Expr(Infix(Var("value"), '=', Slice(Var("arr"), Some(Infix(Call("length", [Var("arr")]), '-', Num("2"))), None))), Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")]), Print(Some(""), []), Expr(Infix(Var("my_arr"), '=', Array([Num("0"), Num("1"), Num("2"), Num("3"), Num("4"), Num("5"), Num("6"), Num("7"), Num("8"), Num("9")]))), Expr(Infix(Var("part"), '=', Slice(Var("my_arr"), Some(Num("2")), Some(Num("7"))))), Print(Some("my_arr = {}"), [Var("my_arr")]), Print(Some("Elements from index 2 to 6 [2:7] (like Python): {}"), [Var("part")]), Print(Some(""), []), Expr(Infix(Var("my_new_arr"), '=', Array([Str("apple"), Str("banana"), Str("cherry")]))), Print(Some("my_new_arr = {}"), [Var("my_new_arr")]), Print(Some("Element 0 is: {}"), [Slice(Var("my_new_arr"), Some(Num("0")), None)]), Print(Some("Element 1 is: {}"), [Slice(Var("my_new_arr"), Some(Num("1")), None)]), Print(Some("Element 2 is: {}"), [Slice(Var("my_new_arr"), Some(Num("2")), None)])]

Executing Statement 1
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Expr(Infix(Var("arr"), '=', Array([Num("1"), Num("2"), Num("3"), Num("4"), Num("5")])))
Result: [1, 2, 3, 4, 5]

Executing Statement 2
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("3")), None)])
Output: 4
Result: 4

Executing Statement 3
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("0")), None)])
Output: 1
Result: 1

Executing Statement 4
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Print(None, [Slice(Var("arr"), Some(Num("4")), None)])
Output: 5
Result: 5

Executing Statement 5
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Expr(Infix(Var("value"), '=', Slice(Var("arr"), Some(Infix(Call("length", [Var("arr")]), '-', Num("2"))), None)))
[2025-10-08T22:45:58Z DEBUG astra] Executing function 'length', args: [Var("arr")]
Result: 4

Executing Statement 6
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Print(Some("changes... arr: {}, value: {}"), [Var("arr"), Var("value")])
Output: changes... arr: [1, 2, 3, 4, 5], value: 4
Result: changes... arr: [1, 2, 3, 4, 5], value: 4

Executing Statement 7
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 8
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Expr(Infix(Var("my_arr"), '=', Array([Num("0"), Num("1"), Num("2"), Num("3"), Num("4"), Num("5"), Num("6"), Num("7"), Num("8"), Num("9")])))
Result: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Executing Statement 9
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Expr(Infix(Var("part"), '=', Slice(Var("my_arr"), Some(Num("2")), Some(Num("7")))))
Result: [2, 3, 4, 5, 6]

Executing Statement 10
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Print(Some("my_arr = {}"), [Var("my_arr")])
Output: my_arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
Result: my_arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Executing Statement 11
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Print(Some("Elements from index 2 to 6 [2:7] (like Python): {}"), [Var("part")])
Output: Elements from index 2 to 6 [2:7] (like Python): [2, 3, 4, 5, 6]
Result: Elements from index 2 to 6 [2:7] (like Python): [2, 3, 4, 5, 6]

Executing Statement 12
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 13
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Expr(Infix(Var("my_new_arr"), '=', Array([Str("apple"), Str("banana"), Str("cherry")])))
Result: [apple, banana, cherry]

Executing Statement 14
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Print(Some("my_new_arr = {}"), [Var("my_new_arr")])
Output: my_new_arr = [apple, banana, cherry]
Result: my_new_arr = [apple, banana, cherry]

Executing Statement 15
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Print(Some("Element 0 is: {}"), [Slice(Var("my_new_arr"), Some(Num("0")), None)])
Output: Element 0 is: apple
Result: Element 0 is: apple

Executing Statement 16
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Print(Some("Element 1 is: {}"), [Slice(Var("my_new_arr"), Some(Num("1")), None)])
Output: Element 1 is: banana
Result: Element 1 is: banana

Executing Statement 17
-----------------------
[2025-10-08T22:45:58Z DEBUG astra] Running statement: Print(Some("Element 2 is: {}"), [Slice(Var("my_new_arr"), Some(Num("2")), None)])
Output: Element 2 is: cherry
Result: Element 2 is: cherry
