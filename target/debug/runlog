--- Starting script execution from test.txt ---
[2025-10-07T07:39:41Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-07T07:39:41Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-07T07:39:41Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-07T07:39:41Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-07T07:39:41Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-07T07:39:41Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-07T07:39:41Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-07T07:39:41Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-07T07:39:41Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-07T07:39:41Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T07:39:41Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-07T07:39:41Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-07T07:39:41Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-07T07:39:41Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-07T07:39:41Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-07T07:39:41Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z): y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"(y === z): This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-07T07:39:41Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z): That's right, y does not stricyly equal z.")
    ], and else body None
[2025-10-07T07:39:41Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z): y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"(y === z): This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z): That's right, y does not stricyly equal z.\")\n]", None)]

Executing Statement 1
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-07T07:39:41Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-07T07:39:41Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-07T07:39:41Z DEBUG astra] Parsing return statement
[2025-10-07T07:39:41Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-07T07:39:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-07T07:39:41Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-07T07:39:41Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-07T07:39:41Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-07T07:39:41Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-07T07:39:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-07T07:39:41Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-07T07:39:41Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-07T07:39:41Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-07T07:39:41Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T07:39:41Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-07T07:39:41Z DEBUG astra] Parsing return statement
[2025-10-07T07:39:41Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-07T07:39:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-07T07:39:41Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-07T07:39:41Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-07T07:39:41Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-07T07:39:41Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z): y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"(y === z): This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-07T07:39:41Z DEBUG astra] Parsed print statement: Print(Some("(y === z): This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Print(Some("(y === z): This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: (y === z): This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-07T07:39:41Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z): That's right, y does not stricyly equal z.\")\n]", None)
[2025-10-07T07:39:41Z DEBUG astra] Parsed print statement: Print(Some("y !== z): That's right, y does not stricyly equal z."), [])
[2025-10-07T07:39:41Z DEBUG astra] Running statement: Print(Some("y !== z): That's right, y does not stricyly equal z."), [])
Output: y !== z): That's right, y does not stricyly equal z.
--- Starting script execution from test.ast ---
[2025-10-07T11:25:08Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-07T11:25:08Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-07T11:25:08Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-07T11:25:08Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-07T11:25:08Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-07T11:25:08Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-07T11:25:08Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-07T11:25:08Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-07T11:25:08Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-07T11:25:08Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T11:25:08Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-07T11:25:08Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-07T11:25:08Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-07T11:25:08Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-07T11:25:08Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-07T11:25:08Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z): y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"(y === z): This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-07T11:25:08Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z): That's right, y does not stricyly equal z.")
    ], and else body None
Parsing Error: Expected '[' to start else body, found Keyword("if")
--- Starting script execution from test.ast ---
[2025-10-07T11:25:33Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-07T11:25:33Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-07T11:25:33Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-07T11:25:33Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-07T11:25:33Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-07T11:25:33Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-07T11:25:33Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-07T11:25:33Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-07T11:25:33Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-07T11:25:33Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T11:25:33Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-07T11:25:33Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-07T11:25:33Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-07T11:25:33Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-07T11:25:33Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-07T11:25:33Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z): y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"(y === z): This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-07T11:25:33Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z): That's right, y does not stricyly equal z.")
    ], and else body None
[2025-10-07T11:25:33Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-07T11:25:33Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z): y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"(y === z): This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z): That's right, y does not stricyly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-07T11:25:33Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-07T11:25:33Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-07T11:25:33Z DEBUG astra] Parsing return statement
[2025-10-07T11:25:33Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-07T11:25:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-07T11:25:33Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-07T11:25:33Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-07T11:25:33Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-07T11:25:33Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-07T11:25:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-07T11:25:33Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-07T11:25:33Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-07T11:25:33Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-07T11:25:33Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T11:25:33Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-07T11:25:33Z DEBUG astra] Parsing return statement
[2025-10-07T11:25:33Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-07T11:25:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-07T11:25:33Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-07T11:25:33Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-07T11:25:33Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-07T11:25:33Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z): y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"(y === z): This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-07T11:25:33Z DEBUG astra] Parsed print statement: Print(Some("(y === z): This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Print(Some("(y === z): This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: (y === z): This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-07T11:25:33Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z): That's right, y does not stricyly equal z.\")\n]", None)
[2025-10-07T11:25:33Z DEBUG astra] Parsed print statement: Print(Some("y !== z): That's right, y does not stricyly equal z."), [])
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Print(Some("y !== z): That's right, y does not stricyly equal z."), [])
Output: y !== z): That's right, y does not stricyly equal z.

Executing Statement 21
[2025-10-07T11:25:33Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-07T11:25:33Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-07T11:25:33Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test.ast ---
[2025-10-07T11:26:06Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-07T11:26:06Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-07T11:26:06Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-07T11:26:06Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-07T11:26:06Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-07T11:26:06Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-07T11:26:06Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-07T11:26:06Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-07T11:26:06Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-07T11:26:06Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T11:26:06Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-07T11:26:06Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-07T11:26:06Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-07T11:26:06Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-07T11:26:06Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-07T11:26:06Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"(y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-07T11:26:06Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z): That's right, y does not stricyly equal z.")
    ], and else body None
[2025-10-07T11:26:06Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-07T11:26:06Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"(y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z): That's right, y does not stricyly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-07T11:26:06Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-07T11:26:06Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-07T11:26:06Z DEBUG astra] Parsing return statement
[2025-10-07T11:26:06Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-07T11:26:06Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-07T11:26:06Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-07T11:26:06Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-07T11:26:06Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-07T11:26:06Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-07T11:26:06Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-07T11:26:06Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-07T11:26:06Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-07T11:26:06Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-07T11:26:06Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T11:26:06Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-07T11:26:06Z DEBUG astra] Parsing return statement
[2025-10-07T11:26:06Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-07T11:26:06Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-07T11:26:06Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-07T11:26:06Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-07T11:26:06Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-07T11:26:06Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"(y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-07T11:26:06Z DEBUG astra] Parsed print statement: Print(Some("(y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Print(Some("(y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: (y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-07T11:26:06Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z): That's right, y does not stricyly equal z.\")\n]", None)
[2025-10-07T11:26:06Z DEBUG astra] Parsed print statement: Print(Some("y !== z): That's right, y does not stricyly equal z."), [])
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Print(Some("y !== z): That's right, y does not stricyly equal z."), [])
Output: y !== z): That's right, y does not stricyly equal z.

Executing Statement 21
[2025-10-07T11:26:06Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-07T11:26:06Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-07T11:26:06Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test.ast ---
[2025-10-07T11:27:38Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-07T11:27:38Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-07T11:27:38Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-07T11:27:38Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-07T11:27:38Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-07T11:27:38Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-07T11:27:38Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-07T11:27:38Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-07T11:27:38Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-07T11:27:38Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T11:27:38Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-07T11:27:38Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-07T11:27:38Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-07T11:27:38Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-07T11:27:38Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-07T11:27:38Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"(y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-07T11:27:38Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z: That's right, y does not strictly equal z.")
    ], and else body None
[2025-10-07T11:27:38Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-07T11:27:38Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"(y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-07T11:27:38Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-07T11:27:38Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-07T11:27:38Z DEBUG astra] Parsing return statement
[2025-10-07T11:27:38Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-07T11:27:38Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-07T11:27:38Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-07T11:27:38Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-07T11:27:38Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-07T11:27:38Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-07T11:27:38Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-07T11:27:38Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-07T11:27:38Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-07T11:27:38Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-07T11:27:38Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T11:27:38Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-07T11:27:38Z DEBUG astra] Parsing return statement
[2025-10-07T11:27:38Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-07T11:27:38Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-07T11:27:38Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-07T11:27:38Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-07T11:27:38Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-07T11:27:38Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"(y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-07T11:27:38Z DEBUG astra] Parsed print statement: Print(Some("(y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Print(Some("(y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: (y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-07T11:27:38Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None)
[2025-10-07T11:27:38Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-07T11:27:38Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-07T11:27:38Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-07T11:27:38Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test.ast ---
[2025-10-07T11:27:54Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-07T11:27:54Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-07T11:27:54Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-07T11:27:54Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-07T11:27:54Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-07T11:27:54Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-07T11:27:54Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-07T11:27:54Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-07T11:27:54Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-07T11:27:54Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T11:27:54Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-07T11:27:54Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-07T11:27:54Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-07T11:27:54Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-07T11:27:54Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-07T11:27:54Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-07T11:27:54Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z: That's right, y does not strictly equal z.")
    ], and else body None
[2025-10-07T11:27:54Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-07T11:27:54Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-07T11:27:54Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-07T11:27:54Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-07T11:27:54Z DEBUG astra] Parsing return statement
[2025-10-07T11:27:54Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-07T11:27:54Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-07T11:27:54Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-07T11:27:54Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-07T11:27:54Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-07T11:27:54Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-07T11:27:54Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-07T11:27:54Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-07T11:27:54Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-07T11:27:54Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-07T11:27:54Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T11:27:54Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-07T11:27:54Z DEBUG astra] Parsing return statement
[2025-10-07T11:27:54Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-07T11:27:54Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-07T11:27:54Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-07T11:27:54Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-07T11:27:54Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-07T11:27:54Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-07T11:27:54Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-07T11:27:54Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None)
[2025-10-07T11:27:54Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-07T11:27:54Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-07T11:27:54Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-07T11:27:54Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test.ast ---
[2025-10-07T12:03:27Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-07T12:03:27Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-07T12:03:27Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-07T12:03:27Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-07T12:03:27Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-07T12:03:27Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-07T12:03:27Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-07T12:03:27Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-07T12:03:27Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-07T12:03:27Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T12:03:27Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-07T12:03:27Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-07T12:03:27Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-07T12:03:27Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-07T12:03:27Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-07T12:03:27Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-07T12:03:27Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z: That's right, y does not strictly equal z.")
    ], and else body None
[2025-10-07T12:03:27Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-07T12:03:27Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-07T12:03:27Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-07T12:03:27Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-07T12:03:27Z DEBUG astra] Parsing return statement
[2025-10-07T12:03:27Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-07T12:03:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-07T12:03:27Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-07T12:03:27Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-07T12:03:27Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-07T12:03:27Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-07T12:03:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-07T12:03:27Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-07T12:03:27Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-07T12:03:27Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-07T12:03:27Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T12:03:27Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-07T12:03:27Z DEBUG astra] Parsing return statement
[2025-10-07T12:03:27Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-07T12:03:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-07T12:03:27Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-07T12:03:27Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-07T12:03:27Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-07T12:03:27Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-07T12:03:27Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-07T12:03:27Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None)
[2025-10-07T12:03:27Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-07T12:03:27Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-07T12:03:27Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-07T12:03:27Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test.ast ---
[2025-10-07T12:03:32Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-07T12:03:32Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-07T12:03:32Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-07T12:03:32Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-07T12:03:32Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-07T12:03:32Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-07T12:03:32Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-07T12:03:32Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-07T12:03:32Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-07T12:03:32Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T12:03:32Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-07T12:03:32Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-07T12:03:32Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-07T12:03:32Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-07T12:03:32Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-07T12:03:32Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-07T12:03:32Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z: That's right, y does not strictly equal z.")
    ], and else body None
[2025-10-07T12:03:32Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-07T12:03:32Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-07T12:03:32Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-07T12:03:32Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-07T12:03:32Z DEBUG astra] Parsing return statement
[2025-10-07T12:03:32Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-07T12:03:32Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-07T12:03:32Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-07T12:03:32Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-07T12:03:32Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-07T12:03:32Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-07T12:03:32Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-07T12:03:32Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-07T12:03:32Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-07T12:03:32Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-07T12:03:32Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T12:03:32Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-07T12:03:32Z DEBUG astra] Parsing return statement
[2025-10-07T12:03:32Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-07T12:03:32Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-07T12:03:32Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-07T12:03:32Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-07T12:03:32Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-07T12:03:32Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-07T12:03:32Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-07T12:03:32Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None)
[2025-10-07T12:03:32Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-07T12:03:32Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-07T12:03:32Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-07T12:03:32Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test.ast ---
[2025-10-07T12:47:21Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-07T12:47:21Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-07T12:47:21Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-07T12:47:21Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-07T12:47:21Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-07T12:47:21Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-07T12:47:21Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-07T12:47:21Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-07T12:47:21Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-07T12:47:21Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T12:47:21Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-07T12:47:21Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-07T12:47:21Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-07T12:47:21Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-07T12:47:21Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-07T12:47:21Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-07T12:47:21Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z: That's right, y does not strictly equal z.")
    ], and else body None
[2025-10-07T12:47:21Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-07T12:47:21Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-07T12:47:21Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-07T12:47:21Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-07T12:47:21Z DEBUG astra] Parsing return statement
[2025-10-07T12:47:21Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-07T12:47:21Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-07T12:47:21Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-07T12:47:21Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-07T12:47:21Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-07T12:47:21Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-07T12:47:21Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-07T12:47:21Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-07T12:47:21Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-07T12:47:21Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-07T12:47:21Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-07T12:47:21Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-07T12:47:21Z DEBUG astra] Parsing return statement
[2025-10-07T12:47:21Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-07T12:47:21Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-07T12:47:21Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-07T12:47:21Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-07T12:47:21Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-07T12:47:21Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-07T12:47:21Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-07T12:47:21Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None)
[2025-10-07T12:47:21Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-07T12:47:21Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-07T12:47:21Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-07T12:47:21Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:31:06Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)  // Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)  // Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)  // Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)  // Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:31:06Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)  // Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)  // Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)  // Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)  // Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:31:06Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)  // Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)  // Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)  // Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)  // Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T04:31:06Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:31:06Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:31:06Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
Runtime Error (Statement 2): Function 'test_operators' Execution Error: Bad token in prefix: Op('/') (Expected expression start or operator)
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:31:34Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:31:34Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:31:34Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T04:31:34Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:31:34Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:31:34Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:31:34Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Runtime Error (Statement 2): Function 'test_operators' Execution Error: Bad token in prefix: Op('=') (Expected expression start or operator)
--- Starting script execution from test.ast ---
[2025-10-08T04:32:17Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-08T04:32:17Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-08T04:32:17Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-08T04:32:17Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-08T04:32:17Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T04:32:17Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T04:32:17Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T04:32:17Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T04:32:17Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T04:32:17Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T04:32:17Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T04:32:17Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T04:32:17Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T04:32:17Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T04:32:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-08T04:32:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-08T04:32:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z: That's right, y does not strictly equal z.")
    ], and else body None
[2025-10-08T04:32:17Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-08T04:32:17Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T04:32:17Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T04:32:17Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T04:32:17Z DEBUG astra] Parsing return statement
[2025-10-08T04:32:17Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T04:32:17Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T04:32:17Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T04:32:17Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T04:32:17Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T04:32:17Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T04:32:17Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T04:32:17Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T04:32:17Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T04:32:17Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T04:32:17Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T04:32:17Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T04:32:17Z DEBUG astra] Parsing return statement
[2025-10-08T04:32:17Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T04:32:17Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T04:32:17Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T04:32:17Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-08T04:32:17Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T04:32:17Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-08T04:32:17Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T04:32:17Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None)
[2025-10-08T04:32:17Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T04:32:17Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-08T04:32:17Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T04:32:17Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:32:33Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:32:33Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:32:33Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T04:32:33Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:32:33Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:32:33Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:32:33Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Runtime Error (Statement 2): Function 'test_operators' Execution Error: Bad token in prefix: Op('=') (Expected expression start or operator)
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:33:22Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:33:22Z DEBUG astra] Parsed statements: [Expr(Infix(Var("a"), '=', Num("1"))), Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:33:22Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Num("1")))
Result: 1

Executing Statement 2
[2025-10-08T04:33:22Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 3
[2025-10-08T04:33:22Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:33:22Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:33:22Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:33:22Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Runtime Error (Statement 3): Function 'test_operators' Execution Error: Bad token in prefix: Op('=') (Expected expression start or operator)
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:33:35Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:33:35Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:33:35Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T04:33:35Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:33:35Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:33:35Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:33:35Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Runtime Error (Statement 2): Function 'test_operators' Execution Error: Bad token in prefix: Op('=') (Expected expression start or operator)
--- Starting script execution from test.ast ---
[2025-10-08T04:33:52Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-08T04:33:52Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-08T04:33:52Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-08T04:33:52Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-08T04:33:52Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T04:33:52Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T04:33:52Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T04:33:52Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T04:33:52Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T04:33:52Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T04:33:52Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T04:33:52Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T04:33:52Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T04:33:52Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T04:33:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-08T04:33:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-08T04:33:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z: That's right, y does not strictly equal z.")
    ], and else body None
[2025-10-08T04:33:52Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-08T04:33:52Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T04:33:52Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T04:33:52Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T04:33:52Z DEBUG astra] Parsing return statement
[2025-10-08T04:33:52Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T04:33:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T04:33:52Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T04:33:52Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T04:33:52Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T04:33:52Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T04:33:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T04:33:52Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T04:33:52Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T04:33:52Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T04:33:52Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T04:33:52Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T04:33:52Z DEBUG astra] Parsing return statement
[2025-10-08T04:33:52Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T04:33:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T04:33:52Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T04:33:52Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-08T04:33:52Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T04:33:52Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-08T04:33:52Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T04:33:52Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None)
[2025-10-08T04:33:52Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T04:33:52Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-08T04:33:52Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T04:33:52Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:34:06Z DEBUG astra] Parsed fn test_operators([]) [[
        
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:34:06Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    \n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:34:06Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    \n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T04:34:06Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:34:06Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:34:06Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:34:06Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Runtime Error (Statement 2): Function 'test_operators' Execution Error: Bad token in prefix: Op('=') (Expected expression start or operator)
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:35:49Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:35:49Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:35:49Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T04:35:49Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:35:49Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:35:49Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:35:49Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Runtime Error (Statement 2): Function 'test_operators' Execution Error: Bad token in prefix: Op('=') (Expected expression start or operator)
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:36:14Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:36:14Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:36:14Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T04:36:14Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:36:14Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:36:14Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:36:14Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Runtime Error (Statement 2): Function 'test_operators' Execution Error: Bad token in prefix: Op('=') (Expected expression start or operator)
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:36:43Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:36:43Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:36:43Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T04:36:43Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:36:43Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:36:43Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:36:43Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Runtime Error (Statement 2): Function 'test_operators' Execution Error: Bad token in prefix: Op('=') (Expected expression start or operator)
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:37:02Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:37:02Z DEBUG astra] Parsed statements: [Expr(Infix(Var("x"), '=', Num("2"))), Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:37:02Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 2
[2025-10-08T04:37:02Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 3
[2025-10-08T04:37:02Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:37:02Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:37:02Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:37:02Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Runtime Error (Statement 3): Function 'test_operators' Execution Error: Bad token in prefix: Op('=') (Expected expression start or operator)
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:37:11Z DEBUG astra] Parsed statements: [Expr(Infix(Var("x"), '=', Num("2")))]

Executing Statement 1
[2025-10-08T04:37:11Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:37:21Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("x"), '=', Num("2"))])
[2025-10-08T04:37:21Z DEBUG astra] Parsed statements: [Print(None, [Infix(Var("x"), '=', Num("2"))])]

Executing Statement 1
[2025-10-08T04:37:21Z DEBUG astra] Running statement: Print(None, [Infix(Var("x"), '=', Num("2"))])
Output: 2
Result: 2
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:37:28Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:37:28Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:37:28Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T04:37:28Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:37:28Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:37:28Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:37:28Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Runtime Error (Statement 2): Function 'test_operators' Execution Error: Bad token in prefix: Op('=') (Expected expression start or operator)
--- Starting script execution from test.ast ---
[2025-10-08T04:37:49Z DEBUG astra] Parsed fn add(["number"]) [[
    	test = 1
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-08T04:37:49Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-08T04:37:49Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-08T04:37:49Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-08T04:37:49Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T04:37:49Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T04:37:49Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T04:37:49Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T04:37:49Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T04:37:49Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T04:37:49Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T04:37:49Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T04:37:49Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T04:37:49Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T04:37:49Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-08T04:37:49Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-08T04:37:49Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z: That's right, y does not strictly equal z.")
    ], and else body None
[2025-10-08T04:37:49Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-08T04:37:49Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\ttest = 1\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\ttest = 1\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T04:37:49Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T04:37:49Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T04:37:49Z DEBUG astra] Parsing return statement
[2025-10-08T04:37:49Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T04:37:49Z DEBUG astra] Running statement in function: Expr(Infix(Var("test"), '=', Num("1")))
[2025-10-08T04:37:49Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T04:37:49Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 3): The answer is 3385
[2025-10-08T04:37:49Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T04:37:49Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T04:37:49Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T04:37:49Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T04:37:49Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T04:37:49Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T04:37:49Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T04:37:49Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T04:37:49Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T04:37:49Z DEBUG astra] Parsing return statement
[2025-10-08T04:37:49Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T04:37:49Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T04:37:49Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T04:37:49Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-08T04:37:49Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T04:37:49Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-08T04:37:49Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T04:37:49Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None)
[2025-10-08T04:37:49Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T04:37:49Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-08T04:37:49Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T04:37:49Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test.ast ---
[2025-10-08T04:38:00Z DEBUG astra] Parsed fn add(["number"]) [[
    	x = 1
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-08T04:38:00Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-08T04:38:00Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-08T04:38:00Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-08T04:38:00Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T04:38:00Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T04:38:00Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T04:38:00Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T04:38:00Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T04:38:00Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T04:38:00Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T04:38:00Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T04:38:00Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T04:38:00Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T04:38:00Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-08T04:38:00Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-08T04:38:00Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z: That's right, y does not strictly equal z.")
    ], and else body None
[2025-10-08T04:38:00Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-08T04:38:00Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tx = 1\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tx = 1\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T04:38:00Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T04:38:00Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T04:38:00Z DEBUG astra] Parsing return statement
[2025-10-08T04:38:00Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T04:38:00Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Num("1")))
[2025-10-08T04:38:00Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T04:38:00Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 3): The answer is 3385
[2025-10-08T04:38:00Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T04:38:00Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T04:38:00Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T04:38:00Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T04:38:00Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T04:38:00Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T04:38:00Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T04:38:00Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T04:38:00Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T04:38:00Z DEBUG astra] Parsing return statement
[2025-10-08T04:38:00Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T04:38:00Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T04:38:00Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T04:38:00Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-08T04:38:00Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T04:38:00Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-08T04:38:00Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T04:38:00Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None)
[2025-10-08T04:38:00Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T04:38:00Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-08T04:38:00Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T04:38:00Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test.ast ---
[2025-10-08T04:38:08Z DEBUG astra] Parsed fn add(["number"]) [[
    	x = 1 ^ 2
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-08T04:38:08Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-08T04:38:08Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-08T04:38:08Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-08T04:38:08Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T04:38:08Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T04:38:08Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T04:38:08Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T04:38:08Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T04:38:08Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T04:38:08Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T04:38:08Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T04:38:08Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T04:38:08Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T04:38:08Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-08T04:38:08Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-08T04:38:08Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z: That's right, y does not strictly equal z.")
    ], and else body None
[2025-10-08T04:38:08Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-08T04:38:08Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tx = 1 ^ 2\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tx = 1 ^ 2\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T04:38:08Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T04:38:08Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T04:38:08Z DEBUG astra] Parsing return statement
[2025-10-08T04:38:08Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T04:38:08Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Infix(Num("1"), '^', Num("2"))))
[2025-10-08T04:38:08Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T04:38:08Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 3): The answer is 3385
[2025-10-08T04:38:08Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T04:38:08Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T04:38:08Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T04:38:08Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T04:38:08Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T04:38:08Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T04:38:08Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T04:38:08Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T04:38:08Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T04:38:08Z DEBUG astra] Parsing return statement
[2025-10-08T04:38:08Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T04:38:08Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T04:38:08Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T04:38:08Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-08T04:38:08Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T04:38:08Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-08T04:38:08Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T04:38:08Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None)
[2025-10-08T04:38:08Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T04:38:08Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-08T04:38:08Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T04:38:08Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test.ast ---
[2025-10-08T04:38:32Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-08T04:38:32Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-08T04:38:32Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-08T04:38:32Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-08T04:38:32Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T04:38:32Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T04:38:32Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T04:38:32Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T04:38:32Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T04:38:32Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T04:38:32Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T04:38:32Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T04:38:32Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T04:38:32Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T04:38:32Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-08T04:38:32Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-08T04:38:32Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z: That's right, y does not strictly equal z.")
    ], and else body None
[2025-10-08T04:38:32Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-08T04:38:32Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T04:38:32Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T04:38:32Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T04:38:32Z DEBUG astra] Parsing return statement
[2025-10-08T04:38:32Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T04:38:32Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T04:38:32Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T04:38:32Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T04:38:32Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T04:38:32Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T04:38:32Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T04:38:32Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T04:38:32Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T04:38:32Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T04:38:32Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T04:38:32Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T04:38:32Z DEBUG astra] Parsing return statement
[2025-10-08T04:38:32Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T04:38:32Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T04:38:32Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T04:38:32Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-08T04:38:32Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T04:38:32Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-08T04:38:32Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T04:38:32Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None)
[2025-10-08T04:38:32Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T04:38:32Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-08T04:38:32Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T04:38:32Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:38:35Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:38:35Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:38:35Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T04:38:35Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:38:35Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:38:35Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:38:35Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Runtime Error (Statement 2): Function 'test_operators' Execution Error: Bad token in prefix: Op('=') (Expected expression start or operator)
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:38:51Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:38:51Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:38:51Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T04:38:51Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:38:51Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:38:51Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:38:51Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Runtime Error (Statement 2): Function 'test_operators' Execution Error: Bad token in prefix: Op('=') (Expected expression start or operator)
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:39:00Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:39:00Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:39:00Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T04:39:00Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:39:00Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:39:00Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:39:00Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Runtime Error (Statement 2): Function 'test_operators' Execution Error: Bad token in prefix: Op('=') (Expected expression start or operator)
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:39:12Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:39:12Z DEBUG astra] Parsed statements: [Expr(Infix(Var("x"), '=', Num("2"))), Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:39:12Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 2
[2025-10-08T04:39:12Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 3
[2025-10-08T04:39:12Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:39:12Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:39:12Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:39:12Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Runtime Error (Statement 3): Function 'test_operators' Execution Error: Bad token in prefix: Op('=') (Expected expression start or operator)
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:39:17Z DEBUG astra] Parsed print statement: Print(None, [Var("x")])
[2025-10-08T04:39:17Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:39:17Z DEBUG astra] Parsed statements: [Expr(Infix(Var("x"), '=', Num("2"))), Print(None, [Var("x")]), Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:39:17Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 2
[2025-10-08T04:39:17Z DEBUG astra] Running statement: Print(None, [Var("x")])
Output: 2
Result: 2

Executing Statement 3
[2025-10-08T04:39:17Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 4
[2025-10-08T04:39:17Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:39:17Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:39:17Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:39:17Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Runtime Error (Statement 4): Function 'test_operators' Execution Error: Bad token in prefix: Op('=') (Expected expression start or operator)
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:39:30Z DEBUG astra] Parsed print statement: Print(None, [Var("x")])
Parsing Error: Expected parameter name or ')' in function definition, found Number("2")
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:39:39Z DEBUG astra] Parsed print statement: Print(None, [Var("x")])
[2025-10-08T04:39:39Z DEBUG astra] Parsed fn test_operators(["hello"]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:39:39Z DEBUG astra] Parsed statements: [Expr(Infix(Var("x"), '=', Num("2"))), Print(None, [Var("x")]), Def("test_operators", ["hello"], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:39:39Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 2
[2025-10-08T04:39:39Z DEBUG astra] Running statement: Print(None, [Var("x")])
Output: 2
Result: 2

Executing Statement 3
[2025-10-08T04:39:39Z DEBUG astra] Running statement: Def("test_operators", ["hello"], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 4
[2025-10-08T04:39:39Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:39:39Z DEBUG astra] Executing function 'test_operators', args: []
Runtime Error (Statement 4): Function 'test_operators' expects 1 arguments, but received 0
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:39:51Z DEBUG astra] Parsed print statement: Print(None, [Var("x")])
[2025-10-08T04:39:51Z DEBUG astra] Parsed fn test_operators(["hello"]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:39:51Z DEBUG astra] Parsing argument, current token: Number("1")
[2025-10-08T04:39:51Z DEBUG astra] Parsed statements: [Expr(Infix(Var("x"), '=', Num("2"))), Print(None, [Var("x")]), Def("test_operators", ["hello"], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", [Num("1")]))]

Executing Statement 1
[2025-10-08T04:39:51Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 2
[2025-10-08T04:39:51Z DEBUG astra] Running statement: Print(None, [Var("x")])
Output: 2
Result: 2

Executing Statement 3
[2025-10-08T04:39:51Z DEBUG astra] Running statement: Def("test_operators", ["hello"], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 4
[2025-10-08T04:39:51Z DEBUG astra] Running statement: Expr(Call("test_operators", [Num("1")]))
[2025-10-08T04:39:51Z DEBUG astra] Executing function 'test_operators', args: [Num("1")]
[2025-10-08T04:39:51Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:39:51Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Runtime Error (Statement 4): Function 'test_operators' Execution Error: Bad token in prefix: Op('=') (Expected expression start or operator)
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:43:12Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:43:12Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:43:12Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T04:43:12Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:43:12Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:43:12Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:43:12Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
[2025-10-08T04:43:12Z DEBUG astra] Parsed print statement: Print(Some("x += 5 -> x = {}"), [Var("x")])
[2025-10-08T04:43:12Z DEBUG astra] Parsed print statement: Print(Some("x -= 2 -> x = {}"), [Var("x")])
[2025-10-08T04:43:12Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Num("2")))
[2025-10-08T04:43:12Z DEBUG astra] Running statement in function: Expr(Infix(Var("y"), '=', Num("3")))
[2025-10-08T04:43:12Z DEBUG astra] Running statement in function: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
Block Output (Stmt 3): 2 ^ 3 = 8
[2025-10-08T04:43:12Z DEBUG astra] Running statement in function: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Block Output (Stmt 4): 10 % 3 = 1
[2025-10-08T04:43:12Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Infix(Var("x"), '+', Num("5"))))
[2025-10-08T04:43:12Z DEBUG astra] Running statement in function: Print(Some("x += 5 -> x = {}"), [Var("x")])
Block Output (Stmt 6): x += 5 -> x = 7
[2025-10-08T04:43:12Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Infix(Var("x"), '-', Num("2"))))
[2025-10-08T04:43:12Z DEBUG astra] Running statement in function: Print(Some("x -= 2 -> x = {}"), [Var("x")])
Block Output (Stmt 8): x -= 2 -> x = 5
Result: 5
--- Starting script execution from test.ast ---
[2025-10-08T04:43:18Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-08T04:43:18Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-08T04:43:18Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-08T04:43:18Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-08T04:43:18Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T04:43:18Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T04:43:18Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T04:43:18Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T04:43:18Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T04:43:18Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T04:43:18Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T04:43:18Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T04:43:18Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T04:43:18Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T04:43:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-08T04:43:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-08T04:43:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z: That's right, y does not strictly equal z.")
    ], and else body None
[2025-10-08T04:43:18Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-08T04:43:18Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T04:43:18Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T04:43:18Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T04:43:18Z DEBUG astra] Parsing return statement
[2025-10-08T04:43:18Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T04:43:18Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T04:43:18Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T04:43:18Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T04:43:18Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T04:43:18Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T04:43:18Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T04:43:18Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T04:43:18Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T04:43:18Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T04:43:18Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T04:43:18Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T04:43:18Z DEBUG astra] Parsing return statement
[2025-10-08T04:43:18Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T04:43:18Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T04:43:18Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T04:43:18Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-08T04:43:18Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T04:43:18Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-08T04:43:18Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T04:43:18Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None)
[2025-10-08T04:43:18Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T04:43:18Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-08T04:43:18Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T04:43:18Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test_operators.ast ---
[2025-10-08T04:43:20Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T04:43:20Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T04:43:20Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T04:43:20Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T04:43:20Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T04:43:20Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T04:43:20Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
[2025-10-08T04:43:20Z DEBUG astra] Parsed print statement: Print(Some("x += 5 -> x = {}"), [Var("x")])
[2025-10-08T04:43:20Z DEBUG astra] Parsed print statement: Print(Some("x -= 2 -> x = {}"), [Var("x")])
[2025-10-08T04:43:20Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Num("2")))
[2025-10-08T04:43:20Z DEBUG astra] Running statement in function: Expr(Infix(Var("y"), '=', Num("3")))
[2025-10-08T04:43:20Z DEBUG astra] Running statement in function: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
Block Output (Stmt 3): 2 ^ 3 = 8
[2025-10-08T04:43:20Z DEBUG astra] Running statement in function: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Block Output (Stmt 4): 10 % 3 = 1
[2025-10-08T04:43:20Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Infix(Var("x"), '+', Num("5"))))
[2025-10-08T04:43:20Z DEBUG astra] Running statement in function: Print(Some("x += 5 -> x = {}"), [Var("x")])
Block Output (Stmt 6): x += 5 -> x = 7
[2025-10-08T04:43:20Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Infix(Var("x"), '-', Num("2"))))
[2025-10-08T04:43:20Z DEBUG astra] Running statement in function: Print(Some("x -= 2 -> x = {}"), [Var("x")])
Block Output (Stmt 8): x -= 2 -> x = 5
Result: 5
--- Starting script execution from fact.ast ---
[2025-10-08T04:45:06Z DEBUG astra] Parsed fn factorial(["n"]) [[
        if (n == 0) [
            return 1
        ]
        return n * factorial(n - 1)
    ]]
[2025-10-08T04:45:06Z DEBUG astra] Parsing argument, current token: Number("5")
[2025-10-08T04:45:06Z DEBUG astra] Parsed print statement: Print(Some("Factorial of 5 = {}"), [Call("factorial", [Num("5")])])
[2025-10-08T04:45:06Z DEBUG astra] Parsed statements: [Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]"), Print(Some("Factorial of 5 = {}"), [Call("factorial", [Num("5")])])]

Executing Statement 1
[2025-10-08T04:45:06Z DEBUG astra] Running statement: Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]")

Executing Statement 2
[2025-10-08T04:45:06Z DEBUG astra] Running statement: Print(Some("Factorial of 5 = {}"), [Call("factorial", [Num("5")])])
[2025-10-08T04:45:06Z DEBUG astra] Executing function 'factorial', args: [Num("5")]
[2025-10-08T04:45:06Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:06Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:06Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:06Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:06Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:06Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:06Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:06Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:06Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:06Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:06Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:06Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:06Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:06Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:06Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:06Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:06Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:06Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:06Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:06Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:06Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:06Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:06Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:06Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:06Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:06Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:06Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:06Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:06Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:06Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:06Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:06Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:06Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:06Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:06Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:06Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:06Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:06Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:06Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:06Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:06Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:06Z DEBUG astra] Parsed return statement: Return(Some(Num("1")))
[2025-10-08T04:45:06Z DEBUG astra] Running statement in function: Return(Some(Num("1")))
Output: Factorial of 5 = 120
Result: Factorial of 5 = 120
--- Starting script execution from fact.ast ---
[2025-10-08T04:45:45Z DEBUG astra] Parsed fn factorial(["n"]) [[
        if (n == 0) [
            return 1
        ]
        return n * factorial(n - 1)
    ]]
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("input")
[2025-10-08T04:45:45Z DEBUG astra] Parsed print statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T04:45:45Z DEBUG astra] Parsed statements: [Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]"), Expr(Infix(Var("input"), '=', Num("100"))), Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])]

Executing Statement 1
[2025-10-08T04:45:45Z DEBUG astra] Running statement: Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]")

Executing Statement 2
[2025-10-08T04:45:45Z DEBUG astra] Running statement: Expr(Infix(Var("input"), '=', Num("100")))
Result: 100

Executing Statement 3
[2025-10-08T04:45:45Z DEBUG astra] Running statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Var("input")]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:45Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:45Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:45Z DEBUG astra] Parsed return statement: Return(Some(Num("1")))
[2025-10-08T04:45:45Z DEBUG astra] Running statement in function: Return(Some(Num("1")))
--- Starting script execution from fact.ast ---
[2025-10-08T04:45:56Z DEBUG astra] Parsed fn factorial(["n"]) [[
        if (n == 0) [
            return 1
        ]
        return n * factorial(n - 1)
    ]]
[2025-10-08T04:45:56Z DEBUG astra] Parsing argument, current token: Ident("input")
[2025-10-08T04:45:56Z DEBUG astra] Parsed print statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T04:45:56Z DEBUG astra] Parsed statements: [Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]"), Expr(Infix(Var("input"), '=', Num("5"))), Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])]

Executing Statement 1
[2025-10-08T04:45:56Z DEBUG astra] Running statement: Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]")

Executing Statement 2
[2025-10-08T04:45:56Z DEBUG astra] Running statement: Expr(Infix(Var("input"), '=', Num("5")))
Result: 5

Executing Statement 3
[2025-10-08T04:45:56Z DEBUG astra] Running statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T04:45:56Z DEBUG astra] Executing function 'factorial', args: [Var("input")]
[2025-10-08T04:45:56Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:56Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:56Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:56Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:56Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:56Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:56Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:56Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:56Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:56Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:56Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:56Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:56Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:56Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:56Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:56Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:56Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:56Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:56Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:56Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:56Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:56Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:56Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:56Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:56Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:56Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:56Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:56Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:56Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:56Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:56Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:56Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:56Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:56Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:56Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:45:56Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:45:56Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:56Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:45:56Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:45:56Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:45:56Z DEBUG astra] Parsing return statement
[2025-10-08T04:45:56Z DEBUG astra] Parsed return statement: Return(Some(Num("1")))
[2025-10-08T04:45:56Z DEBUG astra] Running statement in function: Return(Some(Num("1")))
Output: Factorial of 5 = 120
Result: Factorial of 5 = 120
--- Starting script execution from fact.ast ---
[2025-10-08T04:46:02Z DEBUG astra] Parsed fn factorial(["n"]) [[
        if (n == 0) [
            return 1
        ]
        return n * factorial(n - 1)
    ]]
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("input")
[2025-10-08T04:46:02Z DEBUG astra] Parsed print statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T04:46:02Z DEBUG astra] Parsed statements: [Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]"), Expr(Infix(Var("input"), '=', Num("25"))), Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])]

Executing Statement 1
[2025-10-08T04:46:02Z DEBUG astra] Running statement: Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]")

Executing Statement 2
[2025-10-08T04:46:02Z DEBUG astra] Running statement: Expr(Infix(Var("input"), '=', Num("25")))
Result: 25

Executing Statement 3
[2025-10-08T04:46:02Z DEBUG astra] Running statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Var("input")]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:02Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:02Z DEBUG astra] Parsed return statement: Return(Some(Num("1")))
[2025-10-08T04:46:02Z DEBUG astra] Running statement in function: Return(Some(Num("1")))
--- Starting script execution from fact.ast ---
[2025-10-08T04:46:14Z DEBUG astra] Parsed fn factorial(["n"]) [[
        if (n == 0) [
            return 1
        ]
        return n * factorial(n - 1)
    ]]
[2025-10-08T04:46:14Z DEBUG astra] Parsing argument, current token: Ident("input")
[2025-10-08T04:46:14Z DEBUG astra] Parsed print statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T04:46:14Z DEBUG astra] Parsed statements: [Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]"), Expr(Infix(Var("input"), '=', Num("5"))), Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])]

Executing Statement 1
[2025-10-08T04:46:14Z DEBUG astra] Running statement: Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]")

Executing Statement 2
[2025-10-08T04:46:14Z DEBUG astra] Running statement: Expr(Infix(Var("input"), '=', Num("5")))
Result: 5

Executing Statement 3
[2025-10-08T04:46:14Z DEBUG astra] Running statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T04:46:14Z DEBUG astra] Executing function 'factorial', args: [Var("input")]
[2025-10-08T04:46:14Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:14Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:14Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:14Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:14Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:14Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:14Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:14Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:14Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:14Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:14Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:14Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:14Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:14Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:14Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:14Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:14Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:14Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:14Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:14Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:14Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:14Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:14Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:14Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:14Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:14Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:14Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:14Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:14Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:14Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:14Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:14Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:14Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:14Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:14Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T04:46:14Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T04:46:14Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:14Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T04:46:14Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T04:46:14Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T04:46:14Z DEBUG astra] Parsing return statement
[2025-10-08T04:46:14Z DEBUG astra] Parsed return statement: Return(Some(Num("1")))
[2025-10-08T04:46:14Z DEBUG astra] Running statement in function: Return(Some(Num("1")))
Output: Factorial of 5 = 120
Result: Factorial of 5 = 120
--- Starting script execution from fact.ast ---
[2025-10-08T05:11:05Z DEBUG astra] Parsed fn factorial(["n"]) [[
        if (n == 0) [
            return 1
        ]
        return n * factorial(n - 1)
    ]]
[2025-10-08T05:11:05Z DEBUG astra] Parsing argument, current token: Ident("input")
[2025-10-08T05:11:05Z DEBUG astra] Parsed print statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T05:11:05Z DEBUG astra] Parsed statements: [Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]"), Expr(Infix(Var("input"), '=', Num("5"))), Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])]

Executing Statement 1
[2025-10-08T05:11:05Z DEBUG astra] Running statement: Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]")

Executing Statement 2
[2025-10-08T05:11:05Z DEBUG astra] Running statement: Expr(Infix(Var("input"), '=', Num("5")))
Result: 5

Executing Statement 3
[2025-10-08T05:11:05Z DEBUG astra] Running statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T05:11:05Z DEBUG astra] Executing function 'factorial', args: [Var("input")]
[2025-10-08T05:11:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:11:05Z DEBUG astra] Parsing return statement
[2025-10-08T05:11:05Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:11:05Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:05Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:11:05Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:05Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:11:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:11:05Z DEBUG astra] Parsing return statement
[2025-10-08T05:11:05Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:11:05Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:05Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:11:05Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:05Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:11:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:11:05Z DEBUG astra] Parsing return statement
[2025-10-08T05:11:05Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:11:05Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:05Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:11:05Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:05Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:11:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:11:05Z DEBUG astra] Parsing return statement
[2025-10-08T05:11:05Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:11:05Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:05Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:11:05Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:05Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:11:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:11:05Z DEBUG astra] Parsing return statement
[2025-10-08T05:11:05Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:11:05Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:05Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:11:05Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:05Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:11:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:11:05Z DEBUG astra] Parsing return statement
[2025-10-08T05:11:05Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:11:05Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:05Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:11:05Z DEBUG astra] Parsing return statement
[2025-10-08T05:11:05Z DEBUG astra] Parsed return statement: Return(Some(Num("1")))
[2025-10-08T05:11:05Z DEBUG astra] Running statement in function: Return(Some(Num("1")))
Output: Factorial of 5 = 120
Result: Factorial of 5 = 120
--- Starting script execution from test_operators.ast ---
[2025-10-08T05:11:11Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T05:11:11Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T05:11:11Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T05:11:11Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T05:11:11Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T05:11:11Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T05:11:11Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
[2025-10-08T05:11:11Z DEBUG astra] Parsed print statement: Print(Some("x += 5 -> x = {}"), [Var("x")])
[2025-10-08T05:11:11Z DEBUG astra] Parsed print statement: Print(Some("x -= 2 -> x = {}"), [Var("x")])
[2025-10-08T05:11:11Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Num("2")))
[2025-10-08T05:11:11Z DEBUG astra] Running statement in function: Expr(Infix(Var("y"), '=', Num("3")))
[2025-10-08T05:11:11Z DEBUG astra] Running statement in function: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
Block Output (Stmt 3): 2 ^ 3 = 8
[2025-10-08T05:11:11Z DEBUG astra] Running statement in function: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Block Output (Stmt 4): 10 % 3 = 1
[2025-10-08T05:11:11Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Infix(Var("x"), '+', Num("5"))))
[2025-10-08T05:11:11Z DEBUG astra] Running statement in function: Print(Some("x += 5 -> x = {}"), [Var("x")])
Block Output (Stmt 6): x += 5 -> x = 7
[2025-10-08T05:11:11Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Infix(Var("x"), '-', Num("2"))))
[2025-10-08T05:11:11Z DEBUG astra] Running statement in function: Print(Some("x -= 2 -> x = {}"), [Var("x")])
Block Output (Stmt 8): x -= 2 -> x = 5
Result: 5
--- Starting script execution from test.ast ---
[2025-10-08T05:11:17Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-08T05:11:17Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-08T05:11:17Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-08T05:11:17Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-08T05:11:17Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T05:11:17Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T05:11:17Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T05:11:17Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T05:11:17Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T05:11:17Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T05:11:17Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T05:11:17Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T05:11:17Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T05:11:17Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T05:11:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-08T05:11:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-08T05:11:17Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z: That's right, y does not strictly equal z.")
    ], and else body None
[2025-10-08T05:11:17Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-08T05:11:17Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T05:11:17Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T05:11:17Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T05:11:17Z DEBUG astra] Parsing return statement
[2025-10-08T05:11:17Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T05:11:17Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T05:11:17Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T05:11:17Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T05:11:17Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T05:11:17Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T05:11:17Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T05:11:17Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T05:11:17Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T05:11:17Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T05:11:17Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T05:11:17Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T05:11:17Z DEBUG astra] Parsing return statement
[2025-10-08T05:11:17Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T05:11:17Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T05:11:17Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T05:11:17Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-08T05:11:17Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T05:11:17Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-08T05:11:17Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T05:11:17Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None)
[2025-10-08T05:11:17Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T05:11:17Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-08T05:11:17Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T05:11:17Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from fact.ast ---
[2025-10-08T05:11:19Z DEBUG astra] Parsed fn factorial(["n"]) [[
        if (n == 0) [
            return 1
        ]
        return n * factorial(n - 1)
    ]]
[2025-10-08T05:11:19Z DEBUG astra] Parsing argument, current token: Ident("input")
[2025-10-08T05:11:19Z DEBUG astra] Parsed print statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T05:11:19Z DEBUG astra] Parsed statements: [Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]"), Expr(Infix(Var("input"), '=', Num("5"))), Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])]

Executing Statement 1
[2025-10-08T05:11:19Z DEBUG astra] Running statement: Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]")

Executing Statement 2
[2025-10-08T05:11:19Z DEBUG astra] Running statement: Expr(Infix(Var("input"), '=', Num("5")))
Result: 5

Executing Statement 3
[2025-10-08T05:11:19Z DEBUG astra] Running statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T05:11:19Z DEBUG astra] Executing function 'factorial', args: [Var("input")]
[2025-10-08T05:11:19Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:11:19Z DEBUG astra] Parsing return statement
[2025-10-08T05:11:19Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:11:19Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:19Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:11:19Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:19Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:11:19Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:11:19Z DEBUG astra] Parsing return statement
[2025-10-08T05:11:19Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:11:19Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:19Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:11:19Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:19Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:11:19Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:11:19Z DEBUG astra] Parsing return statement
[2025-10-08T05:11:19Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:11:19Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:19Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:11:19Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:19Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:11:19Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:11:19Z DEBUG astra] Parsing return statement
[2025-10-08T05:11:19Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:11:19Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:19Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:11:19Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:19Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:11:19Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:11:19Z DEBUG astra] Parsing return statement
[2025-10-08T05:11:19Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:11:19Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:19Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:11:19Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:19Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:11:19Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:11:19Z DEBUG astra] Parsing return statement
[2025-10-08T05:11:19Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:11:19Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:11:19Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:11:19Z DEBUG astra] Parsing return statement
[2025-10-08T05:11:19Z DEBUG astra] Parsed return statement: Return(Some(Num("1")))
[2025-10-08T05:11:19Z DEBUG astra] Running statement in function: Return(Some(Num("1")))
Output: Factorial of 5 = 120
Result: Factorial of 5 = 120
--- Starting script execution from fact.ast ---
[2025-10-08T05:20:18Z DEBUG astra] Parsed fn factorial(["n"]) [[
        if (n == 0) [
            return 1
        ]
        return n * factorial(n - 1)
    ]]
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("input")
[2025-10-08T05:20:18Z DEBUG astra] Parsed print statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T05:20:18Z DEBUG astra] Parsed statements: [Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]"), Expr(Infix(Var("input"), '=', Num("100"))), Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])]

Executing Statement 1
[2025-10-08T05:20:18Z DEBUG astra] Running statement: Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]")

Executing Statement 2
[2025-10-08T05:20:18Z DEBUG astra] Running statement: Expr(Infix(Var("input"), '=', Num("100")))
Result: 100

Executing Statement 3
[2025-10-08T05:20:18Z DEBUG astra] Running statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Var("input")]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:18Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:18Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:18Z DEBUG astra] Parsed return statement: Return(Some(Num("1")))
[2025-10-08T05:20:18Z DEBUG astra] Running statement in function: Return(Some(Num("1")))
Output: Factorial of 100 = 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
Result: Factorial of 100 = 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
--- Starting script execution from test.ast ---
[2025-10-08T05:20:21Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-08T05:20:21Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-08T05:20:21Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-08T05:20:21Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-08T05:20:21Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T05:20:21Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T05:20:21Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T05:20:21Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T05:20:21Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T05:20:21Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T05:20:21Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T05:20:21Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T05:20:21Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T05:20:21Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T05:20:21Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-08T05:20:21Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-08T05:20:21Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z: That's right, y does not strictly equal z.")
    ], and else body None
[2025-10-08T05:20:21Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-08T05:20:21Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T05:20:21Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T05:20:21Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T05:20:21Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:21Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T05:20:21Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T05:20:21Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T05:20:21Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T05:20:21Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T05:20:21Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T05:20:21Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T05:20:21Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T05:20:21Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T05:20:21Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T05:20:21Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T05:20:21Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T05:20:21Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:21Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T05:20:21Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T05:20:21Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T05:20:21Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-08T05:20:21Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T05:20:21Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-08T05:20:21Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T05:20:21Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None)
[2025-10-08T05:20:21Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T05:20:21Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-08T05:20:21Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T05:20:21Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from test_operators.ast ---
[2025-10-08T05:20:25Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T05:20:25Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T05:20:25Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T05:20:25Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T05:20:25Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T05:20:25Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T05:20:25Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
[2025-10-08T05:20:25Z DEBUG astra] Parsed print statement: Print(Some("x += 5 -> x = {}"), [Var("x")])
[2025-10-08T05:20:25Z DEBUG astra] Parsed print statement: Print(Some("x -= 2 -> x = {}"), [Var("x")])
[2025-10-08T05:20:25Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Num("2")))
[2025-10-08T05:20:25Z DEBUG astra] Running statement in function: Expr(Infix(Var("y"), '=', Num("3")))
[2025-10-08T05:20:25Z DEBUG astra] Running statement in function: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
Block Output (Stmt 3): 2 ^ 3 = 8
[2025-10-08T05:20:25Z DEBUG astra] Running statement in function: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Block Output (Stmt 4): 10 % 3 = 1
[2025-10-08T05:20:25Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Infix(Var("x"), '+', Num("5"))))
[2025-10-08T05:20:25Z DEBUG astra] Running statement in function: Print(Some("x += 5 -> x = {}"), [Var("x")])
Block Output (Stmt 6): x += 5 -> x = 7
[2025-10-08T05:20:25Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Infix(Var("x"), '-', Num("2"))))
[2025-10-08T05:20:25Z DEBUG astra] Running statement in function: Print(Some("x -= 2 -> x = {}"), [Var("x")])
Block Output (Stmt 8): x -= 2 -> x = 5
Result: 5
--- Starting script execution from test_operators.ast ---
[2025-10-08T05:20:31Z DEBUG astra] Parsed fn test_operators([]) [[
        x = 2
        y = 3
        print("2 ^ 3 = {}", x ^ y)      ; Should print: 2 ^ 3 = 8
        print("10 % 3 = {}", 10 % 3)    ; Should print: 10 % 3 = 1
        x += 5
        print("x += 5 -> x = {}", x)    ; Should print: x += 5 -> x = 7
        x -= 2
        print("x -= 2 -> x = {}", x)    ; Should print: x -= 2 -> x = 5
    ]]
[2025-10-08T05:20:31Z DEBUG astra] Parsed statements: [Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]"), Expr(Call("test_operators", []))]

Executing Statement 1
[2025-10-08T05:20:31Z DEBUG astra] Running statement: Def("test_operators", [], "[\n    x = 2\n    y = 3\n    print(\"2 ^ 3 = {}\", x ^ y)      ; Should print: 2 ^ 3 = 8\n    print(\"10 % 3 = {}\", 10 % 3)    ; Should print: 10 % 3 = 1\n    x += 5\n    print(\"x += 5 -> x = {}\", x)    ; Should print: x += 5 -> x = 7\n    x -= 2\n    print(\"x -= 2 -> x = {}\", x)    ; Should print: x -= 2 -> x = 5\n]")

Executing Statement 2
[2025-10-08T05:20:31Z DEBUG astra] Running statement: Expr(Call("test_operators", []))
[2025-10-08T05:20:31Z DEBUG astra] Executing function 'test_operators', args: []
[2025-10-08T05:20:31Z DEBUG astra] Parsed print statement: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
[2025-10-08T05:20:31Z DEBUG astra] Parsed print statement: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
[2025-10-08T05:20:31Z DEBUG astra] Parsed print statement: Print(Some("x += 5 -> x = {}"), [Var("x")])
[2025-10-08T05:20:31Z DEBUG astra] Parsed print statement: Print(Some("x -= 2 -> x = {}"), [Var("x")])
[2025-10-08T05:20:31Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Num("2")))
[2025-10-08T05:20:31Z DEBUG astra] Running statement in function: Expr(Infix(Var("y"), '=', Num("3")))
[2025-10-08T05:20:31Z DEBUG astra] Running statement in function: Print(Some("2 ^ 3 = {}"), [Infix(Var("x"), '^', Var("y"))])
Block Output (Stmt 3): 2 ^ 3 = 8
[2025-10-08T05:20:31Z DEBUG astra] Running statement in function: Print(Some("10 % 3 = {}"), [Infix(Num("10"), '%', Num("3"))])
Block Output (Stmt 4): 10 % 3 = 1
[2025-10-08T05:20:31Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Infix(Var("x"), '+', Num("5"))))
[2025-10-08T05:20:31Z DEBUG astra] Running statement in function: Print(Some("x += 5 -> x = {}"), [Var("x")])
Block Output (Stmt 6): x += 5 -> x = 7
[2025-10-08T05:20:31Z DEBUG astra] Running statement in function: Expr(Infix(Var("x"), '=', Infix(Var("x"), '-', Num("2"))))
[2025-10-08T05:20:31Z DEBUG astra] Running statement in function: Print(Some("x -= 2 -> x = {}"), [Var("x")])
Block Output (Stmt 8): x -= 2 -> x = 5
Result: 5
--- Starting script execution from test.ast ---
[2025-10-08T05:20:33Z DEBUG astra] Parsed fn add(["number"]) [[
    	result = (number + 500) * 5 				; creating the result
    	print("The answer is {}", result) 	; printing the result
    	return result						; returing the result
    ]]
[2025-10-08T05:20:33Z DEBUG astra] Parsed fn divide(["number"]) [[
    	wow = "\"Wow!\""
    	print("The division yields {} and I'd just like to say, {}, or even, {}", number / 1, "\"Phew!\"", wow)
    ]]
[2025-10-08T05:20:33Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[
    	print("We're multiplying {} and {}, and the answer is {}!", number1, number2, number1 * number2)
    ]]
[2025-10-08T05:20:33Z DEBUG astra] Parsed fn returns_a_string([]) [[
    	my_string = "I work!"
    	return my_string
    ]]
[2025-10-08T05:20:33Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-08T05:20:33Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-08T05:20:33Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-08T05:20:33Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-08T05:20:33Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-08T05:20:33Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T05:20:33Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-08T05:20:33Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-08T05:20:33Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-08T05:20:33Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-08T05:20:33Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [
    	print("x equals {}", x)
    ], and else body None
[2025-10-08T05:20:33Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [
    	print("y === z: y equals z, but it's not strictly the same because an integer is not a float!")
    ], and else body Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")
[2025-10-08T05:20:33Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [
    	print("y !== z: That's right, y does not strictly equal z.")
    ], and else body None
[2025-10-08T05:20:33Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [
    	print("1 equals 1")
    ], and else body Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]")
[2025-10-08T05:20:33Z DEBUG astra] Parsed statements: [Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]"), Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]"), Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]"), Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]"), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]")), If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None), If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))]

Executing Statement 1
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Def("add", ["number"], "[\n\tresult = (number + 500) * 5 \t\t\t\t; creating the result\n\tprint(\"The answer is {}\", result) \t; printing the result\n\treturn result\t\t\t\t\t\t; returing the result\n]")

Executing Statement 2
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Def("divide", ["number"], "[\n\twow = \"\\\"Wow!\\\"\"\n\tprint(\"The division yields {} and I'd just like to say, {}, or even, {}\", number / 1, \"\\\"Phew!\\\"\", wow)\n]")

Executing Statement 3
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], "[\n\tprint(\"We're multiplying {} and {}, and the answer is {}!\", number1, number2, number1 * number2)\n]")

Executing Statement 4
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Def("returns_a_string", [], "[\n\tmy_string = \"I work!\"\n\treturn my_string\n]")

Executing Statement 5
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-08T05:20:33Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-08T05:20:33Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-08T05:20:33Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:33Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-08T05:20:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-08T05:20:33Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-08T05:20:33Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-08T05:20:33Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-08T05:20:33Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-08T05:20:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-08T05:20:33Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-08T05:20:33Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-08T05:20:33Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-08T05:20:33Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-08T05:20:33Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-08T05:20:33Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:33Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-08T05:20:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-08T05:20:33Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
[2025-10-08T05:20:33Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), "[\n\tprint(\"x equals {}\", x)\n]", None)
[2025-10-08T05:20:33Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
[2025-10-08T05:20:33Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), "[\n\tprint(\"y === z: y equals z, but it's not strictly the same because an integer is not a float!\")\n]", Some("[\n\tprint(\"y === z: This is what you should see because the test yields false (y = 100, z = 100.0)\")\n]"))
[2025-10-08T05:20:33Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
[2025-10-08T05:20:33Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), "[\n\tprint(\"y !== z: That's right, y does not strictly equal z.\")\n]", None)
[2025-10-08T05:20:33Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
[2025-10-08T05:20:33Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), "[\n\tprint(\"1 equals 1\")\n]", Some("[\n\tif (1 == 2) [\n\t\tprint(\"1 does not equal 2\")\n\t]\n]"))
[2025-10-08T05:20:33Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-08T05:20:33Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1
--- Starting script execution from fact.ast ---
[2025-10-08T05:20:36Z DEBUG astra] Parsed fn factorial(["n"]) [[
        if (n == 0) [
            return 1
        ]
        return n * factorial(n - 1)
    ]]
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("input")
[2025-10-08T05:20:36Z DEBUG astra] Parsed print statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T05:20:36Z DEBUG astra] Parsed statements: [Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]"), Expr(Infix(Var("input"), '=', Num("100"))), Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])]

Executing Statement 1
[2025-10-08T05:20:36Z DEBUG astra] Running statement: Def("factorial", ["n"], "[\n    if (n == 0) [\n        return 1\n    ]\n    return n * factorial(n - 1)\n]")

Executing Statement 2
[2025-10-08T05:20:36Z DEBUG astra] Running statement: Expr(Infix(Var("input"), '=', Num("100")))
Result: 100

Executing Statement 3
[2025-10-08T05:20:36Z DEBUG astra] Running statement: Print(Some("Factorial of {} = {}"), [Var("input"), Call("factorial", [Var("input")])])
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Var("input")]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Executing function 'factorial', args: [Infix(Var("n"), '-', Num("1"))]
[2025-10-08T05:20:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("n"), "==", Num("0")), if body [
            return 1
        ], and else body None
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsing argument, current token: Ident("n")
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Infix(Var("n"), '*', Call("factorial", [Infix(Var("n"), '-', Num("1"))]))))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: If(Cmp(Var("n"), "==", Num("0")), "[\n        return 1\n    ]", None)
[2025-10-08T05:20:36Z DEBUG astra] Parsing return statement
[2025-10-08T05:20:36Z DEBUG astra] Parsed return statement: Return(Some(Num("1")))
[2025-10-08T05:20:36Z DEBUG astra] Running statement in function: Return(Some(Num("1")))
Output: Factorial of 100 = 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
Result: Factorial of 100 = 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
