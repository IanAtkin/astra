--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T02:21:20Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:21:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:21:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
Parsing Error: Bad token in prefix: Keyword("if") (Expected expression start or operator)
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:25:20Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:25:20Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:25:20Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:25:20Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:25:20Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:25:20Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:25:20Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body None
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:25:20Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]]
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:25:20Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T02:25:20Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("mid")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("mid")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("arr_len")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:25:20Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Call("slice", [Var("arr"), Num("0"), Var("mid")]))), Expr(Infix(Var("right_half"), '=', Call("slice", [Var("arr"), Var("mid"), Var("arr_len")]))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T02:25:20Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T02:25:20Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T02:25:20Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T02:25:20Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T02:25:20Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Call("slice", [Var("arr"), Num("0"), Var("mid")]))), Expr(Infix(Var("right_half"), '=', Call("slice", [Var("arr"), Var("mid"), Var("arr_len")]))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")])))
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 2
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])

Executing Statement 5
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Call("slice", [Var("arr"), Num("0"), Var("mid")]))), Expr(Infix(Var("right_half"), '=', Call("slice", [Var("arr"), Var("mid"), Var("arr_len")]))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 9
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T02:25:20Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T02:25:20Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:25:20Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:25:20Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:25:20Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:25:20Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Call("slice", [Var("arr"), Num("0"), Var("mid")])))
[2025-10-10T02:25:20Z DEBUG astra] Executing function 'slice', args: [Var("arr"), Num("0"), Var("mid")]
Runtime Error (Statement 9): Function 'merge_sort' Execution Error (Stmt 4): Function 'slice' is not defined
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:26:39Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:26:39Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:26:39Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:26:39Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:26:39Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:26:39Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:26:39Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body None
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:26:39Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]]
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:26:39Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T02:26:39Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:26:39Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T02:26:39Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T02:26:39Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T02:26:39Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T02:26:39Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T02:26:39Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")])))
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 2
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])

Executing Statement 5
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 9
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], None)
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'append', args: [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]
Runtime Error (Statement 9): Function 'merge_sort' Execution Error (Stmt 6): Function 'merge_sort' Execution Error (Stmt 6): Function 'merge_sort' Execution Error (Stmt 8): Function 'merge' Execution Error (Stmt 1): Function 'recursive_merge_step' Execution Error (Stmt 4): Function 'append' is not defined
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:28:48Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:28:48Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:28:48Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:28:48Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:28:48Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:28:48Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:28:48Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T02:28:48Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:28:48Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T02:28:48Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
Parsing Error: Unclosed block body. Expected matching ']', found Eof
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:29:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:29:05Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:29:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:29:05Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:29:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:29:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:29:05Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T02:29:05Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:29:05Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T02:29:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:29:05Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T02:29:05Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T02:29:05Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T02:29:05Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T02:29:05Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T02:29:05Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")])))
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 2
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))])

Executing Statement 5
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 9
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'append', args: [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]
Runtime Error (Statement 9): Function 'merge_sort' Execution Error (Stmt 6): Function 'merge_sort' Execution Error (Stmt 6): Function 'merge_sort' Execution Error (Stmt 8): Function 'merge' Execution Error (Stmt 1): Function 'recursive_merge_step' Execution Error (Stmt 3): Function 'append' is not defined
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:30:29Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:30:29Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T02:30:29Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:29Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:29Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T02:30:29Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T02:30:29Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T02:30:29Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T02:30:29Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T02:30:29Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")])))
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 2
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))])

Executing Statement 5
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 9
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]

Executing Statement 10
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Print(Some("\nSorted Array (Merge Sort):"), [])
Output: 
Sorted Array (Merge Sort):
Result: 
Sorted Array (Merge Sort):

Executing Statement 11
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Print(None, [Var("sorted_data")])
Output: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:30:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:30:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T02:30:36Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:36Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:36Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T02:30:36Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T02:30:36Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T02:30:36Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T02:30:36Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T02:30:36Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")])))
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 2
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))])

Executing Statement 5
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 9
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]

Executing Statement 10
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Print(Some("\nSorted Array (Merge Sort):"), [])
Output: 
Sorted Array (Merge Sort):
Result: 
Sorted Array (Merge Sort):

Executing Statement 11
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Print(None, [Var("sorted_data")])
Output: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
--- Starting script execution from test_multidim_array_sort_broken.ast ---
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Parsed if statement with condition Cmp(Var("j"), "<", Num("0")), if body [Return(Some(Var("j")))], and else body None
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), if body [Return(Some(Var("j")))], and else body None
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("key")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("j")
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Parsed fn inner_loop_shift(["arr", "key", "j"]) [[If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None), If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None), Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None))), Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))]]
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T02:31:57Z DEBUG astra] Parsed if statement with condition Cmp(Var("i"), ">=", Var("arr_len")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("key")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("i")
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("i")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("arr_len")
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Parsed fn outer_loop_sort(["arr", "i", "arr_len"]) [[If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None))), Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]))), Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key"))), Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))]]
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Number("1")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("length")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Call("outer_loop_sort", [Var("arr"), Num("1"), Call("length", [Var("arr")])])))
[2025-10-10T02:31:57Z DEBUG astra] Parsed fn sort_array(["arr"]) [[Return(Some(Call("outer_loop_sort", [Var("arr"), Num("1"), Call("length", [Var("arr")])])))]]
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Var("md_array")))
[2025-10-10T02:31:57Z DEBUG astra] Parsed if statement with condition Cmp(Var("i"), ">=", Var("main_len")), if body [Return(Some(Var("md_array")))], and else body None
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("sub_array")
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("md_array")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("i")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("main_len")
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Call("outer_md_loop", [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Parsed fn outer_md_loop(["md_array", "i", "main_len"]) [[If(Cmp(Var("i"), ">=", Var("main_len")), [Return(Some(Var("md_array")))], None), Expr(Infix(Var("sub_array"), '=', Slice(Var("md_array"), Some(Var("i")), None))), Expr(Call("sort_array", [Var("sub_array")])), Expr(Infix(Slice(Var("md_array"), Some(Var("i")), None), '=', Var("sub_array"))), Return(Some(Call("outer_md_loop", [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")])))]]
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("md_array")
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("md_array")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("main_len")
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Call("outer_md_loop", [Var("md_array"), Num("0"), Var("main_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Parsed fn sort_multidim(["md_array"]) [[Expr(Infix(Var("main_len"), '=', Call("length", [Var("md_array")]))), Return(Some(Call("outer_md_loop", [Var("md_array"), Num("0"), Var("main_len")])))]]
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T02:31:57Z DEBUG astra] Parsed print statement: Print(Some("Original Data Array (now sorted in-place):"), [])
[2025-10-10T02:31:57Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T02:31:57Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Multi-Dimensional Array:"), [])
[2025-10-10T02:31:57Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T02:31:57Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange")]), Array([Str("car"), Str("train"), Str("bus")]), Array([Str("donkey"), Str("cat"), Str("mouse"), Str("dog"), Str("goldfish")])]))), Def("inner_loop_shift", ["arr", "key", "j"], [If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None), If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None), Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None))), Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))]), Def("outer_loop_sort", ["arr", "i", "arr_len"], [If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None))), Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]))), Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key"))), Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))]), Def("sort_array", ["arr"], [Return(Some(Call("outer_loop_sort", [Var("arr"), Num("1"), Call("length", [Var("arr")])])))]), Def("outer_md_loop", ["md_array", "i", "main_len"], [If(Cmp(Var("i"), ">=", Var("main_len")), [Return(Some(Var("md_array")))], None), Expr(Infix(Var("sub_array"), '=', Slice(Var("md_array"), Some(Var("i")), None))), Expr(Call("sort_array", [Var("sub_array")])), Expr(Infix(Slice(Var("md_array"), Some(Var("i")), None), '=', Var("sub_array"))), Return(Some(Call("outer_md_loop", [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")])))]), Def("sort_multidim", ["md_array"], [Expr(Infix(Var("main_len"), '=', Call("length", [Var("md_array")]))), Return(Some(Call("outer_md_loop", [Var("md_array"), Num("0"), Var("main_len")])))]), Expr(Infix(Var("sorted_data"), '=', Call("sort_multidim", [Var("data_array")]))), Print(Some("Original Data Array (now sorted in-place):"), []), Print(None, [Var("data_array")]), Print(Some("\nSorted Multi-Dimensional Array:"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange")]), Array([Str("car"), Str("train"), Str("bus")]), Array([Str("donkey"), Str("cat"), Str("mouse"), Str("dog"), Str("goldfish")])])))
Result: [[cherry, apple, mango, banana, orange], [car, train, bus], [donkey, cat, mouse, dog, goldfish]]

Executing Statement 2
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Def("inner_loop_shift", ["arr", "key", "j"], [If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None), If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None), Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None))), Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Def("outer_loop_sort", ["arr", "i", "arr_len"], [If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None))), Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]))), Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key"))), Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))])

Executing Statement 4
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Def("sort_array", ["arr"], [Return(Some(Call("outer_loop_sort", [Var("arr"), Num("1"), Call("length", [Var("arr")])])))])

Executing Statement 5
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Def("outer_md_loop", ["md_array", "i", "main_len"], [If(Cmp(Var("i"), ">=", Var("main_len")), [Return(Some(Var("md_array")))], None), Expr(Infix(Var("sub_array"), '=', Slice(Var("md_array"), Some(Var("i")), None))), Expr(Call("sort_array", [Var("sub_array")])), Expr(Infix(Slice(Var("md_array"), Some(Var("i")), None), '=', Var("sub_array"))), Return(Some(Call("outer_md_loop", [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")])))])

Executing Statement 6
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Def("sort_multidim", ["md_array"], [Expr(Infix(Var("main_len"), '=', Call("length", [Var("md_array")]))), Return(Some(Call("outer_md_loop", [Var("md_array"), Num("0"), Var("main_len")])))])

Executing Statement 7
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("sort_multidim", [Var("data_array")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'sort_multidim', args: [Var("data_array")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("main_len"), '=', Call("length", [Var("md_array")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'length', args: [Var("md_array")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_md_loop", [Var("md_array"), Num("0"), Var("main_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_md_loop', args: [Var("md_array"), Num("0"), Var("main_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("main_len")), [Return(Some(Var("md_array")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("sub_array"), '=', Slice(Var("md_array"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Call("sort_array", [Var("sub_array")]))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'sort_array', args: [Var("sub_array")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Num("1"), Call("length", [Var("arr")])])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Num("1"), Call("length", [Var("arr")])]
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("md_array"), Some(Var("i")), None), '=', Var("sub_array")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_md_loop", [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_md_loop', args: [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("main_len")), [Return(Some(Var("md_array")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("sub_array"), '=', Slice(Var("md_array"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Call("sort_array", [Var("sub_array")]))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'sort_array', args: [Var("sub_array")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Num("1"), Call("length", [Var("arr")])])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Num("1"), Call("length", [Var("arr")])]
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("md_array"), Some(Var("i")), None), '=', Var("sub_array")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_md_loop", [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_md_loop', args: [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("main_len")), [Return(Some(Var("md_array")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("sub_array"), '=', Slice(Var("md_array"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Call("sort_array", [Var("sub_array")]))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'sort_array', args: [Var("sub_array")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Num("1"), Call("length", [Var("arr")])])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Num("1"), Call("length", [Var("arr")])]
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("md_array"), Some(Var("i")), None), '=', Var("sub_array")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_md_loop", [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_md_loop', args: [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("main_len")), [Return(Some(Var("md_array")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("md_array")))
Result: [[cherry, apple, mango, banana, orange], [car, train, bus], [donkey, cat, mouse, dog, goldfish]]

Executing Statement 8
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Print(Some("Original Data Array (now sorted in-place):"), [])
Output: Original Data Array (now sorted in-place):
Result: Original Data Array (now sorted in-place):

Executing Statement 9
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [[cherry, apple, mango, banana, orange], [car, train, bus], [donkey, cat, mouse, dog, goldfish]]
Result: [[cherry, apple, mango, banana, orange], [car, train, bus], [donkey, cat, mouse, dog, goldfish]]

Executing Statement 10
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Print(Some("\nSorted Multi-Dimensional Array:"), [])
Output: 
Sorted Multi-Dimensional Array:
Result: 
Sorted Multi-Dimensional Array:

Executing Statement 11
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Print(None, [Var("sorted_data")])
Output: [[cherry, apple, mango, banana, orange], [car, train, bus], [donkey, cat, mouse, dog, goldfish]]
Result: [[cherry, apple, mango, banana, orange], [car, train, bus], [donkey, cat, mouse, dog, goldfish]]
