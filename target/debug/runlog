--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T02:21:20Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:21:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:21:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
Parsing Error: Bad token in prefix: Keyword("if") (Expected expression start or operator)
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:25:20Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:25:20Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:25:20Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:25:20Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:25:20Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:25:20Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:25:20Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body None
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:25:20Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]]
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:25:20Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T02:25:20Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("mid")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("mid")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("arr_len")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T02:25:20Z DEBUG astra] Parsing return statement
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T02:25:20Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:25:20Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Call("slice", [Var("arr"), Num("0"), Var("mid")]))), Expr(Infix(Var("right_half"), '=', Call("slice", [Var("arr"), Var("mid"), Var("arr_len")]))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T02:25:20Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T02:25:20Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T02:25:20Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T02:25:20Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T02:25:20Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T02:25:20Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Call("slice", [Var("arr"), Num("0"), Var("mid")]))), Expr(Infix(Var("right_half"), '=', Call("slice", [Var("arr"), Var("mid"), Var("arr_len")]))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")])))
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 2
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])

Executing Statement 5
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Call("slice", [Var("arr"), Num("0"), Var("mid")]))), Expr(Infix(Var("right_half"), '=', Call("slice", [Var("arr"), Var("mid"), Var("arr_len")]))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 9
-----------------------
[2025-10-10T02:25:20Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T02:25:20Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T02:25:20Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:25:20Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:25:20Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:25:20Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:25:20Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Call("slice", [Var("arr"), Num("0"), Var("mid")])))
[2025-10-10T02:25:20Z DEBUG astra] Executing function 'slice', args: [Var("arr"), Num("0"), Var("mid")]
Runtime Error (Statement 9): Function 'merge_sort' Execution Error (Stmt 4): Function 'slice' is not defined
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:26:39Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:26:39Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:26:39Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:26:39Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:26:39Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:26:39Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:26:39Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body None
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:26:39Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]]
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:26:39Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T02:26:39Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T02:26:39Z DEBUG astra] Parsing return statement
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T02:26:39Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:26:39Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T02:26:39Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T02:26:39Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T02:26:39Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T02:26:39Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T02:26:39Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T02:26:39Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")])))
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 2
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])

Executing Statement 5
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 9
-----------------------
[2025-10-10T02:26:39Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], None)
[2025-10-10T02:26:39Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)])))
[2025-10-10T02:26:39Z DEBUG astra] Executing function 'append', args: [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]
Runtime Error (Statement 9): Function 'merge_sort' Execution Error (Stmt 6): Function 'merge_sort' Execution Error (Stmt 6): Function 'merge_sort' Execution Error (Stmt 8): Function 'merge' Execution Error (Stmt 1): Function 'recursive_merge_step' Execution Error (Stmt 4): Function 'append' is not defined
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:28:48Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:28:48Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:28:48Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:28:48Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:28:48Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:28:48Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:28:48Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T02:28:48Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:28:48Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T02:28:48Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:28:48Z DEBUG astra] Parsing return statement
[2025-10-10T02:28:48Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T02:28:48Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
Parsing Error: Unclosed block body. Expected matching ']', found Eof
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:29:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:29:05Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:29:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:29:05Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:29:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:29:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:29:05Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T02:29:05Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:29:05Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T02:29:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T02:29:05Z DEBUG astra] Parsing return statement
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T02:29:05Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:29:05Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T02:29:05Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T02:29:05Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T02:29:05Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T02:29:05Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T02:29:05Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T02:29:05Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")])))
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 2
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))])

Executing Statement 5
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 9
-----------------------
[2025-10-10T02:29:05Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("left_arr"), Some(Var("left_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:29:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Call("append", [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)])))
[2025-10-10T02:29:05Z DEBUG astra] Executing function 'append', args: [Var("result"), Slice(Var("right_arr"), Some(Var("right_i")), None)]
Runtime Error (Statement 9): Function 'merge_sort' Execution Error (Stmt 6): Function 'merge_sort' Execution Error (Stmt 6): Function 'merge_sort' Execution Error (Stmt 8): Function 'merge' Execution Error (Stmt 1): Function 'recursive_merge_step' Execution Error (Stmt 3): Function 'append' is not defined
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:30:29Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:30:29Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T02:30:29Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:29Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T02:30:29Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T02:30:29Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:29Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T02:30:29Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T02:30:29Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T02:30:29Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T02:30:29Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T02:30:29Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T02:30:29Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")])))
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 2
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))])

Executing Statement 5
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 9
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:29Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:29Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]

Executing Statement 10
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Print(Some("\nSorted Array (Merge Sort):"), [])
Output: 
Sorted Array (Merge Sort):
Result: 
Sorted Array (Merge Sort):

Executing Statement 11
-----------------------
[2025-10-10T02:30:29Z DEBUG astra] Running statement: Print(None, [Var("sorted_data")])
Output: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:30:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:30:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T02:30:36Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:36Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T02:30:36Z DEBUG astra] Parsing return statement
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T02:30:36Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:36Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T02:30:36Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T02:30:36Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T02:30:36Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T02:30:36Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T02:30:36Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T02:30:36Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")])))
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 2
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))])

Executing Statement 5
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 9
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:30:36Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:30:36Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]

Executing Statement 10
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Print(Some("\nSorted Array (Merge Sort):"), [])
Output: 
Sorted Array (Merge Sort):
Result: 
Sorted Array (Merge Sort):

Executing Statement 11
-----------------------
[2025-10-10T02:30:36Z DEBUG astra] Running statement: Print(None, [Var("sorted_data")])
Output: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
--- Starting script execution from test_multidim_array_sort_broken.ast ---
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Parsed if statement with condition Cmp(Var("j"), "<", Num("0")), if body [Return(Some(Var("j")))], and else body None
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), if body [Return(Some(Var("j")))], and else body None
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("key")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("j")
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Parsed fn inner_loop_shift(["arr", "key", "j"]) [[If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None), If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None), Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None))), Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))]]
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T02:31:57Z DEBUG astra] Parsed if statement with condition Cmp(Var("i"), ">=", Var("arr_len")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("key")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("i")
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("i")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("arr_len")
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Parsed fn outer_loop_sort(["arr", "i", "arr_len"]) [[If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None))), Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]))), Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key"))), Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))]]
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Number("1")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("length")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Call("outer_loop_sort", [Var("arr"), Num("1"), Call("length", [Var("arr")])])))
[2025-10-10T02:31:57Z DEBUG astra] Parsed fn sort_array(["arr"]) [[Return(Some(Call("outer_loop_sort", [Var("arr"), Num("1"), Call("length", [Var("arr")])])))]]
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Var("md_array")))
[2025-10-10T02:31:57Z DEBUG astra] Parsed if statement with condition Cmp(Var("i"), ">=", Var("main_len")), if body [Return(Some(Var("md_array")))], and else body None
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("sub_array")
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("md_array")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("i")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("main_len")
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Call("outer_md_loop", [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Parsed fn outer_md_loop(["md_array", "i", "main_len"]) [[If(Cmp(Var("i"), ">=", Var("main_len")), [Return(Some(Var("md_array")))], None), Expr(Infix(Var("sub_array"), '=', Slice(Var("md_array"), Some(Var("i")), None))), Expr(Call("sort_array", [Var("sub_array")])), Expr(Infix(Slice(Var("md_array"), Some(Var("i")), None), '=', Var("sub_array"))), Return(Some(Call("outer_md_loop", [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")])))]]
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("md_array")
[2025-10-10T02:31:57Z DEBUG astra] Parsing return statement
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("md_array")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("main_len")
[2025-10-10T02:31:57Z DEBUG astra] Parsed return statement: Return(Some(Call("outer_md_loop", [Var("md_array"), Num("0"), Var("main_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Parsed fn sort_multidim(["md_array"]) [[Expr(Infix(Var("main_len"), '=', Call("length", [Var("md_array")]))), Return(Some(Call("outer_md_loop", [Var("md_array"), Num("0"), Var("main_len")])))]]
[2025-10-10T02:31:57Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T02:31:57Z DEBUG astra] Parsed print statement: Print(Some("Original Data Array (now sorted in-place):"), [])
[2025-10-10T02:31:57Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T02:31:57Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Multi-Dimensional Array:"), [])
[2025-10-10T02:31:57Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T02:31:57Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange")]), Array([Str("car"), Str("train"), Str("bus")]), Array([Str("donkey"), Str("cat"), Str("mouse"), Str("dog"), Str("goldfish")])]))), Def("inner_loop_shift", ["arr", "key", "j"], [If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None), If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None), Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None))), Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))]), Def("outer_loop_sort", ["arr", "i", "arr_len"], [If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None))), Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]))), Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key"))), Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))]), Def("sort_array", ["arr"], [Return(Some(Call("outer_loop_sort", [Var("arr"), Num("1"), Call("length", [Var("arr")])])))]), Def("outer_md_loop", ["md_array", "i", "main_len"], [If(Cmp(Var("i"), ">=", Var("main_len")), [Return(Some(Var("md_array")))], None), Expr(Infix(Var("sub_array"), '=', Slice(Var("md_array"), Some(Var("i")), None))), Expr(Call("sort_array", [Var("sub_array")])), Expr(Infix(Slice(Var("md_array"), Some(Var("i")), None), '=', Var("sub_array"))), Return(Some(Call("outer_md_loop", [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")])))]), Def("sort_multidim", ["md_array"], [Expr(Infix(Var("main_len"), '=', Call("length", [Var("md_array")]))), Return(Some(Call("outer_md_loop", [Var("md_array"), Num("0"), Var("main_len")])))]), Expr(Infix(Var("sorted_data"), '=', Call("sort_multidim", [Var("data_array")]))), Print(Some("Original Data Array (now sorted in-place):"), []), Print(None, [Var("data_array")]), Print(Some("\nSorted Multi-Dimensional Array:"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange")]), Array([Str("car"), Str("train"), Str("bus")]), Array([Str("donkey"), Str("cat"), Str("mouse"), Str("dog"), Str("goldfish")])])))
Result: [[cherry, apple, mango, banana, orange], [car, train, bus], [donkey, cat, mouse, dog, goldfish]]

Executing Statement 2
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Def("inner_loop_shift", ["arr", "key", "j"], [If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None), If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None), Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None))), Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Def("outer_loop_sort", ["arr", "i", "arr_len"], [If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None))), Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]))), Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key"))), Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))])

Executing Statement 4
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Def("sort_array", ["arr"], [Return(Some(Call("outer_loop_sort", [Var("arr"), Num("1"), Call("length", [Var("arr")])])))])

Executing Statement 5
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Def("outer_md_loop", ["md_array", "i", "main_len"], [If(Cmp(Var("i"), ">=", Var("main_len")), [Return(Some(Var("md_array")))], None), Expr(Infix(Var("sub_array"), '=', Slice(Var("md_array"), Some(Var("i")), None))), Expr(Call("sort_array", [Var("sub_array")])), Expr(Infix(Slice(Var("md_array"), Some(Var("i")), None), '=', Var("sub_array"))), Return(Some(Call("outer_md_loop", [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")])))])

Executing Statement 6
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Def("sort_multidim", ["md_array"], [Expr(Infix(Var("main_len"), '=', Call("length", [Var("md_array")]))), Return(Some(Call("outer_md_loop", [Var("md_array"), Num("0"), Var("main_len")])))])

Executing Statement 7
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("sort_multidim", [Var("data_array")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'sort_multidim', args: [Var("data_array")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("main_len"), '=', Call("length", [Var("md_array")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'length', args: [Var("md_array")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_md_loop", [Var("md_array"), Num("0"), Var("main_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_md_loop', args: [Var("md_array"), Num("0"), Var("main_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("main_len")), [Return(Some(Var("md_array")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("sub_array"), '=', Slice(Var("md_array"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Call("sort_array", [Var("sub_array")]))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'sort_array', args: [Var("sub_array")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Num("1"), Call("length", [Var("arr")])])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Num("1"), Call("length", [Var("arr")])]
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("md_array"), Some(Var("i")), None), '=', Var("sub_array")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_md_loop", [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_md_loop', args: [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("main_len")), [Return(Some(Var("md_array")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("sub_array"), '=', Slice(Var("md_array"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Call("sort_array", [Var("sub_array")]))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'sort_array', args: [Var("sub_array")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Num("1"), Call("length", [Var("arr")])])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Num("1"), Call("length", [Var("arr")])]
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("md_array"), Some(Var("i")), None), '=', Var("sub_array")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_md_loop", [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_md_loop', args: [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("main_len")), [Return(Some(Var("md_array")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("sub_array"), '=', Slice(Var("md_array"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Call("sort_array", [Var("sub_array")]))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'sort_array', args: [Var("sub_array")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Num("1"), Call("length", [Var("arr")])])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Num("1"), Call("length", [Var("arr")])]
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j"), '+', Num("1"))), None), '=', Slice(Var("arr"), Some(Var("j")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("j"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("key"), '=', Slice(Var("arr"), Some(Var("i")), None)))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("j_final"), '=', Call("inner_loop_shift", [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'inner_loop_shift', args: [Var("arr"), Var("key"), Infix(Var("i"), '-', Num("1"))]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("j"), "<", Num("0")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("arr"), Some(Var("j")), None), "<=", Var("key")), [Return(Some(Var("j")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("j")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("arr"), Some(Infix(Var("j_final"), '+', Num("1"))), None), '=', Var("key")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_loop_sort", [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_loop_sort', args: [Var("arr"), Infix(Var("i"), '+', Num("1")), Var("arr_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("arr_len")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Expr(Infix(Slice(Var("md_array"), Some(Var("i")), None), '=', Var("sub_array")))
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Call("outer_md_loop", [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")])))
[2025-10-10T02:31:57Z DEBUG astra] Executing function 'outer_md_loop', args: [Var("md_array"), Infix(Var("i"), '+', Num("1")), Var("main_len")]
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: If(Cmp(Var("i"), ">=", Var("main_len")), [Return(Some(Var("md_array")))], None)
[2025-10-10T02:31:57Z DEBUG astra] Running statement in function: Return(Some(Var("md_array")))
Result: [[cherry, apple, mango, banana, orange], [car, train, bus], [donkey, cat, mouse, dog, goldfish]]

Executing Statement 8
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Print(Some("Original Data Array (now sorted in-place):"), [])
Output: Original Data Array (now sorted in-place):
Result: Original Data Array (now sorted in-place):

Executing Statement 9
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [[cherry, apple, mango, banana, orange], [car, train, bus], [donkey, cat, mouse, dog, goldfish]]
Result: [[cherry, apple, mango, banana, orange], [car, train, bus], [donkey, cat, mouse, dog, goldfish]]

Executing Statement 10
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Print(Some("\nSorted Multi-Dimensional Array:"), [])
Output: 
Sorted Multi-Dimensional Array:
Result: 
Sorted Multi-Dimensional Array:

Executing Statement 11
-----------------------
[2025-10-10T02:31:57Z DEBUG astra] Running statement: Print(None, [Var("sorted_data")])
Output: [[cherry, apple, mango, banana, orange], [car, train, bus], [donkey, cat, mouse, dog, goldfish]]
Result: [[cherry, apple, mango, banana, orange], [car, train, bus], [donkey, cat, mouse, dog, goldfish]]
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:33:33Z DEBUG astra] Parsing return statement
[2025-10-10T02:33:33Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:33:33Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:33:33Z DEBUG astra] Parsing return statement
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:33:33Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:33:33Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:33:33Z DEBUG astra] Parsing return statement
[2025-10-10T02:33:33Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:33:33Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T02:33:33Z DEBUG astra] Parsing return statement
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:33:33Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:33:33Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:33:33Z DEBUG astra] Parsing return statement
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:33:33Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:33:33Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:33:33Z DEBUG astra] Parsing return statement
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:33:33Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:33:33Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T02:33:33Z DEBUG astra] Parsing return statement
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:33:33Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Parsing return statement
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T02:33:33Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T02:33:33Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T02:33:33Z DEBUG astra] Parsing return statement
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T02:33:33Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:33:33Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T02:33:33Z DEBUG astra] Parsing return statement
[2025-10-10T02:33:33Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T02:33:33Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T02:33:33Z DEBUG astra] Parsing return statement
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T02:33:33Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:33:33Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T02:33:33Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T02:33:33Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T02:33:33Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T02:33:33Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T02:33:33Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T02:33:33Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T02:33:33Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")])))
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 2
-----------------------
[2025-10-10T02:33:33Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T02:33:33Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T02:33:33Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))])

Executing Statement 5
-----------------------
[2025-10-10T02:33:33Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T02:33:33Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T02:33:33Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T02:33:33Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 9
-----------------------
[2025-10-10T02:33:33Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T02:33:33Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T02:33:33Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]

Executing Statement 10
-----------------------
[2025-10-10T02:33:33Z DEBUG astra] Running statement: Print(Some("\nSorted Array (Merge Sort):"), [])
Output: 
Sorted Array (Merge Sort):
Result: 
Sorted Array (Merge Sort):

Executing Statement 11
-----------------------
[2025-10-10T02:33:33Z DEBUG astra] Running statement: Print(None, [Var("sorted_data")])
Output: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
--- Starting script execution from test.ast ---
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T02:33:50Z DEBUG astra] Parsing return statement
[2025-10-10T02:33:50Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T02:33:50Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T02:33:50Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T02:33:50Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T02:33:50Z DEBUG astra] Parsing return statement
[2025-10-10T02:33:50Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T02:33:50Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T02:33:50Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-10T02:33:50Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T02:33:50Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T02:33:50Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T02:33:50Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T02:33:50Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T02:33:50Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T02:33:50Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T02:33:50Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T02:33:50Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T02:33:50Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T02:33:50Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T02:33:50Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T02:33:50Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some(""), []), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T02:33:50Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T02:33:50Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T02:33:50Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T02:33:50Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T02:33:50Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T02:33:50Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T02:33:50Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T02:33:50Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T02:33:50Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T02:33:50Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T02:33:50Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-10T02:33:50Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 26
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 27
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 28
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 29
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 30
-----------------------
[2025-10-10T02:33:50Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T02:33:50Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T03:10:51Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:51Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:51Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T03:10:51Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T03:10:51Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:51Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:51Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:51Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T03:10:51Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T03:10:51Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T03:10:51Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:51Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:51Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T03:10:51Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T03:10:51Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:51Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:51Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:51Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T03:10:51Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T03:10:51Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:52Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T03:10:52Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T03:10:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:52Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T03:10:52Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T03:10:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T03:10:52Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:52Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:52Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T03:10:52Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T03:10:52Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T03:10:52Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:52Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T03:10:52Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:52Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T03:10:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T03:10:52Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T03:10:52Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:52Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T03:10:52Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T03:10:52Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T03:10:52Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T03:10:52Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T03:10:52Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T03:10:52Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T03:10:52Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")])))
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 2
-----------------------
[2025-10-10T03:10:52Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T03:10:52Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T03:10:52Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))])

Executing Statement 5
-----------------------
[2025-10-10T03:10:52Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T03:10:52Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T03:10:52Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T03:10:52Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 9
-----------------------
[2025-10-10T03:10:52Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:52Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:52Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]

Executing Statement 10
-----------------------
[2025-10-10T03:10:52Z DEBUG astra] Running statement: Print(Some("\nSorted Array (Merge Sort):"), [])
Output: 
Sorted Array (Merge Sort):
Result: 
Sorted Array (Merge Sort):

Executing Statement 11
-----------------------
[2025-10-10T03:10:52Z DEBUG astra] Running statement: Print(None, [Var("sorted_data")])
Output: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:55Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:55Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T03:10:55Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T03:10:55Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T03:10:55Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T03:10:55Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:55Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:55Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T03:10:55Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T03:10:55Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T03:10:55Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T03:10:55Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:55Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T03:10:55Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T03:10:55Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:55Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T03:10:55Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T03:10:55Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T03:10:55Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:55Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:55Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T03:10:55Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T03:10:55Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T03:10:55Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:55Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T03:10:55Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:55Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T03:10:55Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T03:10:55Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T03:10:55Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:55Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T03:10:55Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T03:10:55Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T03:10:55Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T03:10:55Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T03:10:55Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T03:10:55Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T03:10:55Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")])))
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 2
-----------------------
[2025-10-10T03:10:55Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T03:10:55Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T03:10:55Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))])

Executing Statement 5
-----------------------
[2025-10-10T03:10:55Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T03:10:55Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T03:10:55Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T03:10:55Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 9
-----------------------
[2025-10-10T03:10:55Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:55Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:55Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]

Executing Statement 10
-----------------------
[2025-10-10T03:10:55Z DEBUG astra] Running statement: Print(Some("\nSorted Array (Merge Sort):"), [])
Output: 
Sorted Array (Merge Sort):
Result: 
Sorted Array (Merge Sort):

Executing Statement 11
-----------------------
[2025-10-10T03:10:55Z DEBUG astra] Running statement: Print(None, [Var("sorted_data")])
Output: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:58Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:58Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T03:10:58Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T03:10:58Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T03:10:58Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T03:10:58Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:58Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:58Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T03:10:58Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T03:10:58Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T03:10:58Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T03:10:58Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:58Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T03:10:58Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T03:10:58Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:58Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T03:10:58Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T03:10:58Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T03:10:58Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:58Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T03:10:58Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T03:10:58Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T03:10:58Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T03:10:58Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:58Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T03:10:58Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:58Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T03:10:58Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T03:10:58Z DEBUG astra] Parsing return statement
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T03:10:58Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:58Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T03:10:58Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T03:10:58Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T03:10:58Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T03:10:58Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T03:10:58Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T03:10:58Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T03:10:58Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")])))
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 2
-----------------------
[2025-10-10T03:10:58Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T03:10:58Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T03:10:58Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))])

Executing Statement 5
-----------------------
[2025-10-10T03:10:58Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T03:10:58Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T03:10:58Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T03:10:58Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 9
-----------------------
[2025-10-10T03:10:58Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T03:10:58Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T03:10:58Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]

Executing Statement 10
-----------------------
[2025-10-10T03:10:58Z DEBUG astra] Running statement: Print(Some("\nSorted Array (Merge Sort):"), [])
Output: 
Sorted Array (Merge Sort):
Result: 
Sorted Array (Merge Sort):

Executing Statement 11
-----------------------
[2025-10-10T03:10:58Z DEBUG astra] Running statement: Print(None, [Var("sorted_data")])
Output: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:56:41Z DEBUG astra] Parsing return statement
[2025-10-10T06:56:41Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T06:56:41Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T06:56:41Z DEBUG astra] Parsing return statement
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:56:41Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:56:41Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:56:41Z DEBUG astra] Parsing return statement
[2025-10-10T06:56:41Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T06:56:41Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T06:56:41Z DEBUG astra] Parsing return statement
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:56:41Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:56:41Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:56:41Z DEBUG astra] Parsing return statement
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:56:41Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:56:41Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:56:41Z DEBUG astra] Parsing return statement
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:56:41Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:56:41Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T06:56:41Z DEBUG astra] Parsing return statement
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:56:41Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Parsing return statement
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:56:41Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T06:56:41Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T06:56:41Z DEBUG astra] Parsing return statement
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T06:56:41Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:56:41Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T06:56:41Z DEBUG astra] Parsing return statement
[2025-10-10T06:56:41Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T06:56:41Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T06:56:41Z DEBUG astra] Parsing return statement
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T06:56:41Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:56:41Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T06:56:41Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T06:56:41Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T06:56:41Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T06:56:41Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T06:56:41Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T06:56:41Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T06:56:41Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("cherry"), Str("apple"), Str("mango"), Str("banana"), Str("orange"), Str("grape"), Str("kiwi"), Str("lemon")])))
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 2
-----------------------
[2025-10-10T06:56:41Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T06:56:41Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T06:56:41Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))])

Executing Statement 5
-----------------------
[2025-10-10T06:56:41Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T06:56:41Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T06:56:41Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T06:56:41Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]
Result: [cherry, apple, mango, banana, orange, grape, kiwi, lemon]

Executing Statement 9
-----------------------
[2025-10-10T06:56:41Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:56:41Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:56:41Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]

Executing Statement 10
-----------------------
[2025-10-10T06:56:41Z DEBUG astra] Running statement: Print(Some("\nSorted Array (Merge Sort):"), [])
Output: 
Sorted Array (Merge Sort):
Result: 
Sorted Array (Merge Sort):

Executing Statement 11
-----------------------
[2025-10-10T06:56:41Z DEBUG astra] Running statement: Print(None, [Var("sorted_data")])
Output: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
Result: [apple, banana, cherry, grape, kiwi, lemon, mango, orange]
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:57:27Z DEBUG astra] Parsing return statement
[2025-10-10T06:57:27Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T06:57:27Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T06:57:27Z DEBUG astra] Parsing return statement
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:57:27Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:57:27Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:57:27Z DEBUG astra] Parsing return statement
[2025-10-10T06:57:27Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T06:57:27Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T06:57:27Z DEBUG astra] Parsing return statement
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:57:27Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:57:27Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:57:27Z DEBUG astra] Parsing return statement
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:57:27Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:57:27Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:57:27Z DEBUG astra] Parsing return statement
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:57:27Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:57:27Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T06:57:27Z DEBUG astra] Parsing return statement
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:57:27Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Parsing return statement
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:57:27Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T06:57:27Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T06:57:27Z DEBUG astra] Parsing return statement
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T06:57:27Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:57:27Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T06:57:27Z DEBUG astra] Parsing return statement
[2025-10-10T06:57:27Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T06:57:27Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T06:57:27Z DEBUG astra] Parsing return statement
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T06:57:27Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:57:27Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T06:57:27Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T06:57:27Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T06:57:27Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T06:57:27Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T06:57:27Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T06:57:27Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("a"), Str("language"), Str("myself"), Str("I"), Str("created"), Str("is"), Str("Astra"), Str("simple")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T06:57:27Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("a"), Str("language"), Str("myself"), Str("I"), Str("created"), Str("is"), Str("Astra"), Str("simple")])))
Result: [a, language, myself, I, created, is, Astra, simple]

Executing Statement 2
-----------------------
[2025-10-10T06:57:27Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T06:57:27Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T06:57:27Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))])

Executing Statement 5
-----------------------
[2025-10-10T06:57:27Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T06:57:27Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T06:57:27Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T06:57:27Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [a, language, myself, I, created, is, Astra, simple]
Result: [a, language, myself, I, created, is, Astra, simple]

Executing Statement 9
-----------------------
[2025-10-10T06:57:27Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:57:27Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:57:27Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: [Astra, I, a, created, is, language, myself, simple]

Executing Statement 10
-----------------------
[2025-10-10T06:57:27Z DEBUG astra] Running statement: Print(Some("\nSorted Array (Merge Sort):"), [])
Output: 
Sorted Array (Merge Sort):
Result: 
Sorted Array (Merge Sort):

Executing Statement 11
-----------------------
[2025-10-10T06:57:27Z DEBUG astra] Running statement: Print(None, [Var("sorted_data")])
Output: [Astra, I, a, created, is, language, myself, simple]
Result: [Astra, I, a, created, is, language, myself, simple]
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:09Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:09Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T06:58:09Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T06:58:09Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:58:09Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:58:09Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:09Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:09Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T06:58:09Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T06:58:09Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:58:09Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:58:09Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:09Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:58:09Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:58:09Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:09Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:58:09Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:58:09Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T06:58:09Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:09Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:58:09Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:09Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:09Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T06:58:09Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T06:58:09Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T06:58:09Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:09Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T06:58:09Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:09Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T06:58:09Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T06:58:09Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T06:58:09Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:09Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T06:58:09Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T06:58:09Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T06:58:09Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T06:58:09Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T06:58:09Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T06:58:09Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("Astra"), Str("a"), Str("language"), Str("like"), Str("no"), Str("other")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T06:58:09Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("Astra"), Str("a"), Str("language"), Str("like"), Str("no"), Str("other")])))
Result: [Astra, a, language, like, no, other]

Executing Statement 2
-----------------------
[2025-10-10T06:58:09Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T06:58:09Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T06:58:09Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))])

Executing Statement 5
-----------------------
[2025-10-10T06:58:09Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T06:58:09Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T06:58:09Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T06:58:09Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [Astra, a, language, like, no, other]
Result: [Astra, a, language, like, no, other]

Executing Statement 9
-----------------------
[2025-10-10T06:58:09Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:09Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:09Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: [Astra, a, language, like, no, other]

Executing Statement 10
-----------------------
[2025-10-10T06:58:09Z DEBUG astra] Running statement: Print(Some("\nSorted Array (Merge Sort):"), [])
Output: 
Sorted Array (Merge Sort):
Result: 
Sorted Array (Merge Sort):

Executing Statement 11
-----------------------
[2025-10-10T06:58:09Z DEBUG astra] Running statement: Print(None, [Var("sorted_data")])
Output: [Astra, a, language, like, no, other]
Result: [Astra, a, language, like, no, other]
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:53Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:53Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T06:58:53Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T06:58:53Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:58:53Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:58:53Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:53Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:53Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T06:58:53Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T06:58:53Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:58:53Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:58:53Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:53Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:58:53Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:58:53Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:53Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:58:53Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:58:53Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T06:58:53Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:53Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:58:53Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:53Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:53Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T06:58:53Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T06:58:53Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T06:58:53Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:53Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T06:58:53Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:53Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T06:58:53Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T06:58:53Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T06:58:53Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:53Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T06:58:53Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T06:58:53Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T06:58:53Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T06:58:53Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T06:58:53Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T06:58:53Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("no"), Str("other"), Str("language"), Str("like"), Str("a"), Str("Astra")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T06:58:53Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("no"), Str("other"), Str("language"), Str("like"), Str("a"), Str("Astra")])))
Result: [no, other, language, like, a, Astra]

Executing Statement 2
-----------------------
[2025-10-10T06:58:53Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T06:58:53Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T06:58:53Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))])

Executing Statement 5
-----------------------
[2025-10-10T06:58:53Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T06:58:53Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T06:58:53Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T06:58:53Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [no, other, language, like, a, Astra]
Result: [no, other, language, like, a, Astra]

Executing Statement 9
-----------------------
[2025-10-10T06:58:53Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:53Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:53Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: [Astra, a, language, like, no, other]

Executing Statement 10
-----------------------
[2025-10-10T06:58:53Z DEBUG astra] Running statement: Print(Some("\nSorted Array (Merge Sort):"), [])
Output: 
Sorted Array (Merge Sort):
Result: 
Sorted Array (Merge Sort):

Executing Statement 11
-----------------------
[2025-10-10T06:58:53Z DEBUG astra] Running statement: Print(None, [Var("sorted_data")])
Output: [Astra, a, language, like, no, other]
Result: [Astra, a, language, like, no, other]
--- Starting script execution from test_merge_sort.ast ---
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:56Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:56Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T06:58:56Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T06:58:56Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:58:56Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:58:56Z DEBUG astra] Parsed fn append_remaining_left(["result", "left_arr", "left_i"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]]
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:56Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:56Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T06:58:56Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Var("result")))], and else body None
[2025-10-10T06:58:56Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:58:56Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:58:56Z DEBUG astra] Parsed fn append_remaining_right(["result", "right_arr", "right_i"]) [[If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]]
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:56Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:58:56Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:58:56Z DEBUG astra] Parsed if statement with condition Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), if body [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], and else body None
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:56Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:58:56Z DEBUG astra] Parsed return statement: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:58:56Z DEBUG astra] Parsed if statement with condition Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), if body [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], and else body None
[2025-10-10T06:58:56Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:56Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:58:56Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("left_i")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("right_i")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("result")
[2025-10-10T06:58:56Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:56Z DEBUG astra] Parsed if statement with condition Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), if body [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], and else body Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))])
[2025-10-10T06:58:56Z DEBUG astra] Parsed fn recursive_merge_step(["left_arr", "left_i", "right_arr", "right_i", "result"]) [[If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]]
[2025-10-10T06:58:56Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("left_arr")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("right_arr")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Number("0")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Op('[')
[2025-10-10T06:58:56Z DEBUG astra] Parsed return statement: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:56Z DEBUG astra] Parsed fn merge(["left_arr", "right_arr"]) [[Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]]
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("arr")
[2025-10-10T06:58:56Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:56Z DEBUG astra] Parsed return statement: Return(Some(Var("arr")))
[2025-10-10T06:58:56Z DEBUG astra] Parsed if statement with condition Cmp(Var("arr_len"), "<=", Num("1")), if body [Return(Some(Var("arr")))], and else body None
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("left_half")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("right_half")
[2025-10-10T06:58:56Z DEBUG astra] Parsing return statement
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("sorted_left")
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("sorted_right")
[2025-10-10T06:58:56Z DEBUG astra] Parsed return statement: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:56Z DEBUG astra] Parsed fn merge_sort(["arr"]) [[Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]]
[2025-10-10T06:58:56Z DEBUG astra] Parsed print statement: Print(Some("Original Array:"), [])
[2025-10-10T06:58:56Z DEBUG astra] Parsed print statement: Print(None, [Var("data_array")])
[2025-10-10T06:58:56Z DEBUG astra] Parsing argument, current token: Ident("data_array")
[2025-10-10T06:58:56Z DEBUG astra] Parsed print statement: Print(Some("\nSorted Array (Merge Sort):"), [])
[2025-10-10T06:58:56Z DEBUG astra] Parsed print statement: Print(None, [Var("sorted_data")])
[2025-10-10T06:58:56Z DEBUG astra] Parsed statements: [Expr(Infix(Var("data_array"), '=', Array([Str("no"), Str("other"), Str("language"), Str("like"), Str("a"), Str("Astra")]))), Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))]), Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))]), Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))]), Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))]), Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))]), Print(Some("Original Array:"), []), Print(None, [Var("data_array")]), Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")]))), Print(Some("\nSorted Array (Merge Sort):"), []), Print(None, [Var("sorted_data")])]

Executing Statement 1
-----------------------
[2025-10-10T06:58:56Z DEBUG astra] Running statement: Expr(Infix(Var("data_array"), '=', Array([Str("no"), Str("other"), Str("language"), Str("like"), Str("a"), Str("Astra")])))
Result: [no, other, language, like, a, Astra]

Executing Statement 2
-----------------------
[2025-10-10T06:58:56Z DEBUG astra] Running statement: Def("append_remaining_left", ["result", "left_arr", "left_i"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))])

Executing Statement 3
-----------------------
[2025-10-10T06:58:56Z DEBUG astra] Running statement: Def("append_remaining_right", ["result", "right_arr", "right_i"], [If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None), Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))])

Executing Statement 4
-----------------------
[2025-10-10T06:58:56Z DEBUG astra] Running statement: Def("recursive_merge_step", ["left_arr", "left_i", "right_arr", "right_i", "result"], [If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None), If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None), If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))])

Executing Statement 5
-----------------------
[2025-10-10T06:58:56Z DEBUG astra] Running statement: Def("merge", ["left_arr", "right_arr"], [Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))])

Executing Statement 6
-----------------------
[2025-10-10T06:58:56Z DEBUG astra] Running statement: Def("merge_sort", ["arr"], [Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")]))), If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None), Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2")))), Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid"))))), Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len"))))), Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")]))), Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")]))), Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))])

Executing Statement 7
-----------------------
[2025-10-10T06:58:56Z DEBUG astra] Running statement: Print(Some("Original Array:"), [])
Output: Original Array:
Result: Original Array:

Executing Statement 8
-----------------------
[2025-10-10T06:58:56Z DEBUG astra] Running statement: Print(None, [Var("data_array")])
Output: [no, other, language, like, a, Astra]
Result: [no, other, language, like, a, Astra]

Executing Statement 9
-----------------------
[2025-10-10T06:58:56Z DEBUG astra] Running statement: Expr(Infix(Var("sorted_data"), '=', Call("merge_sort", [Var("data_array")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'merge_sort', args: [Var("data_array")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Var("right_i")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'append_remaining_right', args: [Var("result"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1"))]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("mid"), '=', Infix(Var("arr_len"), '/', Num("2"))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("left_half"), '=', Slice(Var("arr"), Some(Num("0")), Some(Var("mid")))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("right_half"), '=', Slice(Var("arr"), Some(Var("mid")), Some(Var("arr_len")))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_left"), '=', Call("merge_sort", [Var("left_half")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'merge_sort', args: [Var("left_half")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("sorted_right"), '=', Call("merge_sort", [Var("right_half")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'merge_sort', args: [Var("right_half")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("arr_len"), '=', Call("length", [Var("arr")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("arr_len"), "<=", Num("1")), [Return(Some(Var("arr")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Var("arr")))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("merge", [Var("sorted_left"), Var("sorted_right")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'merge', args: [Var("sorted_left"), Var("sorted_right")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Num("0"), Var("right_arr"), Num("0"), Array([])]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Slice(Var("left_arr"), Some(Var("left_i")), None), "<=", Slice(Var("right_arr"), Some(Var("right_i")), None)), [Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Infix(Var("left_i"), '+', Num("1")), Var("right_arr"), Var("right_i"), Var("result")])))], Some([Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)])))), Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))]))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("right_arr"), Some(Var("right_i")), None)]))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("recursive_merge_step", [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'recursive_merge_step', args: [Var("left_arr"), Var("left_i"), Var("right_arr"), Infix(Var("right_i"), '+', Num("1")), Var("result")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Call("append_remaining_right", [Var("result"), Var("right_arr"), Var("right_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("right_i"), ">=", Call("length", [Var("right_arr")])), [Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("right_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Var("left_i")])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Var("left_i")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Var("result"), '+', Array([Slice(Var("left_arr"), Some(Var("left_i")), None)]))))
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Call("append_remaining_left", [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))])))
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'append_remaining_left', args: [Var("result"), Var("left_arr"), Infix(Var("left_i"), '+', Num("1"))]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: If(Cmp(Var("left_i"), ">=", Call("length", [Var("left_arr")])), [Return(Some(Var("result")))], None)
[2025-10-10T06:58:56Z DEBUG astra] Executing function 'length', args: [Var("left_arr")]
[2025-10-10T06:58:56Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: [Astra, a, language, like, no, other]

Executing Statement 10
-----------------------
[2025-10-10T06:58:56Z DEBUG astra] Running statement: Print(Some("\nSorted Array (Merge Sort):"), [])
Output: 
Sorted Array (Merge Sort):
Result: 
Sorted Array (Merge Sort):

Executing Statement 11
-----------------------
[2025-10-10T06:58:56Z DEBUG astra] Running statement: Print(None, [Var("sorted_data")])
Output: [Astra, a, language, like, no, other]
Result: [Astra, a, language, like, no, other]
--- Starting script execution from test.ast ---
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T06:59:21Z DEBUG astra] Parsing return statement
[2025-10-10T06:59:21Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T06:59:21Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T06:59:21Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T06:59:21Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T06:59:21Z DEBUG astra] Parsing return statement
[2025-10-10T06:59:21Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T06:59:21Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T06:59:21Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-10T06:59:21Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T06:59:21Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T06:59:21Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T06:59:21Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T06:59:21Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T06:59:21Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T06:59:21Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T06:59:21Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T06:59:21Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T06:59:21Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T06:59:21Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T06:59:21Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T06:59:21Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some(""), []), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T06:59:21Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T06:59:21Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T06:59:21Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T06:59:21Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T06:59:21Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T06:59:21Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T06:59:21Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T06:59:21Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T06:59:21Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T06:59:21Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T06:59:21Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-10T06:59:21Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 26
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 27
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 28
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 29
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 30
-----------------------
[2025-10-10T06:59:21Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T06:59:21Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T06:59:57Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T06:59:57Z DEBUG astra] Parsing return statement
[2025-10-10T06:59:57Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T06:59:57Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T06:59:57Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T06:59:57Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T06:59:57Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T06:59:57Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T06:59:57Z DEBUG astra] Parsing return statement
[2025-10-10T06:59:57Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T06:59:57Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T06:59:57Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T06:59:57Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
Parsing Error: Expected '(' after 'print', found Ident("divide")
--- Starting script execution from test.ast ---
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:00:02Z DEBUG astra] Parsing return statement
[2025-10-10T07:00:02Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:00:02Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:00:02Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:00:02Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:00:02Z DEBUG astra] Parsing return statement
[2025-10-10T07:00:02Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:00:02Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:00:02Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(None, [])
[2025-10-10T07:00:02Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:00:02Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:00:02Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:00:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:00:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:00:02Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:00:02Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:00:02Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:00:02Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:00:02Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:00:02Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:00:02Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:00:02Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Print(None, []), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some(""), []), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:00:02Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:00:02Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:00:02Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:00:02Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:00:02Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:00:02Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:00:02Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:00:02Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:00:02Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:00:02Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
-----------------------
[2025-10-10T07:00:02Z DEBUG astra] Running statement: Print(None, [])
Runtime Error (Statement 7): Simple print (without format string) expects exactly one argument
--- Starting script execution from test.ast ---
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:00:11Z DEBUG astra] Parsing return statement
[2025-10-10T07:00:11Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:00:11Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:00:11Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:00:11Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:00:11Z DEBUG astra] Parsing return statement
[2025-10-10T07:00:11Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:00:11Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:00:11Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(None, [Num("0")])
[2025-10-10T07:00:11Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:00:11Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:00:11Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:00:11Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:00:11Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:00:11Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:00:11Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:00:11Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:00:11Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:00:11Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:00:11Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:00:11Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:00:11Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Print(None, [Num("0")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some(""), []), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:00:11Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:00:11Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:00:11Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:00:11Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Print(None, [Num("0")])
Output: 0
Result: 0

Executing Statement 8
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:00:11Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:00:11Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:00:11Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 9
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:00:11Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:00:11Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 10
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:00:11Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:00:11Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-10T07:00:11Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 11
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 12
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 13
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 14
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 15
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 16
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 17
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 18
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 19
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 20
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 21
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 22
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 23
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 24
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 25
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 26
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 27
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 28
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 29
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 30
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 31
-----------------------
[2025-10-10T07:00:11Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:00:11Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:00:15Z DEBUG astra] Parsing return statement
[2025-10-10T07:00:15Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:00:15Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:00:15Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:00:15Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:00:15Z DEBUG astra] Parsing return statement
[2025-10-10T07:00:15Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:00:15Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:00:15Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-10T07:00:15Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:00:15Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:00:15Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:00:15Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:00:15Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:00:15Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:00:15Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:00:15Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:00:15Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:00:15Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:00:15Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:00:15Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:00:15Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Print(Some(""), []), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some(""), []), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:00:15Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:00:15Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:00:15Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:00:15Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 8
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:00:15Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:00:15Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:00:15Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 9
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:00:15Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:00:15Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 10
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:00:15Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:00:15Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-10T07:00:15Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 11
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 12
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 13
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 14
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 15
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 16
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 17
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 18
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 19
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 20
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 21
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 22
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 23
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 24
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 25
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 26
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 27
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 28
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 29
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 30
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 31
-----------------------
[2025-10-10T07:00:15Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:00:15Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:00:21Z DEBUG astra] Parsing return statement
[2025-10-10T07:00:21Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:00:21Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:00:21Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:00:21Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:00:21Z DEBUG astra] Parsing return statement
[2025-10-10T07:00:21Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:00:21Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:00:21Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-10T07:00:21Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:00:21Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:00:21Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:00:21Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:00:21Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:00:21Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:00:21Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:00:21Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:00:21Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:00:21Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:00:21Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:00:21Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:00:21Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Print(Some(""), []), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some(""), []), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:00:21Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:00:21Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:00:21Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:00:21Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 8
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:00:21Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:00:21Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:00:21Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 9
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:00:21Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:00:21Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 10
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:00:21Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:00:21Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-10T07:00:21Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 11
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 12
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 13
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 14
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 15
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 16
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 17
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 18
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 19
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 20
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 21
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 22
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 23
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 24
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 25
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 26
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 27
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 28
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 29
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 30
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 31
-----------------------
[2025-10-10T07:00:21Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:00:21Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:09:42Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:09:42Z DEBUG astra] Parsing return statement
[2025-10-10T07:09:42Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:09:42Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:09:42Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:09:42Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:09:42Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:09:42Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:09:42Z DEBUG astra] Parsing return statement
[2025-10-10T07:09:42Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:09:42Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:09:42Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:09:42Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
Parsing Error: Expected '(' after 'print', found StringLiteral("\n")
--- Starting script execution from test.ast ---
[2025-10-10T07:09:52Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:09:52Z DEBUG astra] Parsing return statement
[2025-10-10T07:09:52Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:09:52Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:09:52Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:09:52Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:09:52Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:09:52Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:09:52Z DEBUG astra] Parsing return statement
[2025-10-10T07:09:52Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:09:52Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:09:52Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:09:52Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-10T07:09:52Z DEBUG astra] Parsed print statement: Print(Some("\n"), [])
[2025-10-10T07:09:52Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:09:52Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:09:52Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:09:52Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:09:52Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:09:52Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:09:52Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:09:52Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:09:52Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:09:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:09:52Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:09:52Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:09:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:09:52Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:09:52Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:09:52Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:09:52Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:09:52Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:09:52Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:09:53Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:09:53Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:09:53Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:09:53Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-10T07:09:53Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:09:53Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:09:53Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:09:53Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:09:53Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:09:53Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:09:53Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:09:53Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Print(Some("\n"), []), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some(""), []), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:09:53Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:09:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:09:53Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:09:53Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Print(Some("\n"), [])
Output: 

Result: 


Executing Statement 8
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:09:53Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:09:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:09:53Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 9
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:09:53Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:09:53Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 10
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:09:53Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:09:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-10T07:09:53Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 11
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 12
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 13
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 14
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 15
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 16
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 17
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 18
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 19
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 20
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 21
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 22
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 23
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 24
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 25
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 26
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 27
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 28
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 29
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 30
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 31
-----------------------
[2025-10-10T07:09:53Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:09:53Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:10:10Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:10:10Z DEBUG astra] Parsing return statement
[2025-10-10T07:10:10Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:10:10Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:10:10Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:10:10Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:10:10Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:10:10Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:10:10Z DEBUG astra] Parsing return statement
[2025-10-10T07:10:10Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:10:10Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:10:10Z DEBUG astra] Parsing argument, current token: Number("177")
Parsing Error: Expected closing ')' after print arguments, found Op('\\')
--- Starting script execution from test.ast ---
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:10:25Z DEBUG astra] Parsing return statement
[2025-10-10T07:10:25Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:10:25Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:10:25Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:10:25Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:10:25Z DEBUG astra] Parsing return statement
[2025-10-10T07:10:25Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:10:25Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:10:25Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("{}\n"), [Var("a")])
[2025-10-10T07:10:25Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:10:25Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:10:25Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:10:25Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:10:25Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:10:25Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:10:25Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:10:25Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:10:25Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:10:25Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:10:25Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:10:25Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:10:25Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(Some("{}\n"), [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some(""), []), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:10:25Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:10:25Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:10:25Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:10:25Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Print(Some("{}\n"), [Var("a")])
Output: 3385

Result: 3385


Executing Statement 7
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:10:25Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:10:25Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:10:25Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:10:25Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:10:25Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:10:25Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:10:25Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-10T07:10:25Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 26
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 27
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 28
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 29
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 30
-----------------------
[2025-10-10T07:10:25Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:10:25Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:10:47Z DEBUG astra] Parsing return statement
[2025-10-10T07:10:47Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:10:47Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:10:47Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:10:47Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:10:47Z DEBUG astra] Parsing return statement
[2025-10-10T07:10:47Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:10:47Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:10:47Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("Boo! {}\n"), [Var("a")])
[2025-10-10T07:10:47Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:10:47Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:10:47Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:10:47Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:10:47Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:10:47Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:10:47Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:10:47Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:10:47Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:10:47Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:10:47Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:10:47Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:10:47Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(Some("Boo! {}\n"), [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some(""), []), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:10:47Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:10:47Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:10:47Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:10:47Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Print(Some("Boo! {}\n"), [Var("a")])
Output: Boo! 3385

Result: Boo! 3385


Executing Statement 7
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:10:47Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:10:47Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:10:47Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:10:47Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:10:47Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:10:47Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:10:47Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-10T07:10:47Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 26
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 27
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 28
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 29
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 30
-----------------------
[2025-10-10T07:10:47Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:10:47Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:18:27Z DEBUG astra] Parsing return statement
[2025-10-10T07:18:27Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:18:27Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:18:27Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:18:27Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:18:27Z DEBUG astra] Parsing return statement
[2025-10-10T07:18:27Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:18:27Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:18:27Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("Boo! {}\n"), [Var("a")])
[2025-10-10T07:18:27Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:18:27Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:18:27Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:18:27Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:18:27Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:18:27Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:18:27Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:18:27Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:18:27Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:18:27Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:18:27Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:18:27Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:18:27Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(Some("Boo! {}\n"), [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(None, [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some(""), []), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:18:27Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:18:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:18:27Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:18:27Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Print(Some("Boo! {}\n"), [Var("a")])
Output: Boo! 3385

Result: Boo! 3385


Executing Statement 7
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:18:27Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:18:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:18:27Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:18:27Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:18:27Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:18:27Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:18:27Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-10T07:18:27Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!
Result: I work!

Executing Statement 10
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 26
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 27
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 28
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 29
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 30
-----------------------
[2025-10-10T07:18:27Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:18:27Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:18:51Z DEBUG astra] Parsing return statement
[2025-10-10T07:18:51Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:18:51Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:18:51Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:18:51Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:18:51Z DEBUG astra] Parsing return statement
[2025-10-10T07:18:51Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:18:51Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:18:51Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("Boo! {}\n"), [Var("a")])
[2025-10-10T07:18:51Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:18:51Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:18:51Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("{}b"), [Call("returns_a_string", [])])
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:18:51Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:18:51Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:18:51Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:18:51Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:18:51Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:18:51Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:18:51Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:18:51Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:18:51Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:18:51Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(Some("Boo! {}\n"), [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(Some("{}b"), [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some(""), []), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:18:51Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:18:51Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:18:51Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:18:51Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Print(Some("Boo! {}\n"), [Var("a")])
Output: Boo! 3385

Result: Boo! 3385


Executing Statement 7
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:18:51Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:18:51Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:18:51Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:18:51Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:18:51Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Print(Some("{}b"), [Call("returns_a_string", [])])
[2025-10-10T07:18:51Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:18:51Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-10T07:18:51Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!b
Result: I work!b

Executing Statement 10
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 26
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 27
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 28
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 29
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 30
-----------------------
[2025-10-10T07:18:51Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:18:51Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:18:57Z DEBUG astra] Parsing return statement
[2025-10-10T07:18:57Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:18:57Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:18:57Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:18:57Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:18:57Z DEBUG astra] Parsing return statement
[2025-10-10T07:18:57Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:18:57Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:18:57Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("Boo! {}\n"), [Var("a")])
[2025-10-10T07:18:57Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:18:57Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:18:57Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("{}b"), [Call("returns_a_string", [])])
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:18:57Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:18:57Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:18:57Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:18:57Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:18:57Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:18:57Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:18:57Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:18:57Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:18:57Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:18:57Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(Some("Boo! {}\n"), [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(Some("{}b"), [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some(""), []), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:18:57Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:18:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:18:57Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:18:57Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Print(Some("Boo! {}\n"), [Var("a")])
Output: Boo! 3385

Result: Boo! 3385


Executing Statement 7
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:18:57Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:18:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:18:57Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:18:57Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:18:57Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Print(Some("{}b"), [Call("returns_a_string", [])])
[2025-10-10T07:18:57Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:18:57Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-10T07:18:57Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!b
Result: I work!b

Executing Statement 10
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 26
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 27
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 28
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 29
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 30
-----------------------
[2025-10-10T07:18:57Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:18:57Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:19:59Z DEBUG astra] Parsing return statement
[2025-10-10T07:19:59Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:19:59Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:19:59Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:19:59Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:19:59Z DEBUG astra] Parsing return statement
[2025-10-10T07:19:59Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:19:59Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:19:59Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("Boo! {}\n"), [Var("a")])
[2025-10-10T07:19:59Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:19:59Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:19:59Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("{}\n"), [Call("returns_a_string", [])])
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:19:59Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:19:59Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:19:59Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:19:59Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:19:59Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:19:59Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:19:59Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:19:59Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:19:59Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:19:59Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(Some("Boo! {}\n"), [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(Some("{}\n"), [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some(""), []), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:19:59Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:19:59Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:19:59Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:19:59Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Print(Some("Boo! {}\n"), [Var("a")])
Output: Boo! 3385

Result: Boo! 3385


Executing Statement 7
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:19:59Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:19:59Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:19:59Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:19:59Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:19:59Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Print(Some("{}\n"), [Call("returns_a_string", [])])
[2025-10-10T07:19:59Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:19:59Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-10T07:19:59Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!

Result: I work!


Executing Statement 10
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 12
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 26
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 27
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 28
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 29
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 30
-----------------------
[2025-10-10T07:19:59Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:19:59Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:20:11Z DEBUG astra] Parsing return statement
[2025-10-10T07:20:11Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:20:11Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:20:11Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:20:11Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:20:11Z DEBUG astra] Parsing return statement
[2025-10-10T07:20:11Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:20:11Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:20:11Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("Boo! {}\n"), [Var("a")])
[2025-10-10T07:20:11Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:20:11Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:20:11Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("{}\n"), [Call("returns_a_string", [])])
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("{}\n"), [Var("b")])
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:20:11Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:20:11Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:20:11Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:20:11Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:20:11Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:20:11Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some(""), [])
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:20:11Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:20:11Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:20:11Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:20:11Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(Some("Boo! {}\n"), [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(Some("{}\n"), [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(Some("{}\n"), [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some(""), []), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:20:11Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:20:11Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:20:11Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:20:11Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Print(Some("Boo! {}\n"), [Var("a")])
Output: Boo! 3385

Result: Boo! 3385


Executing Statement 7
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:20:11Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:20:11Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:20:11Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:20:11Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:20:11Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Print(Some("{}\n"), [Call("returns_a_string", [])])
[2025-10-10T07:20:11Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:20:11Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-10T07:20:11Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!

Result: I work!


Executing Statement 10
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Print(Some("{}\n"), [Var("b")])
Output: 2

Result: 2


Executing Statement 12
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 14
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 16
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 17
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 18
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 19
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 20
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 21
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 22
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 23
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 24
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 25
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Print(Some(""), [])
Output: 

Executing Statement 26
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 27
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 28
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 29
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 30
-----------------------
[2025-10-10T07:20:11Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:20:11Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:21:36Z DEBUG astra] Parsing return statement
[2025-10-10T07:21:36Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:21:36Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:21:36Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:21:36Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:21:36Z DEBUG astra] Parsing return statement
[2025-10-10T07:21:36Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:21:36Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:21:36Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("Boo! {}\n"), [Var("a")])
[2025-10-10T07:21:36Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:21:36Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:21:36Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("{}\n"), [Call("returns_a_string", [])])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("{}\n"), [Var("b")])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("{}\n"), [Var("d")])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("----------------------------------------\n"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:21:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("----------------------------------------\n"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("----------------------------------------\n"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("----------------------------------------\n"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:21:36Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("----------------------------------------\n"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("----------------------------------------\n"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:21:36Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("----------------------------------------\n"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:21:36Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:21:36Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(Some("Boo! {}\n"), [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(Some("{}\n"), [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(Some("{}\n"), [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(Some("{}\n"), [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Print(Some("----------------------------------------\n"), []), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Print(Some("----------------------------------------\n"), []), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), Print(Some("----------------------------------------\n"), []), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), Print(Some("----------------------------------------\n"), []), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), Print(Some("----------------------------------------\n"), []), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Print(Some("----------------------------------------\n"), []), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Print(Some("----------------------------------------\n"), []), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:21:36Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:21:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:21:36Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:21:36Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("Boo! {}\n"), [Var("a")])
Output: Boo! 3385

Result: Boo! 3385


Executing Statement 7
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:21:36Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:21:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:21:36Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:21:36Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:21:36Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("{}\n"), [Call("returns_a_string", [])])
[2025-10-10T07:21:36Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:21:36Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-10T07:21:36Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!

Result: I work!


Executing Statement 10
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("{}\n"), [Var("b")])
Output: 2

Result: 2


Executing Statement 12
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("{}\n"), [Var("d")])
Output: 637

Result: 637


Executing Statement 14
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("----------------------------------------\n"), [])
Output: ----------------------------------------

Result: ----------------------------------------


Executing Statement 16
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 17
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 18
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("----------------------------------------\n"), [])
Output: ----------------------------------------

Result: ----------------------------------------


Executing Statement 19
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 20
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 21
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 22
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("----------------------------------------\n"), [])
Output: ----------------------------------------

Result: ----------------------------------------


Executing Statement 23
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 24
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("----------------------------------------\n"), [])
Output: ----------------------------------------

Result: ----------------------------------------


Executing Statement 25
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 26
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("----------------------------------------\n"), [])
Output: ----------------------------------------

Result: ----------------------------------------


Executing Statement 27
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 28
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("----------------------------------------\n"), [])
Output: ----------------------------------------

Result: ----------------------------------------


Executing Statement 29
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 30
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 31
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 32
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 33
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("----------------------------------------\n"), [])
Output: ----------------------------------------

Result: ----------------------------------------


Executing Statement 34
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 35
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 36
-----------------------
[2025-10-10T07:21:36Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:21:36Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:21:55Z DEBUG astra] Parsing return statement
[2025-10-10T07:21:55Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:21:55Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:21:55Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:21:55Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:21:55Z DEBUG astra] Parsing return statement
[2025-10-10T07:21:55Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:21:55Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:21:55Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("Boo! {}\n"), [Var("a")])
[2025-10-10T07:21:55Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:21:55Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:21:55Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("{}\n"), [Call("returns_a_string", [])])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("{}\n"), [Var("b")])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("{}\n"), [Var("d")])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("----------------------------------------\n"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:21:55Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("----------------------------------------\n"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("----------------------------------------\n"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("----------------------------------------\n"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:21:55Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("----------------------------------------\n"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("----------------------------------------\n"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:21:55Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:21:55Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:21:55Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(Some("Boo! {}\n"), [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(Some("{}\n"), [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(Some("{}\n"), [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(Some("{}\n"), [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Print(Some("----------------------------------------\n"), []), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Print(Some("----------------------------------------\n"), []), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), Print(Some("----------------------------------------\n"), []), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), Print(Some("----------------------------------------\n"), []), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), Print(Some("----------------------------------------\n"), []), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Print(Some("----------------------------------------\n"), []), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:21:55Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:21:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:21:55Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:21:55Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("Boo! {}\n"), [Var("a")])
Output: Boo! 3385

Result: Boo! 3385


Executing Statement 7
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:21:55Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:21:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:21:55Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:21:55Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:21:55Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("{}\n"), [Call("returns_a_string", [])])
[2025-10-10T07:21:55Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:21:55Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-10T07:21:55Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!

Result: I work!


Executing Statement 10
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("{}\n"), [Var("b")])
Output: 2

Result: 2


Executing Statement 12
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("{}\n"), [Var("d")])
Output: 637

Result: 637


Executing Statement 14
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("----------------------------------------\n"), [])
Output: ----------------------------------------

Result: ----------------------------------------


Executing Statement 16
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 17
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 18
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("----------------------------------------\n"), [])
Output: ----------------------------------------

Result: ----------------------------------------


Executing Statement 19
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 20
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 21
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 22
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("----------------------------------------\n"), [])
Output: ----------------------------------------

Result: ----------------------------------------


Executing Statement 23
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 24
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("----------------------------------------\n"), [])
Output: ----------------------------------------

Result: ----------------------------------------


Executing Statement 25
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 26
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("----------------------------------------\n"), [])
Output: ----------------------------------------

Result: ----------------------------------------


Executing Statement 27
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 28
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("----------------------------------------\n"), [])
Output: ----------------------------------------

Result: ----------------------------------------


Executing Statement 29
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 30
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 31
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 32
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 33
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 34
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 35
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 36
-----------------------
[2025-10-10T07:21:55Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:21:55Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:22:25Z DEBUG astra] Parsing return statement
[2025-10-10T07:22:25Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:22:25Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:22:25Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:22:25Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:22:25Z DEBUG astra] Parsing return statement
[2025-10-10T07:22:25Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:22:25Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:22:25Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("Boo! {}\n"), [Var("a")])
[2025-10-10T07:22:25Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:22:25Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:22:25Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("{}\n"), [Call("returns_a_string", [])])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("{}\n"), [Var("b")])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("{}\n"), [Var("d")])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:22:25Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:22:25Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:22:25Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:22:25Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:22:25Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(Some("Boo! {}\n"), [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(Some("{}\n"), [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(Some("{}\n"), [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(Some("{}\n"), [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), Print(Some("\n----------------------------------------\n"), []), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), Print(Some("\n----------------------------------------\n"), []), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), Print(Some("\n----------------------------------------\n"), []), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I work!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:22:25Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:22:25Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:22:25Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:22:25Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("Boo! {}\n"), [Var("a")])
Output: Boo! 3385

Result: Boo! 3385


Executing Statement 7
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:22:25Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:22:25Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:22:25Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:22:25Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:22:25Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("{}\n"), [Call("returns_a_string", [])])
[2025-10-10T07:22:25Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:22:25Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I work!")))
[2025-10-10T07:22:25Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I work!

Result: I work!


Executing Statement 10
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("{}\n"), [Var("b")])
Output: 2

Result: 2


Executing Statement 12
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("{}\n"), [Var("d")])
Output: 637

Result: 637


Executing Statement 14
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 16
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 17
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 18
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 19
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 20
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 21
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 22
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 23
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 24
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 25
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 26
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 27
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 28
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 29
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 30
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 31
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 32
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 33
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 34
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 35
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 36
-----------------------
[2025-10-10T07:22:25Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:22:25Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:22:58Z DEBUG astra] Parsing return statement
[2025-10-10T07:22:58Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:22:58Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:22:58Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:22:58Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:22:58Z DEBUG astra] Parsing return statement
[2025-10-10T07:22:58Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:22:58Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:22:58Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("Boo! {}\n"), [Var("a")])
[2025-10-10T07:22:58Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:22:58Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:22:58Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("{}\n"), [Call("returns_a_string", [])])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("{}\n"), [Var("b")])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("{}\n"), [Var("d")])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:22:58Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:22:58Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:22:58Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:22:58Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:22:58Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(Some("Boo! {}\n"), [Var("a")]), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(Some("{}\n"), [Call("returns_a_string", [])]), Expr(Infix(Var("b"), '=', Num("2"))), Print(Some("{}\n"), [Var("b")]), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(Some("{}\n"), [Var("d")]), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), Print(Some("\n----------------------------------------\n"), []), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), Print(Some("\n----------------------------------------\n"), []), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), Print(Some("\n----------------------------------------\n"), []), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:22:58Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:22:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:22:58Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:22:58Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("Boo! {}\n"), [Var("a")])
Output: Boo! 3385

Result: Boo! 3385


Executing Statement 7
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:22:58Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:22:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:22:58Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 8
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:22:58Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:22:58Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 9
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("{}\n"), [Call("returns_a_string", [])])
[2025-10-10T07:22:58Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:22:58Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!")))
[2025-10-10T07:22:58Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I'm coming from a function!

Result: I'm coming from a function!


Executing Statement 10
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 11
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("{}\n"), [Var("b")])
Output: 2

Result: 2


Executing Statement 12
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 13
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("{}\n"), [Var("d")])
Output: 637

Result: 637


Executing Statement 14
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 15
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 16
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 17
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 18
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 19
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 20
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 21
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 22
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 23
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 24
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 25
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 26
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 27
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 28
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 29
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 30
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 31
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 32
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 33
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 34
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 35
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 36
-----------------------
[2025-10-10T07:22:58Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:22:58Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:24:04Z DEBUG astra] Parsing return statement
[2025-10-10T07:24:04Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:24:04Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:24:04Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:24:04Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:24:04Z DEBUG astra] Parsing return statement
[2025-10-10T07:24:04Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:24:04Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:24:04Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:24:04Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:24:04Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:24:04Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:24:04Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:24:04Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:24:04Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:24:04Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Print(Some("\n----------------------------------------\n"), []), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(Some("\n----------------------------------------\n"), []), Print(None, [Call("returns_a_string", [])]), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(Some("\n----------------------------------------\n"), []), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), Print(Some("\n----------------------------------------\n"), []), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), Print(Some("\n----------------------------------------\n"), []), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), Print(Some("\n----------------------------------------\n"), []), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:24:04Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:24:04Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:24:04Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:24:04Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 8
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:24:04Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:24:04Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:24:04Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 9
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:24:04Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:24:04Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 10
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 11
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:24:04Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:24:04Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!")))
[2025-10-10T07:24:04Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I'm coming from a function!
Result: I'm coming from a function!

Executing Statement 12
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 13
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 14
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 15
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 16
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 17
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 18
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 19
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 20
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 21
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 22
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 23
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 24
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 25
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 26
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 27
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 28
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 29
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 30
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 31
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 32
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 33
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 34
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 35
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 36
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 37
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 38
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 39
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 40
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 41
-----------------------
[2025-10-10T07:24:04Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:24:04Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:24:53Z DEBUG astra] Parsing return statement
[2025-10-10T07:24:53Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:24:53Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:24:53Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:24:53Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:24:53Z DEBUG astra] Parsing return statement
[2025-10-10T07:24:53Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:24:53Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:24:53Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:24:53Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:24:53Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:24:53Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:24:53Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("Is dog < cat?"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:24:53Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:24:53Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:24:53Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Print(Some("\n----------------------------------------\n"), []), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(Some("\n----------------------------------------\n"), []), Print(None, [Call("returns_a_string", [])]), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(Some("\n----------------------------------------\n"), []), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), Print(Some("\n----------------------------------------\n"), []), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), Print(Some("\n----------------------------------------\n"), []), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is dog < cat?"), []), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:24:53Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:24:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:24:53Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:24:53Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 8
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:24:53Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:24:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:24:53Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 9
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:24:53Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:24:53Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 10
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 11
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:24:53Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:24:53Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!")))
[2025-10-10T07:24:53Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I'm coming from a function!
Result: I'm coming from a function!

Executing Statement 12
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 13
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 14
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 15
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 16
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 17
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 18
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 19
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 20
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 21
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 22
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 23
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 24
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 25
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 26
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 27
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 28
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 29
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 30
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 31
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 32
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("Is dog < cat?"), [])
Output: Is dog < cat?
Result: Is dog < cat?

Executing Statement 33
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 34
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 35
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 36
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 37
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 38
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 39
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 40
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 41
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 42
-----------------------
[2025-10-10T07:24:53Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:24:53Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:25:05Z DEBUG astra] Parsing return statement
[2025-10-10T07:25:05Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:25:05Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:25:05Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:25:05Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:25:05Z DEBUG astra] Parsing return statement
[2025-10-10T07:25:05Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:25:05Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:25:05Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:25:05Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:25:05Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:25:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("Is 1 equal to 1?"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:25:05Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("Is dog < cat?"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:25:05Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:25:05Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:25:05Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Print(Some("\n----------------------------------------\n"), []), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(Some("\n----------------------------------------\n"), []), Print(None, [Call("returns_a_string", [])]), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(Some("\n----------------------------------------\n"), []), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), Print(Some("\n----------------------------------------\n"), []), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is 1 equal to 1?"), []), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is dog < cat?"), []), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:25:05Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:25:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:25:05Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:25:05Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 8
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:25:05Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:25:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:25:05Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 9
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:25:05Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:25:05Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 10
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 11
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:25:05Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:25:05Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!")))
[2025-10-10T07:25:05Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I'm coming from a function!
Result: I'm coming from a function!

Executing Statement 12
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 13
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 14
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 15
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 16
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 17
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 18
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 19
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 20
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 21
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 22
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 23
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 24
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 25
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 26
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 27
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 28
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 29
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 30
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("Is 1 equal to 1?"), [])
Output: Is 1 equal to 1?
Result: Is 1 equal to 1?

Executing Statement 31
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 32
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 33
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("Is dog < cat?"), [])
Output: Is dog < cat?
Result: Is dog < cat?

Executing Statement 34
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 35
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 36
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 37
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 38
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 39
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 40
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 41
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 42
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 43
-----------------------
[2025-10-10T07:25:05Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:25:05Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:25:50Z DEBUG astra] Parsing return statement
[2025-10-10T07:25:50Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:25:50Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:25:50Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:25:50Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:25:50Z DEBUG astra] Parsing return statement
[2025-10-10T07:25:50Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:25:50Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:25:50Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:25:50Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:25:50Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:25:50Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("Is 1 equal to 1?"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:25:50Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("Is 1 strictly equal to 1.0?"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("Is dog < cat?"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("Logical operators test"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:25:50Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:25:50Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:25:50Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Print(Some("\n----------------------------------------\n"), []), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(Some("\n----------------------------------------\n"), []), Print(None, [Call("returns_a_string", [])]), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(Some("\n----------------------------------------\n"), []), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), Print(Some("\n----------------------------------------\n"), []), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is 1 equal to 1?"), []), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is 1 strictly equal to 1.0?"), []), Print(Some("Is dog < cat?"), []), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Logical operators test"), []), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:25:50Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:25:50Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:25:50Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:25:50Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 8
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:25:50Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:25:50Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:25:50Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 9
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:25:50Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:25:50Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 10
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 11
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:25:50Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:25:50Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!")))
[2025-10-10T07:25:50Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I'm coming from a function!
Result: I'm coming from a function!

Executing Statement 12
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 13
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 14
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 15
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 16
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 17
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 18
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 19
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 20
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 21
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 22
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 23
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 24
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 25
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 26
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 27
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 28
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 29
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 30
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("Is 1 equal to 1?"), [])
Output: Is 1 equal to 1?
Result: Is 1 equal to 1?

Executing Statement 31
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 32
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 33
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("Is 1 strictly equal to 1.0?"), [])
Output: Is 1 strictly equal to 1.0?
Result: Is 1 strictly equal to 1.0?

Executing Statement 34
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("Is dog < cat?"), [])
Output: Is dog < cat?
Result: Is dog < cat?

Executing Statement 35
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 36
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 37
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("Logical operators test"), [])
Output: Logical operators test
Result: Logical operators test

Executing Statement 38
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 39
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 40
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 41
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 42
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 43
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 44
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 45
-----------------------
[2025-10-10T07:25:50Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:25:50Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:26:03Z DEBUG astra] Parsing return statement
[2025-10-10T07:26:03Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:26:03Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:26:03Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:26:03Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:26:03Z DEBUG astra] Parsing return statement
[2025-10-10T07:26:03Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:26:03Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:26:03Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:26:03Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:26:03Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:26:03Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("Is 1 equal to 1?"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:26:03Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("Is 1 strictly equal to 1.0?"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("Is dog < cat?"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("Logical operators test..."), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:26:03Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:26:03Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:26:03Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Print(Some("\n----------------------------------------\n"), []), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(Some("\n----------------------------------------\n"), []), Print(None, [Call("returns_a_string", [])]), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(Some("\n----------------------------------------\n"), []), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), Print(Some("\n----------------------------------------\n"), []), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is 1 equal to 1?"), []), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is 1 strictly equal to 1.0?"), []), Print(Some("Is dog < cat?"), []), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Logical operators test..."), []), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:26:03Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:26:03Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:26:03Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:26:03Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 6
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 7
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 8
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:26:03Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:26:03Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:26:03Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 9
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:26:03Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:26:03Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 10
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 11
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:26:03Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:26:03Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!")))
[2025-10-10T07:26:03Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I'm coming from a function!
Result: I'm coming from a function!

Executing Statement 12
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 13
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 14
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 15
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 16
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 17
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 18
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 19
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 20
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 21
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 22
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 23
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 24
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 25
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 26
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 27
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 28
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 29
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 30
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("Is 1 equal to 1?"), [])
Output: Is 1 equal to 1?
Result: Is 1 equal to 1?

Executing Statement 31
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 32
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 33
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("Is 1 strictly equal to 1.0?"), [])
Output: Is 1 strictly equal to 1.0?
Result: Is 1 strictly equal to 1.0?

Executing Statement 34
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("Is dog < cat?"), [])
Output: Is dog < cat?
Result: Is dog < cat?

Executing Statement 35
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 36
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 37
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("Logical operators test..."), [])
Output: Logical operators test...
Result: Logical operators test...

Executing Statement 38
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 39
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 40
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 41
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 42
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 43
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 44
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 45
-----------------------
[2025-10-10T07:26:03Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:26:03Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:28:22Z DEBUG astra] Parsing return statement
[2025-10-10T07:28:22Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:28:22Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:28:22Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:28:22Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:28:22Z DEBUG astra] Parsing return statement
[2025-10-10T07:28:22Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:28:22Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("Now let's call add()...\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("Now let's call divide() and mult()...\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:28:22Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:28:22Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("Now let's call returns_a_string()...\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("Now let's declare b as a literal...\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("Now let's declare d as an expression...\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("Now let's see if d is really a thing...\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("Testing equality and relational operators...\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:28:22Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("Is y strictly equal to z?\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("Is y not strictly equal to z?\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("Is 1 equal to 1?\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:28:22Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("Is 1 strictly equal to 1.0?\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("Is dog < cat?"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("Logical operators test...\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:28:22Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:28:22Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:28:22Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]), Print(Some("Now let's call add()...\n"), []), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("Now let's call divide() and mult()...\n"), []), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Now let's call returns_a_string()...\n"), []), Print(None, [Call("returns_a_string", [])]), Print(Some("\n----------------------------------------\n"), []), Print(Some("Now let's declare b as a literal...\n"), []), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("Now let's declare d as an expression...\n"), []), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("Now let's see if d is really a thing...\n"), []), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("Testing equality and relational operators...\n"), []), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is y strictly equal to z?\n"), []), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is y not strictly equal to z?\n"), []), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is 1 equal to 1?\n"), []), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is 1 strictly equal to 1.0?\n"), []), Print(Some("Is dog < cat?"), []), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Logical operators test...\n"), []), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Print(Some("\n----------------------------------------\n"), []), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("Now let's call add()...\n"), [])
Output: Now let's call add()...

Result: Now let's call add()...


Executing Statement 6
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:28:22Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:28:22Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:28:22Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:28:22Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 7
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 8
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 9
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("Now let's call divide() and mult()...\n"), [])
Output: Now let's call divide() and mult()...

Result: Now let's call divide() and mult()...


Executing Statement 10
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:28:22Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:28:22Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:28:22Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 11
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:28:22Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:28:22Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 12
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 13
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("Now let's call returns_a_string()...\n"), [])
Output: Now let's call returns_a_string()...

Result: Now let's call returns_a_string()...


Executing Statement 14
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:28:22Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:28:22Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!")))
[2025-10-10T07:28:22Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I'm coming from a function!
Result: I'm coming from a function!

Executing Statement 15
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 16
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("Now let's declare b as a literal...\n"), [])
Output: Now let's declare b as a literal...

Result: Now let's declare b as a literal...


Executing Statement 17
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 18
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 19
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 20
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("Now let's declare d as an expression...\n"), [])
Output: Now let's declare d as an expression...

Result: Now let's declare d as an expression...


Executing Statement 21
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 22
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 23
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 24
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("Now let's see if d is really a thing...\n"), [])
Output: Now let's see if d is really a thing...

Result: Now let's see if d is really a thing...


Executing Statement 25
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 26
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 27
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("Testing equality and relational operators...\n"), [])
Output: Testing equality and relational operators...

Result: Testing equality and relational operators...


Executing Statement 28
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 29
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 30
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 31
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("Is y strictly equal to z?\n"), [])
Output: Is y strictly equal to z?

Result: Is y strictly equal to z?


Executing Statement 32
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 33
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 34
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 35
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 36
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("Is y not strictly equal to z?\n"), [])
Output: Is y not strictly equal to z?

Result: Is y not strictly equal to z?


Executing Statement 37
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 38
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 39
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("Is 1 equal to 1?\n"), [])
Output: Is 1 equal to 1?

Result: Is 1 equal to 1?


Executing Statement 40
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 41
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 42
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("Is 1 strictly equal to 1.0?\n"), [])
Output: Is 1 strictly equal to 1.0?

Result: Is 1 strictly equal to 1.0?


Executing Statement 43
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("Is dog < cat?"), [])
Output: Is dog < cat?
Result: Is dog < cat?

Executing Statement 44
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 45
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 46
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("Logical operators test...\n"), [])
Output: Logical operators test...

Result: Logical operators test...


Executing Statement 47
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 48
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 49
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 50
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 51
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 52
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 53
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 54
-----------------------
[2025-10-10T07:28:22Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:28:22Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:28:38Z DEBUG astra] Parsing return statement
[2025-10-10T07:28:38Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:28:38Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:28:38Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:28:38Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:28:38Z DEBUG astra] Parsing return statement
[2025-10-10T07:28:38Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:28:38Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("Now let's call add()...\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("Now let's call divide() and mult()...\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:28:38Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:28:38Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("Now let's call returns_a_string()...\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("Now let's declare b as a literal...\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("Now let's declare d as an expression...\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("Now let's see if d is really a thing...\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("Testing equality and relational operators...\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:28:38Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("Is y strictly equal to z?\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("Is y not strictly equal to z?\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("Is 1 equal to 1?\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:28:38Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("Is 1 strictly equal to 1.0?\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("Is dog < cat?"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("Logical operators test...\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:28:38Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("Testing 'and' and 'not' operators...\n"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:28:38Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:28:38Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]), Print(Some("Now let's call add()...\n"), []), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("Now let's call divide() and mult()...\n"), []), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Now let's call returns_a_string()...\n"), []), Print(None, [Call("returns_a_string", [])]), Print(Some("\n----------------------------------------\n"), []), Print(Some("Now let's declare b as a literal...\n"), []), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("Now let's declare d as an expression...\n"), []), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("Now let's see if d is really a thing...\n"), []), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("Testing equality and relational operators...\n"), []), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is y strictly equal to z?\n"), []), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is y not strictly equal to z?\n"), []), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is 1 equal to 1?\n"), []), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is 1 strictly equal to 1.0?\n"), []), Print(Some("Is dog < cat?"), []), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Logical operators test...\n"), []), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Testing 'and' and 'not' operators...\n"), []), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("Now let's call add()...\n"), [])
Output: Now let's call add()...

Result: Now let's call add()...


Executing Statement 6
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:28:38Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:28:38Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:28:38Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:28:38Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 7
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 8
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 9
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("Now let's call divide() and mult()...\n"), [])
Output: Now let's call divide() and mult()...

Result: Now let's call divide() and mult()...


Executing Statement 10
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:28:38Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:28:38Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:28:38Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 11
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:28:38Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:28:38Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 12
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 13
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("Now let's call returns_a_string()...\n"), [])
Output: Now let's call returns_a_string()...

Result: Now let's call returns_a_string()...


Executing Statement 14
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:28:38Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:28:38Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!")))
[2025-10-10T07:28:38Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I'm coming from a function!
Result: I'm coming from a function!

Executing Statement 15
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 16
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("Now let's declare b as a literal...\n"), [])
Output: Now let's declare b as a literal...

Result: Now let's declare b as a literal...


Executing Statement 17
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 18
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 19
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 20
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("Now let's declare d as an expression...\n"), [])
Output: Now let's declare d as an expression...

Result: Now let's declare d as an expression...


Executing Statement 21
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 22
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 23
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 24
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("Now let's see if d is really a thing...\n"), [])
Output: Now let's see if d is really a thing...

Result: Now let's see if d is really a thing...


Executing Statement 25
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 26
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 27
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("Testing equality and relational operators...\n"), [])
Output: Testing equality and relational operators...

Result: Testing equality and relational operators...


Executing Statement 28
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 29
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 30
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 31
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("Is y strictly equal to z?\n"), [])
Output: Is y strictly equal to z?

Result: Is y strictly equal to z?


Executing Statement 32
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 33
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 34
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 35
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 36
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("Is y not strictly equal to z?\n"), [])
Output: Is y not strictly equal to z?

Result: Is y not strictly equal to z?


Executing Statement 37
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 38
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 39
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("Is 1 equal to 1?\n"), [])
Output: Is 1 equal to 1?

Result: Is 1 equal to 1?


Executing Statement 40
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 41
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 42
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("Is 1 strictly equal to 1.0?\n"), [])
Output: Is 1 strictly equal to 1.0?

Result: Is 1 strictly equal to 1.0?


Executing Statement 43
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("Is dog < cat?"), [])
Output: Is dog < cat?
Result: Is dog < cat?

Executing Statement 44
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 45
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 46
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("Logical operators test...\n"), [])
Output: Logical operators test...

Result: Logical operators test...


Executing Statement 47
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 48
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 49
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 50
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 51
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 52
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("Testing 'and' and 'not' operators...\n"), [])
Output: Testing 'and' and 'not' operators...

Result: Testing 'and' and 'not' operators...


Executing Statement 53
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 54
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 55
-----------------------
[2025-10-10T07:28:38Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:28:38Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
--- Starting script execution from test.ast ---
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("The answer is {}"), [Var("result")])
[2025-10-10T07:29:06Z DEBUG astra] Parsing return statement
[2025-10-10T07:29:06Z DEBUG astra] Parsed return statement: Return(Some(Var("result")))
[2025-10-10T07:29:06Z DEBUG astra] Parsed fn add(["number"]) [[Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]]
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
[2025-10-10T07:29:06Z DEBUG astra] Parsed fn divide(["number"]) [[Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]]
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
[2025-10-10T07:29:06Z DEBUG astra] Parsed fn mult(["number1", "number2"]) [[Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]]
[2025-10-10T07:29:06Z DEBUG astra] Parsing return statement
[2025-10-10T07:29:06Z DEBUG astra] Parsed return statement: Return(Some(Var("my_string")))
[2025-10-10T07:29:06Z DEBUG astra] Parsed fn returns_a_string([]) [[Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]]
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("Now let's call add()...\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsing argument, current token: Number("177")
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(None, [Var("a")])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("Now let's call divide() and mult()...\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsing argument, current token: Number("10")
[2025-10-10T07:29:06Z DEBUG astra] Parsing argument, current token: Number("21")
[2025-10-10T07:29:06Z DEBUG astra] Parsing argument, current token: Number("2")
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("Now let's call returns_a_string()...\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("Now let's declare b as a literal...\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(None, [Var("b")])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("Now let's declare d as an expression...\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(None, [Var("d")])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("Now let's see if d is really a thing...\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("Testing equality and relational operators...\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("x equals {}"), [Var("x")])
[2025-10-10T07:29:06Z DEBUG astra] Parsed if statement with condition Cmp(Var("x"), "==", Num("10")), if body [Print(Some("x equals {}"), [Var("x")])], and else body None
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("Is y strictly equal to z?\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "===", Var("z")), if body [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], and else body Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("Is y not strictly equal to z?\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed if statement with condition Cmp(Var("y"), "!==", Var("z")), if body [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], and else body None
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("Is 1 equal to 1?\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("1 equals 1"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("1 does not equal 2"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("2")), if body [Print(Some("1 does not equal 2"), [])], and else body None
[2025-10-10T07:29:06Z DEBUG astra] Parsed if statement with condition Cmp(Num("1"), "==", Num("1")), if body [Print(Some("1 equals 1"), [])], and else body Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("Is 1 strictly equal to 1.0?\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("Is dog < cat?"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("yes"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("no"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed if statement with condition Cmp(Str("dog"), "<", Str("cat")), if body [Print(Some("yes"), [])], and else body Some([Print(Some("no"), [])])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("Testing 'or' and '!=' operators...\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("is x not 2 or y not 3?"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("x is 2 or y is 2"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
[2025-10-10T07:29:06Z DEBUG astra] Parsed if statement with condition Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), if body [Print(Some("x is 2 or y is 2"), [])], and else body Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("\n----------------------------------------\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("Testing 'and' and 'not' operators...\n"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("var1 is true and var2 is false"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed print statement: Print(Some("one or both conditions are false"), [])
[2025-10-10T07:29:06Z DEBUG astra] Parsed if statement with condition Logic(Var("var1"), "and", Prefix('!', Var("var2"))), if body [Print(Some("var1 is true and var2 is false"), [])], and else body Some([Print(Some("one or both conditions are false"), [])])
[2025-10-10T07:29:06Z DEBUG astra] Parsed statements: [Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))]), Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])]), Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])]), Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))]), Print(Some("Now let's call add()...\n"), []), Expr(Infix(Var("a"), '=', Call("add", [Num("177")]))), Print(None, [Var("a")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("Now let's call divide() and mult()...\n"), []), Expr(Call("divide", [Num("10")])), Expr(Call("mult", [Num("21"), Num("2")])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Now let's call returns_a_string()...\n"), []), Print(None, [Call("returns_a_string", [])]), Print(Some("\n----------------------------------------\n"), []), Print(Some("Now let's declare b as a literal...\n"), []), Expr(Infix(Var("b"), '=', Num("2"))), Print(None, [Var("b")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("Now let's declare d as an expression...\n"), []), Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))]), Print(None, [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("Now let's see if d is really a thing...\n"), []), Print(Some("See? d is now a thing... d = {}"), [Var("d")]), Print(Some("\n----------------------------------------\n"), []), Print(Some("Testing equality and relational operators...\n"), []), Expr(Infix(Var("x"), '=', Num("10"))), If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is y strictly equal to z?\n"), []), Expr(Infix(Var("y"), '=', Num("100"))), Expr(Infix(Var("z"), '=', Num("100.0"))), If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is y not strictly equal to z?\n"), []), If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is 1 equal to 1?\n"), []), If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Is 1 strictly equal to 1.0?\n"), []), Print(Some("Is dog < cat?"), []), If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Testing 'or' and '!=' operators...\n"), []), Expr(Infix(Var("x"), '=', Num("2"))), Expr(Infix(Var("y"), '=', Num("3"))), Print(Some("is x not 2 or y not 3?"), []), If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])])), Print(Some("\n----------------------------------------\n"), []), Print(Some("Testing 'and' and 'not' operators...\n"), []), Expr(Infix(Var("var1"), '=', Bool(true))), Expr(Infix(Var("var2"), '=', Bool(false))), If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))]

Executing Statement 1
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Def("add", ["number"], [Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5")))), Print(Some("The answer is {}"), [Var("result")]), Return(Some(Var("result")))])

Executing Statement 2
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Def("divide", ["number"], [Expr(Infix(Var("wow"), '=', Str("\"Wow!\""))), Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])])

Executing Statement 3
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Def("mult", ["number1", "number2"], [Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])])

Executing Statement 4
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Def("returns_a_string", [], [Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!"))), Return(Some(Var("my_string")))])

Executing Statement 5
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("Now let's call add()...\n"), [])
Output: Now let's call add()...

Result: Now let's call add()...


Executing Statement 6
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Expr(Infix(Var("a"), '=', Call("add", [Num("177")])))
[2025-10-10T07:29:06Z DEBUG astra] Executing function 'add', args: [Num("177")]
[2025-10-10T07:29:06Z DEBUG astra] Running statement in function: Expr(Infix(Var("result"), '=', Infix(Infix(Var("number"), '+', Num("500")), '*', Num("5"))))
[2025-10-10T07:29:06Z DEBUG astra] Running statement in function: Print(Some("The answer is {}"), [Var("result")])
Block Output (Stmt 2): The answer is 3385
[2025-10-10T07:29:06Z DEBUG astra] Running statement in function: Return(Some(Var("result")))
Result: 3385

Executing Statement 7
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(None, [Var("a")])
Output: 3385
Result: 3385

Executing Statement 8
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 9
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("Now let's call divide() and mult()...\n"), [])
Output: Now let's call divide() and mult()...

Result: Now let's call divide() and mult()...


Executing Statement 10
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Expr(Call("divide", [Num("10")]))
[2025-10-10T07:29:06Z DEBUG astra] Executing function 'divide', args: [Num("10")]
[2025-10-10T07:29:06Z DEBUG astra] Running statement in function: Expr(Infix(Var("wow"), '=', Str("\"Wow!\"")))
[2025-10-10T07:29:06Z DEBUG astra] Running statement in function: Print(Some("The division yields {} and I'd just like to say, {}, or even, {}"), [Infix(Var("number"), '/', Num("1")), Str("\"Phew!\""), Var("wow")])
Block Output (Stmt 2): The division yields 10 and I'd just like to say, "Phew!", or even, "Wow!"
Result: ""Wow!""

Executing Statement 11
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Expr(Call("mult", [Num("21"), Num("2")]))
[2025-10-10T07:29:06Z DEBUG astra] Executing function 'mult', args: [Num("21"), Num("2")]
[2025-10-10T07:29:06Z DEBUG astra] Running statement in function: Print(Some("We're multiplying {} and {}, and the answer is {}!"), [Var("number1"), Var("number2"), Infix(Var("number1"), '*', Var("number2"))])
Block Output (Stmt 1): We're multiplying 21 and 2, and the answer is 42!

Executing Statement 12
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 13
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("Now let's call returns_a_string()...\n"), [])
Output: Now let's call returns_a_string()...

Result: Now let's call returns_a_string()...


Executing Statement 14
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(None, [Call("returns_a_string", [])])
[2025-10-10T07:29:06Z DEBUG astra] Executing function 'returns_a_string', args: []
[2025-10-10T07:29:06Z DEBUG astra] Running statement in function: Expr(Infix(Var("my_string"), '=', Str("I'm coming from a function!")))
[2025-10-10T07:29:06Z DEBUG astra] Running statement in function: Return(Some(Var("my_string")))
Output: I'm coming from a function!
Result: I'm coming from a function!

Executing Statement 15
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 16
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("Now let's declare b as a literal...\n"), [])
Output: Now let's declare b as a literal...

Result: Now let's declare b as a literal...


Executing Statement 17
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Expr(Infix(Var("b"), '=', Num("2")))
Result: 2

Executing Statement 18
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(None, [Var("b")])
Output: 2
Result: 2

Executing Statement 19
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 20
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("Now let's declare d as an expression...\n"), [])
Output: Now let's declare d as an expression...

Result: Now let's declare d as an expression...


Executing Statement 21
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(None, [Infix(Var("d"), '=', Infix(Infix(Num("100"), '*', Infix(Num("2"), '+', Num("5"))), '-', Num("63")))])
Output: 637
Result: 637

Executing Statement 22
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(None, [Var("d")])
Output: 637
Result: 637

Executing Statement 23
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 24
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("Now let's see if d is really a thing...\n"), [])
Output: Now let's see if d is really a thing...

Result: Now let's see if d is really a thing...


Executing Statement 25
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("See? d is now a thing... d = {}"), [Var("d")])
Output: See? d is now a thing... d = 637
Result: See? d is now a thing... d = 637

Executing Statement 26
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 27
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("Testing equality and relational operators...\n"), [])
Output: Testing equality and relational operators...

Result: Testing equality and relational operators...


Executing Statement 28
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("10")))
Result: 10

Executing Statement 29
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: If(Cmp(Var("x"), "==", Num("10")), [Print(Some("x equals {}"), [Var("x")])], None)
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("x equals {}"), [Var("x")])
Output: x equals 10

Executing Statement 30
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 31
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("Is y strictly equal to z?\n"), [])
Output: Is y strictly equal to z?

Result: Is y strictly equal to z?


Executing Statement 32
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("100")))
Result: 100

Executing Statement 33
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Expr(Infix(Var("z"), '=', Num("100.0")))
Result: 100

Executing Statement 34
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: If(Cmp(Var("y"), "===", Var("z")), [Print(Some("y === z: y equals z, but it's not strictly the same because an integer is not a float!"), [])], Some([Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])]))
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("y === z: This is what you should see because the test yields false (y = 100, z = 100.0)"), [])
Output: y === z: This is what you should see because the test yields false (y = 100, z = 100.0)

Executing Statement 35
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 36
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("Is y not strictly equal to z?\n"), [])
Output: Is y not strictly equal to z?

Result: Is y not strictly equal to z?


Executing Statement 37
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: If(Cmp(Var("y"), "!==", Var("z")), [Print(Some("y !== z: That's right, y does not strictly equal z."), [])], None)
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("y !== z: That's right, y does not strictly equal z."), [])
Output: y !== z: That's right, y does not strictly equal z.

Executing Statement 38
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 39
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("Is 1 equal to 1?\n"), [])
Output: Is 1 equal to 1?

Result: Is 1 equal to 1?


Executing Statement 40
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: If(Cmp(Num("1"), "==", Num("1")), [Print(Some("1 equals 1"), [])], Some([If(Cmp(Num("1"), "==", Num("2")), [Print(Some("1 does not equal 2"), [])], None)]))
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("1 equals 1"), [])
Output: 1 equals 1

Executing Statement 41
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 42
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("Is 1 strictly equal to 1.0?\n"), [])
Output: Is 1 strictly equal to 1.0?

Result: Is 1 strictly equal to 1.0?


Executing Statement 43
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("Is dog < cat?"), [])
Output: Is dog < cat?
Result: Is dog < cat?

Executing Statement 44
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: If(Cmp(Str("dog"), "<", Str("cat")), [Print(Some("yes"), [])], Some([Print(Some("no"), [])]))
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("no"), [])
Output: no

Executing Statement 45
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 46
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("Testing 'or' and '!=' operators...\n"), [])
Output: Testing 'or' and '!=' operators...

Result: Testing 'or' and '!=' operators...


Executing Statement 47
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Expr(Infix(Var("x"), '=', Num("2")))
Result: 2

Executing Statement 48
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Expr(Infix(Var("y"), '=', Num("3")))
Result: 3

Executing Statement 49
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("is x not 2 or y not 3?"), [])
Output: is x not 2 or y not 3?
Result: is x not 2 or y not 3?

Executing Statement 50
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: If(Logic(Cmp(Var("x"), "!=", Num("2")), "or", Cmp(Var("y"), "!=", Num("3"))), [Print(Some("x is 2 or y is 2"), [])], Some([Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])]))
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("neither condition is satisfied, x = {}, y = {}"), [Var("x"), Var("y")])
Output: neither condition is satisfied, x = 2, y = 3

Executing Statement 51
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("\n----------------------------------------\n"), [])
Output: 
----------------------------------------

Result: 
----------------------------------------


Executing Statement 52
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("Testing 'and' and 'not' operators...\n"), [])
Output: Testing 'and' and 'not' operators...

Result: Testing 'and' and 'not' operators...


Executing Statement 53
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Expr(Infix(Var("var1"), '=', Bool(true)))
Result: true

Executing Statement 54
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Expr(Infix(Var("var2"), '=', Bool(false)))
Result: false

Executing Statement 55
-----------------------
[2025-10-10T07:29:06Z DEBUG astra] Running statement: If(Logic(Var("var1"), "and", Prefix('!', Var("var2"))), [Print(Some("var1 is true and var2 is false"), [])], Some([Print(Some("one or both conditions are false"), [])]))
[2025-10-10T07:29:06Z DEBUG astra] Running statement: Print(Some("var1 is true and var2 is false"), [])
Output: var1 is true and var2 is false
